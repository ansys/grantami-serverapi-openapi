{
  "openapi": "3.0.1",
  "info": {
    "title": "MI Server API",
    "version": "v1"
  },
  "paths": {
    "/v1alpha/databases/{database-key}/tables/{table-identity}:aggregations": {
      "post": {
        "tags": [
          "Aggregation"
        ],
        "summary": "Runs an aggregation against the table.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-identity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
              "nullable": true
            }
          },
          {
            "name": "X-Ansys-VC-Mode",
            "in": "header",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Database or table not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/tables/{table-guid}:aggregations": {
      "post": {
        "tags": [
          "Aggregation"
        ],
        "summary": "Runs an aggregation against the table.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
              "nullable": true
            }
          },
          {
            "name": "X-Ansys-VC-Mode",
            "in": "header",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Database or table not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}:aggregations": {
      "post": {
        "tags": [
          "Aggregation"
        ],
        "summary": "Runs an aggregation against the database.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
              "nullable": true
            }
          },
          {
            "name": "X-Ansys-VC-Mode",
            "in": "header",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Database not found"
          }
        }
      }
    },
    "/v1alpha/integration-schemas/{schema}:aggregations": {
      "post": {
        "tags": [
          "Aggregation"
        ],
        "summary": "Runs an aggregation against the integration schema.",
        "parameters": [
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Schema not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/tables/{table-identity}:generate-integration-schema": {
      "get": {
        "tags": [
          "Database"
        ],
        "summary": "Generate an integration schema from the attributes in the given table. The user must be an Admin user for the database.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-identity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database or table not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/tables/{table-name}:generate-integration-schema": {
      "get": {
        "tags": [
          "Database"
        ],
        "summary": "Generate an integration schema from the attributes in the given table. The user must be an Admin user for the database.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database or table not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/tables/{table-identity}/layout/{layout-identity}:generate-integration-schema": {
      "get": {
        "tags": [
          "Database"
        ],
        "summary": "Generate an integration schema from the attributes in the given layout. The user must be an Admin user for the database.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-identity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "layout-identity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database, table or layout not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/tables/{table-name}/layout/{layout-identity}:generate-integration-schema": {
      "get": {
        "tags": [
          "Database"
        ],
        "summary": "Generate an integration schema from the attributes in the given layout. The user must be an Admin user for the database.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "layout-identity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database, table or layout not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/tables/{table-identity}/layout/{layout-name}:generate-integration-schema": {
      "get": {
        "tags": [
          "Database"
        ],
        "summary": "Generate an integration schema from the attributes in the given layout. The user must be an Admin user for the database.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-identity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "layout-name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database, table or layout not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/tables/{table-name}/layout/{layout-name}:generate-integration-schema": {
      "get": {
        "tags": [
          "Database"
        ],
        "summary": "Generate an integration schema from the attributes in the given layout. The user must be an Admin user for the database.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "layout-name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database, table or layout not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/standard-names:generate-integration-schema": {
      "post": {
        "tags": [
          "Database"
        ],
        "summary": "Generate an integration schema with attributes for each provided standard name in the given database. The user must be an Admin user for the database.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database not found"
          }
        }
      }
    },
    "/v1alpha/standard-names:generate-integration-schema": {
      "post": {
        "tags": [
          "Database"
        ],
        "summary": "Generate an integration schema with attributes for each provided standard name. This will include attribute from all loaded databases for which the user is an Admin.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}:export": {
      "post": {
        "tags": [
          "DataExport"
        ],
        "summary": "Export data from the given database.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
              "nullable": true
            }
          },
          {
            "name": "X-Ansys-VC-Mode",
            "in": "header",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiDataExportDataExportRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiDataExportDataExportRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiDataExportDataExportRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiDataExportDataExportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiDataExportDataExportResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiDataExportDataExportResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiDataExportDataExportResponse"
                }
              }
            }
          },
          "404": {
            "description": "Database not found"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/v1alpha/integration-schemas/{schema}:export": {
      "post": {
        "tags": [
          "DataExport"
        ],
        "summary": "Export data from the integration schema.",
        "parameters": [
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiIntegrationDataExportIntegrationDataExportRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiIntegrationDataExportIntegrationDataExportRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiIntegrationDataExportIntegrationDataExportRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiIntegrationDataExportIntegrationDataExportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiDataExportDataExportResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiDataExportDataExportResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiDataExportDataExportResponse"
                }
              }
            }
          },
          "404": {
            "description": "Schema not found"
          }
        }
      }
    },
    "/v1alpha/integration-schemas": {
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "Lists the available integration schemas.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Integration"
        ],
        "summary": "Add an integration schema. Will fail if the schema is not valid, or if the user is not both a global administrator and an administrator for the schema.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successfully"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Invalid schema. Returns a list of validation errors"
          }
        }
      }
    },
    "/v1alpha/integration-schemas/{schema}:status": {
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "Returns the status of the integration schema, including whether each referenced database has been successfully loaded into the schemas search index.",
        "parameters": [
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationIntegrationSchemaStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationIntegrationSchemaStatus"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationIntegrationSchemaStatus"
                }
              }
            }
          },
          "404": {
            "description": "Schema not found"
          }
        }
      }
    },
    "/v1alpha/integration-schemas:status": {
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "Returns the status of all available integration schemas.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/GrantaServerApiIntegrationIntegrationSchemaStatus"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/GrantaServerApiIntegrationIntegrationSchemaStatus"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/GrantaServerApiIntegrationIntegrationSchemaStatus"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1alpha/integration-schemas/{schema}": {
      "put": {
        "tags": [
          "Integration"
        ],
        "summary": "Updates an integration schema, or adds a new one if there is not one with the same key already.\r\nWill fail if the schema is not valid, or if the user is not both a global administrator and an administrator for the schema.",
        "parameters": [
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Invalid schema. Returns a list of validation errors"
          }
        }
      },
      "delete": {
        "tags": [
          "Integration"
        ],
        "summary": "Delete an integration schema. Will fail if the schema does not exist, or if the user is not both a global administrator and an administrator for the schema.",
        "parameters": [
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Schema not found"
          }
        }
      },
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "Returns the full object representing the integration schema.\r\nNames and identities of source items will be populated if they can be found in the databases currently loaded in MI, otherwise just the GUIDs will be returned.",
        "parameters": [
          {
            "name": "schema",
            "in": "path",
            "description": "The schema name.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The schema name.",
              "nullable": true
            }
          },
          {
            "name": "includeImplicitAttributes",
            "in": "query",
            "description": "Whether to add in the schema attributes derived from certain record properties (e.g. Record Name) that are implicitly in all integration schemas. False by default.",
            "schema": {
              "type": "boolean",
              "description": "Whether to add in the schema attributes derived from certain record properties (e.g. Record Name) that are implicitly in all integration schemas. False by default."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaIntegrationSchema"
                }
              }
            }
          },
          "404": {
            "description": "Schema not found"
          }
        }
      }
    },
    "/v1alpha/integration-schemas/{schema}/attributes": {
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "Returns a list of the attributes defined in the integration schema.",
        "parameters": [
          {
            "name": "schema",
            "in": "path",
            "description": "The schema name.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The schema name.",
              "nullable": true
            }
          },
          {
            "name": "includeImplicitAttributes",
            "in": "query",
            "description": "Whether to add in the schema attributes derived from certain record properties (e.g. Record Name) that are implicitly in all integration schemas. False by default.",
            "schema": {
              "type": "boolean",
              "description": "Whether to add in the schema attributes derived from certain record properties (e.g. Record Name) that are implicitly in all integration schemas. False by default."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaAttribute"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaAttribute"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaAttribute"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Schema not found"
          }
        }
      }
    },
    "/v1alpha/integration-schemas/{schema}/sources/database/{database-key}/table/{table-identity}": {
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "Returns a list of the schema source mapping from the given table. Will fail if the database is not loaded in MI.\r\nNames and identities of source items will be populated.",
        "parameters": [
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-identity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaSource"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaSource"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaSource"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Schema not found"
          }
        }
      }
    },
    "/api/v1/lists/list/{listIdentifier}/items": {
      "get": {
        "tags": [
          "ListItem"
        ],
        "summary": "Returns the items in the given list",
        "parameters": [
          {
            "name": "listIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/lists/list/{listIdentifier}/items/add": {
      "post": {
        "tags": [
          "ListItem"
        ],
        "summary": "Adds the specified items to an existing list.",
        "parameters": [
          {
            "name": "listIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListItems"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListItems"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListItems"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListItems"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/lists/list/{listIdentifier}/items/remove": {
      "post": {
        "tags": [
          "ListItem"
        ],
        "summary": "Removed the specified items from an existing list.",
        "parameters": [
          {
            "name": "listIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListItems"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListItems"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListItems"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListItems"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/lists": {
      "get": {
        "tags": [
          "ListManagement"
        ],
        "summary": "Returns all lists visible to the calling user",
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "ListManagement"
        ],
        "summary": "Creates a new list with the specified properties and items.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListCreate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListCreate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListCreate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/v1/lists/search": {
      "post": {
        "tags": [
          "ListManagement"
        ],
        "summary": "Posts a search request, and returns a resource containing the results",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListSearchRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListSearchRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListSearchRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/v1/lists/search/results/{resultResourceIdentifier}": {
      "get": {
        "tags": [
          "ListManagement"
        ],
        "summary": "Returns the search results found in the specified resource",
        "parameters": [
          {
            "name": "resultResourceIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/lists/list/{listIdentifier}": {
      "get": {
        "tags": [
          "ListManagement"
        ],
        "summary": "Returns the given list if it exists and the calling user has read access to it",
        "parameters": [
          {
            "name": "listIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "ListManagement"
        ],
        "summary": "If the list exists, updates the properties of the list. This will overwrite all current properties, but not the contents of the list.\r\nIf the list does not exist, create it (empty)",
        "parameters": [
          {
            "name": "listIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListProperties"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListProperties"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListProperties"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListProperties"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "patch": {
        "tags": [
          "ListManagement"
        ],
        "summary": "Performs a partial update on the properties of a list.",
        "parameters": [
          {
            "name": "listIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MicrosoftAspNetCoreJsonPatchOperationsOperation"
                },
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MicrosoftAspNetCoreJsonPatchOperationsOperation"
                },
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MicrosoftAspNetCoreJsonPatchOperationsOperation"
                },
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MicrosoftAspNetCoreJsonPatchOperationsOperation"
                },
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "ListManagement"
        ],
        "summary": "Delete an existing list.",
        "parameters": [
          {
            "name": "listIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/lists/list/{listIdentifier}/request-approval": {
      "post": {
        "tags": [
          "ListManagement"
        ],
        "summary": "Update the status of an existing list to \"awaiting approval\".",
        "parameters": [
          {
            "name": "listIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/lists/list/{listIdentifier}/reset": {
      "post": {
        "tags": [
          "ListManagement"
        ],
        "summary": "Update the status of an existing list to not be \"awaiting approval\".",
        "parameters": [
          {
            "name": "listIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/lists/list/{listIdentifier}/publish": {
      "post": {
        "tags": [
          "ListManagement"
        ],
        "summary": "Update the status of an existing list to \"published\". The list must be awaiting approval, and not already published.\r\nThe \"awaiting approval\" flag will be reset to false.",
        "parameters": [
          {
            "name": "listIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/lists/list/{listIdentifier}/unpublish": {
      "post": {
        "tags": [
          "ListManagement"
        ],
        "summary": "Update the status of an existing list to \"unpublished\". The list must be published, and awaiting approval.\r\nThe \"awaiting approval\" flag will be reset to false.",
        "parameters": [
          {
            "name": "listIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/lists/list/{listIdentifier}/revise": {
      "post": {
        "tags": [
          "ListManagement"
        ],
        "summary": "Creates a private copy of a list that can be revised.",
        "parameters": [
          {
            "name": "listIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/v1/lists/list/{listIdentifier}/copy": {
      "post": {
        "tags": [
          "ListManagement"
        ],
        "summary": "Creates a copy of the list and its items",
        "parameters": [
          {
            "name": "listIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/v1/lists/list/{listIdentifier}/permissions/subscribe": {
      "post": {
        "tags": [
          "ListPermissions"
        ],
        "summary": "Subscribes the calling user to the specified list.",
        "parameters": [
          {
            "name": "listIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/lists/list/{listIdentifier}/permissions/unsubscribe": {
      "post": {
        "tags": [
          "ListPermissions"
        ],
        "summary": "Unsubscribes the calling user from the specified list.",
        "parameters": [
          {
            "name": "listIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/lists/list/{listIdentifier}/permissions": {
      "get": {
        "tags": [
          "ListPermissions"
        ],
        "summary": "Gets all permissions associated with the specified list.",
        "parameters": [
          {
            "name": "listIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "ListPermissions"
        ],
        "summary": "Sets permissions for the specified list. Returns a collection of URIs to the created/updated permissions.",
        "parameters": [
          {
            "name": "listIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiListsDtoUserPermissionInputDto"
                },
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiListsDtoUserPermissionInputDto"
                },
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiListsDtoUserPermissionInputDto"
                },
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiListsDtoUserPermissionInputDto"
                },
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/lists/list/{listIdentifier}/permissions/user/{userIdentifier}": {
      "get": {
        "tags": [
          "ListPermissions"
        ],
        "summary": "Gets the permission flags of the permission associating the specified list with the specified user.",
        "parameters": [
          {
            "name": "listIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "ListPermissions"
        ],
        "summary": "Sets the permission flags of the permission associating the specified list with the specified user.",
        "parameters": [
          {
            "name": "listIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListPermissionFlagsDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListPermissionFlagsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListPermissionFlagsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListPermissionFlagsDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v1alpha/schema/mi-version": {
      "get": {
        "tags": [
          "Schema"
        ],
        "summary": "Returns the currently running MI version to the caller.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiAdminMiVersion"
                }
              }
            }
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/tables/{table-guid}/attributes": {
      "get": {
        "tags": [
          "Schema - Attributes"
        ],
        "summary": "Get all attributes in table",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
              "nullable": true
            }
          },
          {
            "name": "X-Ansys-VC-Mode",
            "in": "header",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "post": {
        "tags": [
          "Schema - Attributes"
        ],
        "summary": "Create a new attribute.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
              },
              "examples": {
                "Example 101": {
                  "summary": "Date-time attribute",
                  "description": "This example demonstrates how to create a new date-time attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"dateTime","defaultThresholdType":"atMost","name":"Delivery date"}
                },
                "Example 102": {
                  "summary": "Date-time attribute with guid",
                  "description": "This example demonstrates how to create a new date-time attribute with a specified guid for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database. The same thing can be done for all attribute types.",
                  "value": {"type":"dateTime","defaultThresholdType":"atMost","name":"Delivery date (guid)","guid":"2c1e1aba-19a2-47fe-8392-6ee2fdc9b72a"}
                },
                "Example 103": {
                  "summary": "Discrete attribute - simple",
                  "description": "This example demonstrates how to create a new discrete attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000), using the 'Material type' discrete type, from the MI_Training database.",
                  "value": {"type":"discrete","discreteType":{"guid":"2ba638a6-b807-4480-a388-f1b5637489b2"},"isMultiValued":false,"defaultThresholdType":"isOneOf","name":"Used material type"}
                },
                "Example 104": {
                  "summary": "Discrete attribute - multi-valued",
                  "description": "This example demonstrates how to create a multi-valued discrete attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000), using the 'Material type' discrete type, from the MI_Training database. You can change the attribute back to a single-valued one as long as there is no multi-valued data already existing.",
                  "value": {"type":"discrete","discreteType":{"guid":"2ba638a6-b807-4480-a388-f1b5637489b2"},"isMultiValued":true,"defaultThresholdType":"isOneOf","name":"Appropriate material types"}
                },
                "Example 105": {
                  "summary": "File attribute",
                  "description": "This example demonstrates how to create a new file attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"file","defaultThresholdType":"exists","name":"Details PDF"}
                },
                "Example 106": {
                  "summary": "Hyperlink attribute",
                  "description": "This example demonstrates how to create a new hyperlink attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"hyperlink","defaultThresholdType":"exists","name":"Supplier website"}
                },
                "Example 107": {
                  "summary": "Integer attribute",
                  "description": "This example demonstrates how to create a new integer attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"integer","isUnique":false,"defaultThresholdType":"atLeast","name":"Number of batches"}
                },
                "Example 108": {
                  "summary": "Integer attribute - unique",
                  "description": "This example demonstrates how to create a new integer attribute which is constrained to have unique values for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"integer","isUnique":true,"defaultThresholdType":"atLeast","name":"Batch ID Number"}
                },
                "Example 109": {
                  "summary": "Logical attribute",
                  "description": "This example demonstrates how to create a new logical attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"logical","defaultThresholdType":"equal","name":"Inspected"}
                },
                "Example 110": {
                  "summary": "Long text attribute",
                  "description": "This example demonstrates how to create a new long text attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"longText","defaultThresholdType":"exists","name":"Long Description"}
                },
                "Example 111": {
                  "summary": "Picture attribute",
                  "description": "This example demonstrates how to create a new picture attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"picture","defaultThresholdType":"exists","name":"Photo"}
                },
                "Example 112": {
                  "summary": "Point attribute - simple unitless",
                  "description": "This example demonstrates how to create a new point attribute to represent a unitless single-valued property for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"point","isMultiValued":false,"defaultThresholdType":"atLeast","name":"My Shape factor"}
                },
                "Example 113": {
                  "summary": "Point attribute - simple with unit",
                  "description": "This example demonstrates how to create a new point attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a single-valued property with the unit of 'kg' from the MI_Training database.",
                  "value": {"type":"point","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"},"isMultiValued":false,"defaultThresholdType":"atLeast","name":"Mass"}
                },
                "Example 114": {
                  "summary": "Point attribute - multi-valued with unit",
                  "description": "This example demonstrates how to create a new point attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a multi-valued property with the unit of 'kg' from the MI_Training database. You can later change the attribute back to single-valued as long as there is no multi-valued data already existing.",
                  "value": {"type":"point","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"},"isMultiValued":true,"defaultThresholdType":"atLeast","name":"Observed masses"}
                },
                "Example 115": {
                  "summary": "Point attribute - multi-valued with parameters",
                  "description": "This example demonstrates how to create a new point attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a parameterized multi-valued property. In this case, a unitless property with 'Temperature' parameter from the the MI_Training database",
                  "value": {"type":"point","isMultiValued":true,"parameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"}],"defaultThresholdType":"atLeast","name":"Max ratio"}
                },
                "Example 116": {
                  "summary": "Range attribute - unitless",
                  "description": "This example demonstrates how to create a new range attribute for the 'MaterialUniverse' table (guid = {MiTraining.MaterialUniverseTableGuid}) from the MI_Training database to represent a unitless range value.",
                  "value": {"type":"range","defaultThresholdType":"atLeast","name":"Average permeability"}
                },
                "Example 117": {
                  "summary": "Range attribute - with unit",
                  "description": "This example demonstrates how to create a new range attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a range value with the unit 'K' from the MI_Training database.",
                  "value": {"type":"range","unit":{"guid":"00000002-0013-4fff-8fff-0000ffff0000"},"defaultThresholdType":"atLeast","name":"Boiling point"}
                },
                "Example 118": {
                  "summary": "Short text attribute",
                  "description": "This example demonstrates how to create a new short text attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"shortText","isUnique":false,"defaultThresholdType":"exists","name":"Label"}
                },
                "Example 119": {
                  "summary": "Short text attribute - unique",
                  "description": "This example demonstrates how to create a new short text attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database which is constrained to be unique.",
                  "value": {"type":"shortText","isUnique":true,"defaultThresholdType":"exists","name":"Serial number"}
                },
                "Example 120": {
                  "summary": "Short text meta-attribute",
                  "description": "This example demonstrates how to create a short text meta-attribute for the existing 'EPS Value' attribute in the MaterialUniverse (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) table of the MI_Training database. Any attribute type can be used for meta-attributes.",
                  "value": {"type":"shortText","isUnique":false,"defaultThresholdType":"exists","aboutAttribute":{"guid":"000000b9-0001-4fff-8fff-dd92ffff0000"},"name":"Short Label"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
              },
              "examples": {
                "Example 101": {
                  "summary": "Date-time attribute",
                  "description": "This example demonstrates how to create a new date-time attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"dateTime","defaultThresholdType":"atMost","name":"Delivery date"}
                },
                "Example 102": {
                  "summary": "Date-time attribute with guid",
                  "description": "This example demonstrates how to create a new date-time attribute with a specified guid for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database. The same thing can be done for all attribute types.",
                  "value": {"type":"dateTime","defaultThresholdType":"atMost","name":"Delivery date (guid)","guid":"2c1e1aba-19a2-47fe-8392-6ee2fdc9b72a"}
                },
                "Example 103": {
                  "summary": "Discrete attribute - simple",
                  "description": "This example demonstrates how to create a new discrete attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000), using the 'Material type' discrete type, from the MI_Training database.",
                  "value": {"type":"discrete","discreteType":{"guid":"2ba638a6-b807-4480-a388-f1b5637489b2"},"isMultiValued":false,"defaultThresholdType":"isOneOf","name":"Used material type"}
                },
                "Example 104": {
                  "summary": "Discrete attribute - multi-valued",
                  "description": "This example demonstrates how to create a multi-valued discrete attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000), using the 'Material type' discrete type, from the MI_Training database. You can change the attribute back to a single-valued one as long as there is no multi-valued data already existing.",
                  "value": {"type":"discrete","discreteType":{"guid":"2ba638a6-b807-4480-a388-f1b5637489b2"},"isMultiValued":true,"defaultThresholdType":"isOneOf","name":"Appropriate material types"}
                },
                "Example 105": {
                  "summary": "File attribute",
                  "description": "This example demonstrates how to create a new file attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"file","defaultThresholdType":"exists","name":"Details PDF"}
                },
                "Example 106": {
                  "summary": "Hyperlink attribute",
                  "description": "This example demonstrates how to create a new hyperlink attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"hyperlink","defaultThresholdType":"exists","name":"Supplier website"}
                },
                "Example 107": {
                  "summary": "Integer attribute",
                  "description": "This example demonstrates how to create a new integer attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"integer","isUnique":false,"defaultThresholdType":"atLeast","name":"Number of batches"}
                },
                "Example 108": {
                  "summary": "Integer attribute - unique",
                  "description": "This example demonstrates how to create a new integer attribute which is constrained to have unique values for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"integer","isUnique":true,"defaultThresholdType":"atLeast","name":"Batch ID Number"}
                },
                "Example 109": {
                  "summary": "Logical attribute",
                  "description": "This example demonstrates how to create a new logical attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"logical","defaultThresholdType":"equal","name":"Inspected"}
                },
                "Example 110": {
                  "summary": "Long text attribute",
                  "description": "This example demonstrates how to create a new long text attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"longText","defaultThresholdType":"exists","name":"Long Description"}
                },
                "Example 111": {
                  "summary": "Picture attribute",
                  "description": "This example demonstrates how to create a new picture attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"picture","defaultThresholdType":"exists","name":"Photo"}
                },
                "Example 112": {
                  "summary": "Point attribute - simple unitless",
                  "description": "This example demonstrates how to create a new point attribute to represent a unitless single-valued property for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"point","isMultiValued":false,"defaultThresholdType":"atLeast","name":"My Shape factor"}
                },
                "Example 113": {
                  "summary": "Point attribute - simple with unit",
                  "description": "This example demonstrates how to create a new point attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a single-valued property with the unit of 'kg' from the MI_Training database.",
                  "value": {"type":"point","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"},"isMultiValued":false,"defaultThresholdType":"atLeast","name":"Mass"}
                },
                "Example 114": {
                  "summary": "Point attribute - multi-valued with unit",
                  "description": "This example demonstrates how to create a new point attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a multi-valued property with the unit of 'kg' from the MI_Training database. You can later change the attribute back to single-valued as long as there is no multi-valued data already existing.",
                  "value": {"type":"point","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"},"isMultiValued":true,"defaultThresholdType":"atLeast","name":"Observed masses"}
                },
                "Example 115": {
                  "summary": "Point attribute - multi-valued with parameters",
                  "description": "This example demonstrates how to create a new point attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a parameterized multi-valued property. In this case, a unitless property with 'Temperature' parameter from the the MI_Training database",
                  "value": {"type":"point","isMultiValued":true,"parameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"}],"defaultThresholdType":"atLeast","name":"Max ratio"}
                },
                "Example 116": {
                  "summary": "Range attribute - unitless",
                  "description": "This example demonstrates how to create a new range attribute for the 'MaterialUniverse' table (guid = {MiTraining.MaterialUniverseTableGuid}) from the MI_Training database to represent a unitless range value.",
                  "value": {"type":"range","defaultThresholdType":"atLeast","name":"Average permeability"}
                },
                "Example 117": {
                  "summary": "Range attribute - with unit",
                  "description": "This example demonstrates how to create a new range attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a range value with the unit 'K' from the MI_Training database.",
                  "value": {"type":"range","unit":{"guid":"00000002-0013-4fff-8fff-0000ffff0000"},"defaultThresholdType":"atLeast","name":"Boiling point"}
                },
                "Example 118": {
                  "summary": "Short text attribute",
                  "description": "This example demonstrates how to create a new short text attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"shortText","isUnique":false,"defaultThresholdType":"exists","name":"Label"}
                },
                "Example 119": {
                  "summary": "Short text attribute - unique",
                  "description": "This example demonstrates how to create a new short text attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database which is constrained to be unique.",
                  "value": {"type":"shortText","isUnique":true,"defaultThresholdType":"exists","name":"Serial number"}
                },
                "Example 120": {
                  "summary": "Short text meta-attribute",
                  "description": "This example demonstrates how to create a short text meta-attribute for the existing 'EPS Value' attribute in the MaterialUniverse (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) table of the MI_Training database. Any attribute type can be used for meta-attributes.",
                  "value": {"type":"shortText","isUnique":false,"defaultThresholdType":"exists","aboutAttribute":{"guid":"000000b9-0001-4fff-8fff-dd92ffff0000"},"name":"Short Label"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
              },
              "examples": {
                "Example 101": {
                  "summary": "Date-time attribute",
                  "description": "This example demonstrates how to create a new date-time attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"dateTime","defaultThresholdType":"atMost","name":"Delivery date"}
                },
                "Example 102": {
                  "summary": "Date-time attribute with guid",
                  "description": "This example demonstrates how to create a new date-time attribute with a specified guid for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database. The same thing can be done for all attribute types.",
                  "value": {"type":"dateTime","defaultThresholdType":"atMost","name":"Delivery date (guid)","guid":"2c1e1aba-19a2-47fe-8392-6ee2fdc9b72a"}
                },
                "Example 103": {
                  "summary": "Discrete attribute - simple",
                  "description": "This example demonstrates how to create a new discrete attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000), using the 'Material type' discrete type, from the MI_Training database.",
                  "value": {"type":"discrete","discreteType":{"guid":"2ba638a6-b807-4480-a388-f1b5637489b2"},"isMultiValued":false,"defaultThresholdType":"isOneOf","name":"Used material type"}
                },
                "Example 104": {
                  "summary": "Discrete attribute - multi-valued",
                  "description": "This example demonstrates how to create a multi-valued discrete attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000), using the 'Material type' discrete type, from the MI_Training database. You can change the attribute back to a single-valued one as long as there is no multi-valued data already existing.",
                  "value": {"type":"discrete","discreteType":{"guid":"2ba638a6-b807-4480-a388-f1b5637489b2"},"isMultiValued":true,"defaultThresholdType":"isOneOf","name":"Appropriate material types"}
                },
                "Example 105": {
                  "summary": "File attribute",
                  "description": "This example demonstrates how to create a new file attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"file","defaultThresholdType":"exists","name":"Details PDF"}
                },
                "Example 106": {
                  "summary": "Hyperlink attribute",
                  "description": "This example demonstrates how to create a new hyperlink attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"hyperlink","defaultThresholdType":"exists","name":"Supplier website"}
                },
                "Example 107": {
                  "summary": "Integer attribute",
                  "description": "This example demonstrates how to create a new integer attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"integer","isUnique":false,"defaultThresholdType":"atLeast","name":"Number of batches"}
                },
                "Example 108": {
                  "summary": "Integer attribute - unique",
                  "description": "This example demonstrates how to create a new integer attribute which is constrained to have unique values for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"integer","isUnique":true,"defaultThresholdType":"atLeast","name":"Batch ID Number"}
                },
                "Example 109": {
                  "summary": "Logical attribute",
                  "description": "This example demonstrates how to create a new logical attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"logical","defaultThresholdType":"equal","name":"Inspected"}
                },
                "Example 110": {
                  "summary": "Long text attribute",
                  "description": "This example demonstrates how to create a new long text attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"longText","defaultThresholdType":"exists","name":"Long Description"}
                },
                "Example 111": {
                  "summary": "Picture attribute",
                  "description": "This example demonstrates how to create a new picture attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"picture","defaultThresholdType":"exists","name":"Photo"}
                },
                "Example 112": {
                  "summary": "Point attribute - simple unitless",
                  "description": "This example demonstrates how to create a new point attribute to represent a unitless single-valued property for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"point","isMultiValued":false,"defaultThresholdType":"atLeast","name":"My Shape factor"}
                },
                "Example 113": {
                  "summary": "Point attribute - simple with unit",
                  "description": "This example demonstrates how to create a new point attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a single-valued property with the unit of 'kg' from the MI_Training database.",
                  "value": {"type":"point","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"},"isMultiValued":false,"defaultThresholdType":"atLeast","name":"Mass"}
                },
                "Example 114": {
                  "summary": "Point attribute - multi-valued with unit",
                  "description": "This example demonstrates how to create a new point attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a multi-valued property with the unit of 'kg' from the MI_Training database. You can later change the attribute back to single-valued as long as there is no multi-valued data already existing.",
                  "value": {"type":"point","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"},"isMultiValued":true,"defaultThresholdType":"atLeast","name":"Observed masses"}
                },
                "Example 115": {
                  "summary": "Point attribute - multi-valued with parameters",
                  "description": "This example demonstrates how to create a new point attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a parameterized multi-valued property. In this case, a unitless property with 'Temperature' parameter from the the MI_Training database",
                  "value": {"type":"point","isMultiValued":true,"parameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"}],"defaultThresholdType":"atLeast","name":"Max ratio"}
                },
                "Example 116": {
                  "summary": "Range attribute - unitless",
                  "description": "This example demonstrates how to create a new range attribute for the 'MaterialUniverse' table (guid = {MiTraining.MaterialUniverseTableGuid}) from the MI_Training database to represent a unitless range value.",
                  "value": {"type":"range","defaultThresholdType":"atLeast","name":"Average permeability"}
                },
                "Example 117": {
                  "summary": "Range attribute - with unit",
                  "description": "This example demonstrates how to create a new range attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a range value with the unit 'K' from the MI_Training database.",
                  "value": {"type":"range","unit":{"guid":"00000002-0013-4fff-8fff-0000ffff0000"},"defaultThresholdType":"atLeast","name":"Boiling point"}
                },
                "Example 118": {
                  "summary": "Short text attribute",
                  "description": "This example demonstrates how to create a new short text attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"shortText","isUnique":false,"defaultThresholdType":"exists","name":"Label"}
                },
                "Example 119": {
                  "summary": "Short text attribute - unique",
                  "description": "This example demonstrates how to create a new short text attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database which is constrained to be unique.",
                  "value": {"type":"shortText","isUnique":true,"defaultThresholdType":"exists","name":"Serial number"}
                },
                "Example 120": {
                  "summary": "Short text meta-attribute",
                  "description": "This example demonstrates how to create a short text meta-attribute for the existing 'EPS Value' attribute in the MaterialUniverse (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) table of the MI_Training database. Any attribute type can be used for meta-attributes.",
                  "value": {"type":"shortText","isUnique":false,"defaultThresholdType":"exists","aboutAttribute":{"guid":"000000b9-0001-4fff-8fff-dd92ffff0000"},"name":"Short Label"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
              },
              "examples": {
                "Example 101": {
                  "summary": "Date-time attribute",
                  "description": "This example demonstrates how to create a new date-time attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"dateTime","defaultThresholdType":"atMost","name":"Delivery date"}
                },
                "Example 102": {
                  "summary": "Date-time attribute with guid",
                  "description": "This example demonstrates how to create a new date-time attribute with a specified guid for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database. The same thing can be done for all attribute types.",
                  "value": {"type":"dateTime","defaultThresholdType":"atMost","name":"Delivery date (guid)","guid":"2c1e1aba-19a2-47fe-8392-6ee2fdc9b72a"}
                },
                "Example 103": {
                  "summary": "Discrete attribute - simple",
                  "description": "This example demonstrates how to create a new discrete attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000), using the 'Material type' discrete type, from the MI_Training database.",
                  "value": {"type":"discrete","discreteType":{"guid":"2ba638a6-b807-4480-a388-f1b5637489b2"},"isMultiValued":false,"defaultThresholdType":"isOneOf","name":"Used material type"}
                },
                "Example 104": {
                  "summary": "Discrete attribute - multi-valued",
                  "description": "This example demonstrates how to create a multi-valued discrete attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000), using the 'Material type' discrete type, from the MI_Training database. You can change the attribute back to a single-valued one as long as there is no multi-valued data already existing.",
                  "value": {"type":"discrete","discreteType":{"guid":"2ba638a6-b807-4480-a388-f1b5637489b2"},"isMultiValued":true,"defaultThresholdType":"isOneOf","name":"Appropriate material types"}
                },
                "Example 105": {
                  "summary": "File attribute",
                  "description": "This example demonstrates how to create a new file attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"file","defaultThresholdType":"exists","name":"Details PDF"}
                },
                "Example 106": {
                  "summary": "Hyperlink attribute",
                  "description": "This example demonstrates how to create a new hyperlink attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"hyperlink","defaultThresholdType":"exists","name":"Supplier website"}
                },
                "Example 107": {
                  "summary": "Integer attribute",
                  "description": "This example demonstrates how to create a new integer attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"integer","isUnique":false,"defaultThresholdType":"atLeast","name":"Number of batches"}
                },
                "Example 108": {
                  "summary": "Integer attribute - unique",
                  "description": "This example demonstrates how to create a new integer attribute which is constrained to have unique values for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"integer","isUnique":true,"defaultThresholdType":"atLeast","name":"Batch ID Number"}
                },
                "Example 109": {
                  "summary": "Logical attribute",
                  "description": "This example demonstrates how to create a new logical attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"logical","defaultThresholdType":"equal","name":"Inspected"}
                },
                "Example 110": {
                  "summary": "Long text attribute",
                  "description": "This example demonstrates how to create a new long text attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"longText","defaultThresholdType":"exists","name":"Long Description"}
                },
                "Example 111": {
                  "summary": "Picture attribute",
                  "description": "This example demonstrates how to create a new picture attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"picture","defaultThresholdType":"exists","name":"Photo"}
                },
                "Example 112": {
                  "summary": "Point attribute - simple unitless",
                  "description": "This example demonstrates how to create a new point attribute to represent a unitless single-valued property for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"point","isMultiValued":false,"defaultThresholdType":"atLeast","name":"My Shape factor"}
                },
                "Example 113": {
                  "summary": "Point attribute - simple with unit",
                  "description": "This example demonstrates how to create a new point attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a single-valued property with the unit of 'kg' from the MI_Training database.",
                  "value": {"type":"point","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"},"isMultiValued":false,"defaultThresholdType":"atLeast","name":"Mass"}
                },
                "Example 114": {
                  "summary": "Point attribute - multi-valued with unit",
                  "description": "This example demonstrates how to create a new point attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a multi-valued property with the unit of 'kg' from the MI_Training database. You can later change the attribute back to single-valued as long as there is no multi-valued data already existing.",
                  "value": {"type":"point","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"},"isMultiValued":true,"defaultThresholdType":"atLeast","name":"Observed masses"}
                },
                "Example 115": {
                  "summary": "Point attribute - multi-valued with parameters",
                  "description": "This example demonstrates how to create a new point attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a parameterized multi-valued property. In this case, a unitless property with 'Temperature' parameter from the the MI_Training database",
                  "value": {"type":"point","isMultiValued":true,"parameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"}],"defaultThresholdType":"atLeast","name":"Max ratio"}
                },
                "Example 116": {
                  "summary": "Range attribute - unitless",
                  "description": "This example demonstrates how to create a new range attribute for the 'MaterialUniverse' table (guid = {MiTraining.MaterialUniverseTableGuid}) from the MI_Training database to represent a unitless range value.",
                  "value": {"type":"range","defaultThresholdType":"atLeast","name":"Average permeability"}
                },
                "Example 117": {
                  "summary": "Range attribute - with unit",
                  "description": "This example demonstrates how to create a new range attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a range value with the unit 'K' from the MI_Training database.",
                  "value": {"type":"range","unit":{"guid":"00000002-0013-4fff-8fff-0000ffff0000"},"defaultThresholdType":"atLeast","name":"Boiling point"}
                },
                "Example 118": {
                  "summary": "Short text attribute",
                  "description": "This example demonstrates how to create a new short text attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"type":"shortText","isUnique":false,"defaultThresholdType":"exists","name":"Label"}
                },
                "Example 119": {
                  "summary": "Short text attribute - unique",
                  "description": "This example demonstrates how to create a new short text attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database which is constrained to be unique.",
                  "value": {"type":"shortText","isUnique":true,"defaultThresholdType":"exists","name":"Serial number"}
                },
                "Example 120": {
                  "summary": "Short text meta-attribute",
                  "description": "This example demonstrates how to create a short text meta-attribute for the existing 'EPS Value' attribute in the MaterialUniverse (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) table of the MI_Training database. Any attribute type can be used for meta-attributes.",
                  "value": {"type":"shortText","isUnique":false,"defaultThresholdType":"exists","aboutAttribute":{"guid":"000000b9-0001-4fff-8fff-dd92ffff0000"},"name":"Short Label"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/tables/{table-guid}/attributes/{attribute-guid}": {
      "get": {
        "tags": [
          "Schema - Attributes"
        ],
        "summary": "Get attribute in table",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "attribute-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
              "nullable": true
            }
          },
          {
            "name": "X-Ansys-VC-Mode",
            "in": "header",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
                },
                "examples": {
                  "Example 401": {
                    "summary": "Date-time attribute",
                    "description": "This example demonstrates how to create a new date-time attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"dateTime","defaultThresholdType":"atMost","name":"Delivery date"}
                  },
                  "Example 402": {
                    "summary": "Date-time attribute with guid",
                    "description": "This example demonstrates how to create a new date-time attribute with a specified guid for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database. The same thing can be done for all attribute types.",
                    "value": {"type":"dateTime","defaultThresholdType":"atMost","name":"Delivery date (guid)","guid":"b03127cb-67e9-4513-9b8a-3f36acbc6be0"}
                  },
                  "Example 403": {
                    "summary": "Discrete attribute - simple",
                    "description": "This example demonstrates how to create a new discrete attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000), using the 'Material type' discrete type, from the MI_Training database.",
                    "value": {"type":"discrete","discreteType":{"guid":"2ba638a6-b807-4480-a388-f1b5637489b2"},"isMultiValued":false,"defaultThresholdType":"isOneOf","name":"Used material type"}
                  },
                  "Example 404": {
                    "summary": "Discrete attribute - multi-valued",
                    "description": "This example demonstrates how to create a multi-valued discrete attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000), using the 'Material type' discrete type, from the MI_Training database. You can change the attribute back to a single-valued one as long as there is no multi-valued data already existing.",
                    "value": {"type":"discrete","discreteType":{"guid":"2ba638a6-b807-4480-a388-f1b5637489b2"},"isMultiValued":true,"defaultThresholdType":"isOneOf","name":"Appropriate material types"}
                  },
                  "Example 405": {
                    "summary": "File attribute",
                    "description": "This example demonstrates how to create a new file attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"file","defaultThresholdType":"exists","name":"Details PDF"}
                  },
                  "Example 406": {
                    "summary": "Hyperlink attribute",
                    "description": "This example demonstrates how to create a new hyperlink attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"hyperlink","defaultThresholdType":"exists","name":"Supplier website"}
                  },
                  "Example 407": {
                    "summary": "Integer attribute",
                    "description": "This example demonstrates how to create a new integer attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"integer","isUnique":false,"defaultThresholdType":"atLeast","name":"Number of batches"}
                  },
                  "Example 408": {
                    "summary": "Integer attribute - unique",
                    "description": "This example demonstrates how to create a new integer attribute which is constrained to have unique values for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"integer","isUnique":true,"defaultThresholdType":"atLeast","name":"Batch ID Number"}
                  },
                  "Example 409": {
                    "summary": "Logical attribute",
                    "description": "This example demonstrates how to create a new logical attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"logical","defaultThresholdType":"equal","name":"Inspected"}
                  },
                  "Example 410": {
                    "summary": "Long text attribute",
                    "description": "This example demonstrates how to create a new long text attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"longText","defaultThresholdType":"exists","name":"Long Description"}
                  },
                  "Example 411": {
                    "summary": "Picture attribute",
                    "description": "This example demonstrates how to create a new picture attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"picture","defaultThresholdType":"exists","name":"Photo"}
                  },
                  "Example 412": {
                    "summary": "Point attribute - simple unitless",
                    "description": "This example demonstrates how to create a new point attribute to represent a unitless single-valued property for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"point","isMultiValued":false,"defaultThresholdType":"atLeast","name":"My Shape factor"}
                  },
                  "Example 413": {
                    "summary": "Point attribute - simple with unit",
                    "description": "This example demonstrates how to create a new point attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a single-valued property with the unit of 'kg' from the MI_Training database.",
                    "value": {"type":"point","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"},"isMultiValued":false,"defaultThresholdType":"atLeast","name":"Mass"}
                  },
                  "Example 414": {
                    "summary": "Point attribute - multi-valued with unit",
                    "description": "This example demonstrates how to create a new point attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a multi-valued property with the unit of 'kg' from the MI_Training database. You can later change the attribute back to single-valued as long as there is no multi-valued data already existing.",
                    "value": {"type":"point","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"},"isMultiValued":true,"defaultThresholdType":"atLeast","name":"Observed masses"}
                  },
                  "Example 415": {
                    "summary": "Point attribute - multi-valued with parameters",
                    "description": "This example demonstrates how to create a new point attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a parameterized multi-valued property. In this case, a unitless property with 'Temperature' parameter from the the MI_Training database",
                    "value": {"type":"point","isMultiValued":true,"parameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"}],"defaultThresholdType":"atLeast","name":"Max ratio"}
                  },
                  "Example 416": {
                    "summary": "Range attribute - unitless",
                    "description": "This example demonstrates how to create a new range attribute for the 'MaterialUniverse' table (guid = {MiTraining.MaterialUniverseTableGuid}) from the MI_Training database to represent a unitless range value.",
                    "value": {"type":"range","defaultThresholdType":"atLeast","name":"Average permeability"}
                  },
                  "Example 417": {
                    "summary": "Range attribute - with unit",
                    "description": "This example demonstrates how to create a new range attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a range value with the unit 'K' from the MI_Training database.",
                    "value": {"type":"range","unit":{"guid":"00000002-0013-4fff-8fff-0000ffff0000"},"defaultThresholdType":"atLeast","name":"Boiling point"}
                  },
                  "Example 418": {
                    "summary": "Short text attribute",
                    "description": "This example demonstrates how to create a new short text attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"shortText","isUnique":false,"defaultThresholdType":"exists","name":"Label"}
                  },
                  "Example 419": {
                    "summary": "Short text attribute - unique",
                    "description": "This example demonstrates how to create a new short text attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database which is constrained to be unique.",
                    "value": {"type":"shortText","isUnique":true,"defaultThresholdType":"exists","name":"Serial number"}
                  },
                  "Example 420": {
                    "summary": "Short text meta-attribute",
                    "description": "This example demonstrates how to create a short text meta-attribute for the existing 'EPS Value' attribute in the MaterialUniverse (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) table of the MI_Training database. Any attribute type can be used for meta-attributes.",
                    "value": {"type":"shortText","isUnique":false,"defaultThresholdType":"exists","aboutAttribute":{"guid":"000000b9-0001-4fff-8fff-dd92ffff0000"},"name":"Short Label"}
                  }
                }
              }
            }
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Schema - Attributes"
        ],
        "summary": "Update attribute.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "attribute-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
              },
              "examples": {
                "Example 51": {
                  "summary": "Update name",
                  "description": "This example demonstrates how to update the 'Name' property of the 'Metals' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 0000000b-0001-4fff-8fff-dd92ffff0000).",
                  "value": {"type":"discrete","name":"Metals (updated)"}
                },
                "Example 52": {
                  "summary": "Update guid",
                  "description": "This example demonstrates how to update the 'Guid' property of the 'Melting point' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 0000000d-0001-4fff-8fff-dd92ffff0000).",
                  "value": {"type":"discrete","guid":"12345678-0013-4fff-8fff-0000ffff0000"}
                },
                "Example 53": {
                  "summary": "Update default threshold type",
                  "description": "This example demonstrates how to update the default threshold type of the 'Metals' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 0000000b-0001-4fff-8fff-dd92ffff0000).",
                  "value": {"type":"discrete","defaultThresholdType":"equal"}
                },
                "Example 54": {
                  "summary": "Make discrete multi-valued",
                  "description": "This example demonstrates how to update the 'Metals' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 0000000b-0001-4fff-8fff-dd92ffff0000) and make it multi-valued. You can similarly turn a multi-valued discrete attribute into a single-valued as long as there is no multi-valued data already existing.",
                  "value": {"type":"discrete","isMultiValued":true}
                },
                "Example 55": {
                  "summary": "Make short text unique",
                  "description": "This example demonstrates how to update the 'Grain size' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 000000aa-0001-4fff-8fff-dd92ffff0000) and make it unique. This will work as long as there is no pre-existing data which violates the constraint.",
                  "value": {"type":"shortText","isUnique":true}
                },
                "Example 56": {
                  "summary": "Make point multi-valued",
                  "description": "This example demonstrates how to update the 'Shape factor' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 00000144-0001-4fff-8fff-dd92ffff0000) and make it multi-valued. Note that this won't work if the attribute is used in a dynamic link group index, expressions, X-Y charts or as linked attribute tabular column.You can similarly turn a multi-valued point attribute into a single-valued as long as there is no multi-valued data already existing.",
                  "value": {"type":"point","isMultiValued":true}
                },
                "Example 57": {
                  "summary": "Make point multi-valued with parameter",
                  "description": "This example demonstrates how to update the 'Shape factor' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 00000144-0001-4fff-8fff-dd92ffff0000) and make it multi-valued with 'Temperature' as a parameter. Note that this won't work if the attribute is used in a dynamic link group index, expressions, X-Y charts or as linked attribute tabular column.You can similarly turn a multi-valued point attribute into a single-valued as long as there is no multi-valued data already existing.",
                  "value": {"type":"point","isMultiValued":true,"parameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"}]}
                },
                "Example 58": {
                  "summary": "Update unit",
                  "description": "This example demonstrates how to update the unit of the 'Reserves' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 00000088-0001-4fff-8fff-dd92ffff0000). We will change the unit from 'tonnes' to 'kg'",
                  "value": {"type":"range","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"}}
                },
                "Example 59": {
                  "summary": "Update multiple properties",
                  "description": "This example demonstrates that it is possible to change multiple attribute properties at once by updating the name of the 'Grain size' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 000000aa-0001-4fff-8fff-dd92ffff0000) and also making it unique. This will work as long as there is no pre-existing data which violates the constraint.",
                  "value": {"type":"shortText","isUnique":true,"name":"Grain size (updated)"}
                },
                "Example 60": {
                  "summary": "Turn an attribute into a meta-attribute",
                  "description": "This example demonstrates how to turn an existing attribute into a meta-attribute of another attribute. We make the short text 'Color' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 00000169-0001-4fff-8fff-dd92ffff0000) become a meta-attribute of 'ISO name' short text attribute (guid = 000002cf-0001-4fff-8fff-dd92ffff0000).Note that if an attribute already had meta-attribute, it cannot be made a meta-attribute. Also, you cannot add a meta-attribute to another meta-attribute.",
                  "value": {"type":"shortText","aboutAttribute":{"guid":"000002cf-0001-4fff-8fff-dd92ffff0000"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
              },
              "examples": {
                "Example 51": {
                  "summary": "Update name",
                  "description": "This example demonstrates how to update the 'Name' property of the 'Metals' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 0000000b-0001-4fff-8fff-dd92ffff0000).",
                  "value": {"type":"discrete","name":"Metals (updated)"}
                },
                "Example 52": {
                  "summary": "Update guid",
                  "description": "This example demonstrates how to update the 'Guid' property of the 'Melting point' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 0000000d-0001-4fff-8fff-dd92ffff0000).",
                  "value": {"type":"discrete","guid":"12345678-0013-4fff-8fff-0000ffff0000"}
                },
                "Example 53": {
                  "summary": "Update default threshold type",
                  "description": "This example demonstrates how to update the default threshold type of the 'Metals' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 0000000b-0001-4fff-8fff-dd92ffff0000).",
                  "value": {"type":"discrete","defaultThresholdType":"equal"}
                },
                "Example 54": {
                  "summary": "Make discrete multi-valued",
                  "description": "This example demonstrates how to update the 'Metals' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 0000000b-0001-4fff-8fff-dd92ffff0000) and make it multi-valued. You can similarly turn a multi-valued discrete attribute into a single-valued as long as there is no multi-valued data already existing.",
                  "value": {"type":"discrete","isMultiValued":true}
                },
                "Example 55": {
                  "summary": "Make short text unique",
                  "description": "This example demonstrates how to update the 'Grain size' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 000000aa-0001-4fff-8fff-dd92ffff0000) and make it unique. This will work as long as there is no pre-existing data which violates the constraint.",
                  "value": {"type":"shortText","isUnique":true}
                },
                "Example 56": {
                  "summary": "Make point multi-valued",
                  "description": "This example demonstrates how to update the 'Shape factor' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 00000144-0001-4fff-8fff-dd92ffff0000) and make it multi-valued. Note that this won't work if the attribute is used in a dynamic link group index, expressions, X-Y charts or as linked attribute tabular column.You can similarly turn a multi-valued point attribute into a single-valued as long as there is no multi-valued data already existing.",
                  "value": {"type":"point","isMultiValued":true}
                },
                "Example 57": {
                  "summary": "Make point multi-valued with parameter",
                  "description": "This example demonstrates how to update the 'Shape factor' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 00000144-0001-4fff-8fff-dd92ffff0000) and make it multi-valued with 'Temperature' as a parameter. Note that this won't work if the attribute is used in a dynamic link group index, expressions, X-Y charts or as linked attribute tabular column.You can similarly turn a multi-valued point attribute into a single-valued as long as there is no multi-valued data already existing.",
                  "value": {"type":"point","isMultiValued":true,"parameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"}]}
                },
                "Example 58": {
                  "summary": "Update unit",
                  "description": "This example demonstrates how to update the unit of the 'Reserves' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 00000088-0001-4fff-8fff-dd92ffff0000). We will change the unit from 'tonnes' to 'kg'",
                  "value": {"type":"range","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"}}
                },
                "Example 59": {
                  "summary": "Update multiple properties",
                  "description": "This example demonstrates that it is possible to change multiple attribute properties at once by updating the name of the 'Grain size' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 000000aa-0001-4fff-8fff-dd92ffff0000) and also making it unique. This will work as long as there is no pre-existing data which violates the constraint.",
                  "value": {"type":"shortText","isUnique":true,"name":"Grain size (updated)"}
                },
                "Example 60": {
                  "summary": "Turn an attribute into a meta-attribute",
                  "description": "This example demonstrates how to turn an existing attribute into a meta-attribute of another attribute. We make the short text 'Color' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 00000169-0001-4fff-8fff-dd92ffff0000) become a meta-attribute of 'ISO name' short text attribute (guid = 000002cf-0001-4fff-8fff-dd92ffff0000).Note that if an attribute already had meta-attribute, it cannot be made a meta-attribute. Also, you cannot add a meta-attribute to another meta-attribute.",
                  "value": {"type":"shortText","aboutAttribute":{"guid":"000002cf-0001-4fff-8fff-dd92ffff0000"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
              },
              "examples": {
                "Example 51": {
                  "summary": "Update name",
                  "description": "This example demonstrates how to update the 'Name' property of the 'Metals' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 0000000b-0001-4fff-8fff-dd92ffff0000).",
                  "value": {"type":"discrete","name":"Metals (updated)"}
                },
                "Example 52": {
                  "summary": "Update guid",
                  "description": "This example demonstrates how to update the 'Guid' property of the 'Melting point' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 0000000d-0001-4fff-8fff-dd92ffff0000).",
                  "value": {"type":"discrete","guid":"12345678-0013-4fff-8fff-0000ffff0000"}
                },
                "Example 53": {
                  "summary": "Update default threshold type",
                  "description": "This example demonstrates how to update the default threshold type of the 'Metals' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 0000000b-0001-4fff-8fff-dd92ffff0000).",
                  "value": {"type":"discrete","defaultThresholdType":"equal"}
                },
                "Example 54": {
                  "summary": "Make discrete multi-valued",
                  "description": "This example demonstrates how to update the 'Metals' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 0000000b-0001-4fff-8fff-dd92ffff0000) and make it multi-valued. You can similarly turn a multi-valued discrete attribute into a single-valued as long as there is no multi-valued data already existing.",
                  "value": {"type":"discrete","isMultiValued":true}
                },
                "Example 55": {
                  "summary": "Make short text unique",
                  "description": "This example demonstrates how to update the 'Grain size' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 000000aa-0001-4fff-8fff-dd92ffff0000) and make it unique. This will work as long as there is no pre-existing data which violates the constraint.",
                  "value": {"type":"shortText","isUnique":true}
                },
                "Example 56": {
                  "summary": "Make point multi-valued",
                  "description": "This example demonstrates how to update the 'Shape factor' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 00000144-0001-4fff-8fff-dd92ffff0000) and make it multi-valued. Note that this won't work if the attribute is used in a dynamic link group index, expressions, X-Y charts or as linked attribute tabular column.You can similarly turn a multi-valued point attribute into a single-valued as long as there is no multi-valued data already existing.",
                  "value": {"type":"point","isMultiValued":true}
                },
                "Example 57": {
                  "summary": "Make point multi-valued with parameter",
                  "description": "This example demonstrates how to update the 'Shape factor' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 00000144-0001-4fff-8fff-dd92ffff0000) and make it multi-valued with 'Temperature' as a parameter. Note that this won't work if the attribute is used in a dynamic link group index, expressions, X-Y charts or as linked attribute tabular column.You can similarly turn a multi-valued point attribute into a single-valued as long as there is no multi-valued data already existing.",
                  "value": {"type":"point","isMultiValued":true,"parameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"}]}
                },
                "Example 58": {
                  "summary": "Update unit",
                  "description": "This example demonstrates how to update the unit of the 'Reserves' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 00000088-0001-4fff-8fff-dd92ffff0000). We will change the unit from 'tonnes' to 'kg'",
                  "value": {"type":"range","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"}}
                },
                "Example 59": {
                  "summary": "Update multiple properties",
                  "description": "This example demonstrates that it is possible to change multiple attribute properties at once by updating the name of the 'Grain size' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 000000aa-0001-4fff-8fff-dd92ffff0000) and also making it unique. This will work as long as there is no pre-existing data which violates the constraint.",
                  "value": {"type":"shortText","isUnique":true,"name":"Grain size (updated)"}
                },
                "Example 60": {
                  "summary": "Turn an attribute into a meta-attribute",
                  "description": "This example demonstrates how to turn an existing attribute into a meta-attribute of another attribute. We make the short text 'Color' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 00000169-0001-4fff-8fff-dd92ffff0000) become a meta-attribute of 'ISO name' short text attribute (guid = 000002cf-0001-4fff-8fff-dd92ffff0000).Note that if an attribute already had meta-attribute, it cannot be made a meta-attribute. Also, you cannot add a meta-attribute to another meta-attribute.",
                  "value": {"type":"shortText","aboutAttribute":{"guid":"000002cf-0001-4fff-8fff-dd92ffff0000"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
              },
              "examples": {
                "Example 51": {
                  "summary": "Update name",
                  "description": "This example demonstrates how to update the 'Name' property of the 'Metals' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 0000000b-0001-4fff-8fff-dd92ffff0000).",
                  "value": {"type":"discrete","name":"Metals (updated)"}
                },
                "Example 52": {
                  "summary": "Update guid",
                  "description": "This example demonstrates how to update the 'Guid' property of the 'Melting point' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 0000000d-0001-4fff-8fff-dd92ffff0000).",
                  "value": {"type":"discrete","guid":"12345678-0013-4fff-8fff-0000ffff0000"}
                },
                "Example 53": {
                  "summary": "Update default threshold type",
                  "description": "This example demonstrates how to update the default threshold type of the 'Metals' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 0000000b-0001-4fff-8fff-dd92ffff0000).",
                  "value": {"type":"discrete","defaultThresholdType":"equal"}
                },
                "Example 54": {
                  "summary": "Make discrete multi-valued",
                  "description": "This example demonstrates how to update the 'Metals' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 0000000b-0001-4fff-8fff-dd92ffff0000) and make it multi-valued. You can similarly turn a multi-valued discrete attribute into a single-valued as long as there is no multi-valued data already existing.",
                  "value": {"type":"discrete","isMultiValued":true}
                },
                "Example 55": {
                  "summary": "Make short text unique",
                  "description": "This example demonstrates how to update the 'Grain size' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 000000aa-0001-4fff-8fff-dd92ffff0000) and make it unique. This will work as long as there is no pre-existing data which violates the constraint.",
                  "value": {"type":"shortText","isUnique":true}
                },
                "Example 56": {
                  "summary": "Make point multi-valued",
                  "description": "This example demonstrates how to update the 'Shape factor' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 00000144-0001-4fff-8fff-dd92ffff0000) and make it multi-valued. Note that this won't work if the attribute is used in a dynamic link group index, expressions, X-Y charts or as linked attribute tabular column.You can similarly turn a multi-valued point attribute into a single-valued as long as there is no multi-valued data already existing.",
                  "value": {"type":"point","isMultiValued":true}
                },
                "Example 57": {
                  "summary": "Make point multi-valued with parameter",
                  "description": "This example demonstrates how to update the 'Shape factor' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 00000144-0001-4fff-8fff-dd92ffff0000) and make it multi-valued with 'Temperature' as a parameter. Note that this won't work if the attribute is used in a dynamic link group index, expressions, X-Y charts or as linked attribute tabular column.You can similarly turn a multi-valued point attribute into a single-valued as long as there is no multi-valued data already existing.",
                  "value": {"type":"point","isMultiValued":true,"parameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"}]}
                },
                "Example 58": {
                  "summary": "Update unit",
                  "description": "This example demonstrates how to update the unit of the 'Reserves' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 00000088-0001-4fff-8fff-dd92ffff0000). We will change the unit from 'tonnes' to 'kg'",
                  "value": {"type":"range","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"}}
                },
                "Example 59": {
                  "summary": "Update multiple properties",
                  "description": "This example demonstrates that it is possible to change multiple attribute properties at once by updating the name of the 'Grain size' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 000000aa-0001-4fff-8fff-dd92ffff0000) and also making it unique. This will work as long as there is no pre-existing data which violates the constraint.",
                  "value": {"type":"shortText","isUnique":true,"name":"Grain size (updated)"}
                },
                "Example 60": {
                  "summary": "Turn an attribute into a meta-attribute",
                  "description": "This example demonstrates how to turn an existing attribute into a meta-attribute of another attribute. We make the short text 'Color' attribute from the 'MaterialUniverse' table from the MI_Training database (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; attributeGuid = 00000169-0001-4fff-8fff-dd92ffff0000) become a meta-attribute of 'ISO name' short text attribute (guid = 000002cf-0001-4fff-8fff-dd92ffff0000).Note that if an attribute already had meta-attribute, it cannot be made a meta-attribute. Also, you cannot add a meta-attribute to another meta-attribute.",
                  "value": {"type":"shortText","aboutAttribute":{"guid":"000002cf-0001-4fff-8fff-dd92ffff0000"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
                },
                "examples": {
                  "Example 421": {
                    "summary": "Date-time attribute",
                    "description": "This example demonstrates how to create a new date-time attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"dateTime","defaultThresholdType":"atMost","name":"Delivery date"}
                  },
                  "Example 422": {
                    "summary": "Date-time attribute with guid",
                    "description": "This example demonstrates how to create a new date-time attribute with a specified guid for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database. The same thing can be done for all attribute types.",
                    "value": {"type":"dateTime","defaultThresholdType":"atMost","name":"Delivery date (guid)","guid":"8091c7bd-f877-4472-b989-2d2877a19814"}
                  },
                  "Example 423": {
                    "summary": "Discrete attribute - simple",
                    "description": "This example demonstrates how to create a new discrete attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000), using the 'Material type' discrete type, from the MI_Training database.",
                    "value": {"type":"discrete","discreteType":{"guid":"2ba638a6-b807-4480-a388-f1b5637489b2"},"isMultiValued":false,"defaultThresholdType":"isOneOf","name":"Used material type"}
                  },
                  "Example 424": {
                    "summary": "Discrete attribute - multi-valued",
                    "description": "This example demonstrates how to create a multi-valued discrete attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000), using the 'Material type' discrete type, from the MI_Training database. You can change the attribute back to a single-valued one as long as there is no multi-valued data already existing.",
                    "value": {"type":"discrete","discreteType":{"guid":"2ba638a6-b807-4480-a388-f1b5637489b2"},"isMultiValued":true,"defaultThresholdType":"isOneOf","name":"Appropriate material types"}
                  },
                  "Example 425": {
                    "summary": "File attribute",
                    "description": "This example demonstrates how to create a new file attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"file","defaultThresholdType":"exists","name":"Details PDF"}
                  },
                  "Example 426": {
                    "summary": "Hyperlink attribute",
                    "description": "This example demonstrates how to create a new hyperlink attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"hyperlink","defaultThresholdType":"exists","name":"Supplier website"}
                  },
                  "Example 427": {
                    "summary": "Integer attribute",
                    "description": "This example demonstrates how to create a new integer attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"integer","isUnique":false,"defaultThresholdType":"atLeast","name":"Number of batches"}
                  },
                  "Example 428": {
                    "summary": "Integer attribute - unique",
                    "description": "This example demonstrates how to create a new integer attribute which is constrained to have unique values for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"integer","isUnique":true,"defaultThresholdType":"atLeast","name":"Batch ID Number"}
                  },
                  "Example 429": {
                    "summary": "Logical attribute",
                    "description": "This example demonstrates how to create a new logical attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"logical","defaultThresholdType":"equal","name":"Inspected"}
                  },
                  "Example 430": {
                    "summary": "Long text attribute",
                    "description": "This example demonstrates how to create a new long text attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"longText","defaultThresholdType":"exists","name":"Long Description"}
                  },
                  "Example 431": {
                    "summary": "Picture attribute",
                    "description": "This example demonstrates how to create a new picture attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"picture","defaultThresholdType":"exists","name":"Photo"}
                  },
                  "Example 432": {
                    "summary": "Point attribute - simple unitless",
                    "description": "This example demonstrates how to create a new point attribute to represent a unitless single-valued property for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"point","isMultiValued":false,"defaultThresholdType":"atLeast","name":"My Shape factor"}
                  },
                  "Example 433": {
                    "summary": "Point attribute - simple with unit",
                    "description": "This example demonstrates how to create a new point attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a single-valued property with the unit of 'kg' from the MI_Training database.",
                    "value": {"type":"point","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"},"isMultiValued":false,"defaultThresholdType":"atLeast","name":"Mass"}
                  },
                  "Example 434": {
                    "summary": "Point attribute - multi-valued with unit",
                    "description": "This example demonstrates how to create a new point attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a multi-valued property with the unit of 'kg' from the MI_Training database. You can later change the attribute back to single-valued as long as there is no multi-valued data already existing.",
                    "value": {"type":"point","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"},"isMultiValued":true,"defaultThresholdType":"atLeast","name":"Observed masses"}
                  },
                  "Example 435": {
                    "summary": "Point attribute - multi-valued with parameters",
                    "description": "This example demonstrates how to create a new point attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a parameterized multi-valued property. In this case, a unitless property with 'Temperature' parameter from the the MI_Training database",
                    "value": {"type":"point","isMultiValued":true,"parameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"}],"defaultThresholdType":"atLeast","name":"Max ratio"}
                  },
                  "Example 436": {
                    "summary": "Range attribute - unitless",
                    "description": "This example demonstrates how to create a new range attribute for the 'MaterialUniverse' table (guid = {MiTraining.MaterialUniverseTableGuid}) from the MI_Training database to represent a unitless range value.",
                    "value": {"type":"range","defaultThresholdType":"atLeast","name":"Average permeability"}
                  },
                  "Example 437": {
                    "summary": "Range attribute - with unit",
                    "description": "This example demonstrates how to create a new range attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a range value with the unit 'K' from the MI_Training database.",
                    "value": {"type":"range","unit":{"guid":"00000002-0013-4fff-8fff-0000ffff0000"},"defaultThresholdType":"atLeast","name":"Boiling point"}
                  },
                  "Example 438": {
                    "summary": "Short text attribute",
                    "description": "This example demonstrates how to create a new short text attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"shortText","isUnique":false,"defaultThresholdType":"exists","name":"Label"}
                  },
                  "Example 439": {
                    "summary": "Short text attribute - unique",
                    "description": "This example demonstrates how to create a new short text attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database which is constrained to be unique.",
                    "value": {"type":"shortText","isUnique":true,"defaultThresholdType":"exists","name":"Serial number"}
                  },
                  "Example 440": {
                    "summary": "Short text meta-attribute",
                    "description": "This example demonstrates how to create a short text meta-attribute for the existing 'EPS Value' attribute in the MaterialUniverse (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) table of the MI_Training database. Any attribute type can be used for meta-attributes.",
                    "value": {"type":"shortText","isUnique":false,"defaultThresholdType":"exists","aboutAttribute":{"guid":"000000b9-0001-4fff-8fff-dd92ffff0000"},"name":"Short Label"}
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Schema - Attributes"
        ],
        "summary": "Delete an attribute.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "attribute-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request. Attribute in use.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiExceptionsAttributeDeletionException"
                },
                "example": {"message":"Cannot delete attribute 'Tensile strength'.","code":400,"errors":[{"message":"It is being used in version controlled data.","reason":"InUse","referencedByType":"VersionControlledData"},{"message":"It is being used in one or more expressions.","reason":"InUse","referencedByType":"Expression","referencedBy":[{"name":"Fatigue Model","guid":"535074aa-216f-4f60-b13e-f5e8be72d05f"}]}]}
              }
            }
          },
          "200": {
            "description": "Ok"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Attribute not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/tables/{table-guid}/meta-attributes": {
      "get": {
        "tags": [
          "Schema - Attributes"
        ],
        "summary": "Get all meta-attributes in table",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
              "nullable": true
            }
          },
          {
            "name": "X-Ansys-VC-Mode",
            "in": "header",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Database not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/tables/{table-guid}/meta-attributes/{meta-attribute-guid}": {
      "get": {
        "tags": [
          "Schema - Attributes"
        ],
        "summary": "Get meta-attribute in table",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "meta-attribute-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
              "nullable": true
            }
          },
          {
            "name": "X-Ansys-VC-Mode",
            "in": "header",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
                },
                "examples": {
                  "Example 441": {
                    "summary": "Date-time attribute",
                    "description": "This example demonstrates how to create a new date-time attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"dateTime","defaultThresholdType":"atMost","name":"Delivery date"}
                  },
                  "Example 442": {
                    "summary": "Date-time attribute with guid",
                    "description": "This example demonstrates how to create a new date-time attribute with a specified guid for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database. The same thing can be done for all attribute types.",
                    "value": {"type":"dateTime","defaultThresholdType":"atMost","name":"Delivery date (guid)","guid":"16de7216-5021-4207-be0e-8be16d6faaf7"}
                  },
                  "Example 443": {
                    "summary": "Discrete attribute - simple",
                    "description": "This example demonstrates how to create a new discrete attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000), using the 'Material type' discrete type, from the MI_Training database.",
                    "value": {"type":"discrete","discreteType":{"guid":"2ba638a6-b807-4480-a388-f1b5637489b2"},"isMultiValued":false,"defaultThresholdType":"isOneOf","name":"Used material type"}
                  },
                  "Example 444": {
                    "summary": "Discrete attribute - multi-valued",
                    "description": "This example demonstrates how to create a multi-valued discrete attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000), using the 'Material type' discrete type, from the MI_Training database. You can change the attribute back to a single-valued one as long as there is no multi-valued data already existing.",
                    "value": {"type":"discrete","discreteType":{"guid":"2ba638a6-b807-4480-a388-f1b5637489b2"},"isMultiValued":true,"defaultThresholdType":"isOneOf","name":"Appropriate material types"}
                  },
                  "Example 445": {
                    "summary": "File attribute",
                    "description": "This example demonstrates how to create a new file attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"file","defaultThresholdType":"exists","name":"Details PDF"}
                  },
                  "Example 446": {
                    "summary": "Hyperlink attribute",
                    "description": "This example demonstrates how to create a new hyperlink attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"hyperlink","defaultThresholdType":"exists","name":"Supplier website"}
                  },
                  "Example 447": {
                    "summary": "Integer attribute",
                    "description": "This example demonstrates how to create a new integer attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"integer","isUnique":false,"defaultThresholdType":"atLeast","name":"Number of batches"}
                  },
                  "Example 448": {
                    "summary": "Integer attribute - unique",
                    "description": "This example demonstrates how to create a new integer attribute which is constrained to have unique values for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"integer","isUnique":true,"defaultThresholdType":"atLeast","name":"Batch ID Number"}
                  },
                  "Example 449": {
                    "summary": "Logical attribute",
                    "description": "This example demonstrates how to create a new logical attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"logical","defaultThresholdType":"equal","name":"Inspected"}
                  },
                  "Example 450": {
                    "summary": "Long text attribute",
                    "description": "This example demonstrates how to create a new long text attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"longText","defaultThresholdType":"exists","name":"Long Description"}
                  },
                  "Example 451": {
                    "summary": "Picture attribute",
                    "description": "This example demonstrates how to create a new picture attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"picture","defaultThresholdType":"exists","name":"Photo"}
                  },
                  "Example 452": {
                    "summary": "Point attribute - simple unitless",
                    "description": "This example demonstrates how to create a new point attribute to represent a unitless single-valued property for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"point","isMultiValued":false,"defaultThresholdType":"atLeast","name":"My Shape factor"}
                  },
                  "Example 453": {
                    "summary": "Point attribute - simple with unit",
                    "description": "This example demonstrates how to create a new point attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a single-valued property with the unit of 'kg' from the MI_Training database.",
                    "value": {"type":"point","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"},"isMultiValued":false,"defaultThresholdType":"atLeast","name":"Mass"}
                  },
                  "Example 454": {
                    "summary": "Point attribute - multi-valued with unit",
                    "description": "This example demonstrates how to create a new point attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a multi-valued property with the unit of 'kg' from the MI_Training database. You can later change the attribute back to single-valued as long as there is no multi-valued data already existing.",
                    "value": {"type":"point","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"},"isMultiValued":true,"defaultThresholdType":"atLeast","name":"Observed masses"}
                  },
                  "Example 455": {
                    "summary": "Point attribute - multi-valued with parameters",
                    "description": "This example demonstrates how to create a new point attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a parameterized multi-valued property. In this case, a unitless property with 'Temperature' parameter from the the MI_Training database",
                    "value": {"type":"point","isMultiValued":true,"parameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"}],"defaultThresholdType":"atLeast","name":"Max ratio"}
                  },
                  "Example 456": {
                    "summary": "Range attribute - unitless",
                    "description": "This example demonstrates how to create a new range attribute for the 'MaterialUniverse' table (guid = {MiTraining.MaterialUniverseTableGuid}) from the MI_Training database to represent a unitless range value.",
                    "value": {"type":"range","defaultThresholdType":"atLeast","name":"Average permeability"}
                  },
                  "Example 457": {
                    "summary": "Range attribute - with unit",
                    "description": "This example demonstrates how to create a new range attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a range value with the unit 'K' from the MI_Training database.",
                    "value": {"type":"range","unit":{"guid":"00000002-0013-4fff-8fff-0000ffff0000"},"defaultThresholdType":"atLeast","name":"Boiling point"}
                  },
                  "Example 458": {
                    "summary": "Short text attribute",
                    "description": "This example demonstrates how to create a new short text attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"shortText","isUnique":false,"defaultThresholdType":"exists","name":"Label"}
                  },
                  "Example 459": {
                    "summary": "Short text attribute - unique",
                    "description": "This example demonstrates how to create a new short text attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database which is constrained to be unique.",
                    "value": {"type":"shortText","isUnique":true,"defaultThresholdType":"exists","name":"Serial number"}
                  },
                  "Example 460": {
                    "summary": "Short text meta-attribute",
                    "description": "This example demonstrates how to create a short text meta-attribute for the existing 'EPS Value' attribute in the MaterialUniverse (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) table of the MI_Training database. Any attribute type can be used for meta-attributes.",
                    "value": {"type":"shortText","isUnique":false,"defaultThresholdType":"exists","aboutAttribute":{"guid":"000000b9-0001-4fff-8fff-dd92ffff0000"},"name":"Short Label"}
                  }
                }
              }
            }
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Schema - Attributes"
        ],
        "summary": "Update meta-attribute.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "meta-attribute-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
              },
              "examples": {
                "Example 21": {
                  "summary": "Update name",
                  "description": "This example demonstrates how to update the 'Name' property of the 'Notes' meta-attribute of the 'Flammability' attribute in the 'MaterialUniverse' table in the MI_Training database(tableGuid: 0000dd92-0011-4fff-8fff-0000ffff0000; metaAttributeGuid: 00000298-0001-4fff-8fff-dd92ffff0000)",
                  "value": {"type":"longText","name":"Notes (flammability)"}
                },
                "Example 22": {
                  "summary": "Update guid",
                  "description": "This example demonstrates how to update the 'Guid' property of the 'Notes' meta-attribute of the 'Flammability' attribute in the 'MaterialUniverse' table in the MI_Training database(tableGuid: 0000dd92-0011-4fff-8fff-0000ffff0000; metaAttributeGuid: 00000298-0001-4fff-8fff-dd92ffff0000)",
                  "value": {"type":"longText","guid":"12345678-1234-4fff-8fff-0000ffff0000"}
                },
                "Example 23": {
                  "summary": "Update default threshold type",
                  "description": "This example demonstrates how to update the default threshold type of the 'Notes' meta-attribute of the 'Flammability' attribute in the 'MaterialUniverse' table in the MI_Training database(tableGuid: 0000dd92-0011-4fff-8fff-0000ffff0000; metaAttributeGuid: 00000298-0001-4fff-8fff-dd92ffff0000)",
                  "value": {"type":"longText","defaultThresholdType":"equal"}
                },
                "Example 24": {
                  "summary": "Turn a meta-attribute into an attribute",
                  "description": "This example demonstrates how to turn an existing meta-attribute into an attribute by removing its 'aboutAttribute'. We make the short text 'Notes' meta-attribute of the 'Flammability' attribute from the 'MaterialUniverse' table (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; metaAttributeGuid = 00000298-0001-4fff-8fff-dd92ffff0000) become a standalone attribute.",
                  "value": {"type":"longText","aboutAttribute":null}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
              },
              "examples": {
                "Example 21": {
                  "summary": "Update name",
                  "description": "This example demonstrates how to update the 'Name' property of the 'Notes' meta-attribute of the 'Flammability' attribute in the 'MaterialUniverse' table in the MI_Training database(tableGuid: 0000dd92-0011-4fff-8fff-0000ffff0000; metaAttributeGuid: 00000298-0001-4fff-8fff-dd92ffff0000)",
                  "value": {"type":"longText","name":"Notes (flammability)"}
                },
                "Example 22": {
                  "summary": "Update guid",
                  "description": "This example demonstrates how to update the 'Guid' property of the 'Notes' meta-attribute of the 'Flammability' attribute in the 'MaterialUniverse' table in the MI_Training database(tableGuid: 0000dd92-0011-4fff-8fff-0000ffff0000; metaAttributeGuid: 00000298-0001-4fff-8fff-dd92ffff0000)",
                  "value": {"type":"longText","guid":"12345678-1234-4fff-8fff-0000ffff0000"}
                },
                "Example 23": {
                  "summary": "Update default threshold type",
                  "description": "This example demonstrates how to update the default threshold type of the 'Notes' meta-attribute of the 'Flammability' attribute in the 'MaterialUniverse' table in the MI_Training database(tableGuid: 0000dd92-0011-4fff-8fff-0000ffff0000; metaAttributeGuid: 00000298-0001-4fff-8fff-dd92ffff0000)",
                  "value": {"type":"longText","defaultThresholdType":"equal"}
                },
                "Example 24": {
                  "summary": "Turn a meta-attribute into an attribute",
                  "description": "This example demonstrates how to turn an existing meta-attribute into an attribute by removing its 'aboutAttribute'. We make the short text 'Notes' meta-attribute of the 'Flammability' attribute from the 'MaterialUniverse' table (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; metaAttributeGuid = 00000298-0001-4fff-8fff-dd92ffff0000) become a standalone attribute.",
                  "value": {"type":"longText","aboutAttribute":null}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
              },
              "examples": {
                "Example 21": {
                  "summary": "Update name",
                  "description": "This example demonstrates how to update the 'Name' property of the 'Notes' meta-attribute of the 'Flammability' attribute in the 'MaterialUniverse' table in the MI_Training database(tableGuid: 0000dd92-0011-4fff-8fff-0000ffff0000; metaAttributeGuid: 00000298-0001-4fff-8fff-dd92ffff0000)",
                  "value": {"type":"longText","name":"Notes (flammability)"}
                },
                "Example 22": {
                  "summary": "Update guid",
                  "description": "This example demonstrates how to update the 'Guid' property of the 'Notes' meta-attribute of the 'Flammability' attribute in the 'MaterialUniverse' table in the MI_Training database(tableGuid: 0000dd92-0011-4fff-8fff-0000ffff0000; metaAttributeGuid: 00000298-0001-4fff-8fff-dd92ffff0000)",
                  "value": {"type":"longText","guid":"12345678-1234-4fff-8fff-0000ffff0000"}
                },
                "Example 23": {
                  "summary": "Update default threshold type",
                  "description": "This example demonstrates how to update the default threshold type of the 'Notes' meta-attribute of the 'Flammability' attribute in the 'MaterialUniverse' table in the MI_Training database(tableGuid: 0000dd92-0011-4fff-8fff-0000ffff0000; metaAttributeGuid: 00000298-0001-4fff-8fff-dd92ffff0000)",
                  "value": {"type":"longText","defaultThresholdType":"equal"}
                },
                "Example 24": {
                  "summary": "Turn a meta-attribute into an attribute",
                  "description": "This example demonstrates how to turn an existing meta-attribute into an attribute by removing its 'aboutAttribute'. We make the short text 'Notes' meta-attribute of the 'Flammability' attribute from the 'MaterialUniverse' table (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; metaAttributeGuid = 00000298-0001-4fff-8fff-dd92ffff0000) become a standalone attribute.",
                  "value": {"type":"longText","aboutAttribute":null}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
              },
              "examples": {
                "Example 21": {
                  "summary": "Update name",
                  "description": "This example demonstrates how to update the 'Name' property of the 'Notes' meta-attribute of the 'Flammability' attribute in the 'MaterialUniverse' table in the MI_Training database(tableGuid: 0000dd92-0011-4fff-8fff-0000ffff0000; metaAttributeGuid: 00000298-0001-4fff-8fff-dd92ffff0000)",
                  "value": {"type":"longText","name":"Notes (flammability)"}
                },
                "Example 22": {
                  "summary": "Update guid",
                  "description": "This example demonstrates how to update the 'Guid' property of the 'Notes' meta-attribute of the 'Flammability' attribute in the 'MaterialUniverse' table in the MI_Training database(tableGuid: 0000dd92-0011-4fff-8fff-0000ffff0000; metaAttributeGuid: 00000298-0001-4fff-8fff-dd92ffff0000)",
                  "value": {"type":"longText","guid":"12345678-1234-4fff-8fff-0000ffff0000"}
                },
                "Example 23": {
                  "summary": "Update default threshold type",
                  "description": "This example demonstrates how to update the default threshold type of the 'Notes' meta-attribute of the 'Flammability' attribute in the 'MaterialUniverse' table in the MI_Training database(tableGuid: 0000dd92-0011-4fff-8fff-0000ffff0000; metaAttributeGuid: 00000298-0001-4fff-8fff-dd92ffff0000)",
                  "value": {"type":"longText","defaultThresholdType":"equal"}
                },
                "Example 24": {
                  "summary": "Turn a meta-attribute into an attribute",
                  "description": "This example demonstrates how to turn an existing meta-attribute into an attribute by removing its 'aboutAttribute'. We make the short text 'Notes' meta-attribute of the 'Flammability' attribute from the 'MaterialUniverse' table (tableGuid = 0000dd92-0011-4fff-8fff-0000ffff0000; metaAttributeGuid = 00000298-0001-4fff-8fff-dd92ffff0000) become a standalone attribute.",
                  "value": {"type":"longText","aboutAttribute":null}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
                },
                "examples": {
                  "Example 461": {
                    "summary": "Date-time attribute",
                    "description": "This example demonstrates how to create a new date-time attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"dateTime","defaultThresholdType":"atMost","name":"Delivery date"}
                  },
                  "Example 462": {
                    "summary": "Date-time attribute with guid",
                    "description": "This example demonstrates how to create a new date-time attribute with a specified guid for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database. The same thing can be done for all attribute types.",
                    "value": {"type":"dateTime","defaultThresholdType":"atMost","name":"Delivery date (guid)","guid":"fef6c956-4405-4f68-8483-6d7c0dcdf18f"}
                  },
                  "Example 463": {
                    "summary": "Discrete attribute - simple",
                    "description": "This example demonstrates how to create a new discrete attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000), using the 'Material type' discrete type, from the MI_Training database.",
                    "value": {"type":"discrete","discreteType":{"guid":"2ba638a6-b807-4480-a388-f1b5637489b2"},"isMultiValued":false,"defaultThresholdType":"isOneOf","name":"Used material type"}
                  },
                  "Example 464": {
                    "summary": "Discrete attribute - multi-valued",
                    "description": "This example demonstrates how to create a multi-valued discrete attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000), using the 'Material type' discrete type, from the MI_Training database. You can change the attribute back to a single-valued one as long as there is no multi-valued data already existing.",
                    "value": {"type":"discrete","discreteType":{"guid":"2ba638a6-b807-4480-a388-f1b5637489b2"},"isMultiValued":true,"defaultThresholdType":"isOneOf","name":"Appropriate material types"}
                  },
                  "Example 465": {
                    "summary": "File attribute",
                    "description": "This example demonstrates how to create a new file attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"file","defaultThresholdType":"exists","name":"Details PDF"}
                  },
                  "Example 466": {
                    "summary": "Hyperlink attribute",
                    "description": "This example demonstrates how to create a new hyperlink attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"hyperlink","defaultThresholdType":"exists","name":"Supplier website"}
                  },
                  "Example 467": {
                    "summary": "Integer attribute",
                    "description": "This example demonstrates how to create a new integer attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"integer","isUnique":false,"defaultThresholdType":"atLeast","name":"Number of batches"}
                  },
                  "Example 468": {
                    "summary": "Integer attribute - unique",
                    "description": "This example demonstrates how to create a new integer attribute which is constrained to have unique values for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"integer","isUnique":true,"defaultThresholdType":"atLeast","name":"Batch ID Number"}
                  },
                  "Example 469": {
                    "summary": "Logical attribute",
                    "description": "This example demonstrates how to create a new logical attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"logical","defaultThresholdType":"equal","name":"Inspected"}
                  },
                  "Example 470": {
                    "summary": "Long text attribute",
                    "description": "This example demonstrates how to create a new long text attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"longText","defaultThresholdType":"exists","name":"Long Description"}
                  },
                  "Example 471": {
                    "summary": "Picture attribute",
                    "description": "This example demonstrates how to create a new picture attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"picture","defaultThresholdType":"exists","name":"Photo"}
                  },
                  "Example 472": {
                    "summary": "Point attribute - simple unitless",
                    "description": "This example demonstrates how to create a new point attribute to represent a unitless single-valued property for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"point","isMultiValued":false,"defaultThresholdType":"atLeast","name":"My Shape factor"}
                  },
                  "Example 473": {
                    "summary": "Point attribute - simple with unit",
                    "description": "This example demonstrates how to create a new point attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a single-valued property with the unit of 'kg' from the MI_Training database.",
                    "value": {"type":"point","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"},"isMultiValued":false,"defaultThresholdType":"atLeast","name":"Mass"}
                  },
                  "Example 474": {
                    "summary": "Point attribute - multi-valued with unit",
                    "description": "This example demonstrates how to create a new point attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a multi-valued property with the unit of 'kg' from the MI_Training database. You can later change the attribute back to single-valued as long as there is no multi-valued data already existing.",
                    "value": {"type":"point","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"},"isMultiValued":true,"defaultThresholdType":"atLeast","name":"Observed masses"}
                  },
                  "Example 475": {
                    "summary": "Point attribute - multi-valued with parameters",
                    "description": "This example demonstrates how to create a new point attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a parameterized multi-valued property. In this case, a unitless property with 'Temperature' parameter from the the MI_Training database",
                    "value": {"type":"point","isMultiValued":true,"parameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"}],"defaultThresholdType":"atLeast","name":"Max ratio"}
                  },
                  "Example 476": {
                    "summary": "Range attribute - unitless",
                    "description": "This example demonstrates how to create a new range attribute for the 'MaterialUniverse' table (guid = {MiTraining.MaterialUniverseTableGuid}) from the MI_Training database to represent a unitless range value.",
                    "value": {"type":"range","defaultThresholdType":"atLeast","name":"Average permeability"}
                  },
                  "Example 477": {
                    "summary": "Range attribute - with unit",
                    "description": "This example demonstrates how to create a new range attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) to represent a range value with the unit 'K' from the MI_Training database.",
                    "value": {"type":"range","unit":{"guid":"00000002-0013-4fff-8fff-0000ffff0000"},"defaultThresholdType":"atLeast","name":"Boiling point"}
                  },
                  "Example 478": {
                    "summary": "Short text attribute",
                    "description": "This example demonstrates how to create a new short text attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"type":"shortText","isUnique":false,"defaultThresholdType":"exists","name":"Label"}
                  },
                  "Example 479": {
                    "summary": "Short text attribute - unique",
                    "description": "This example demonstrates how to create a new short text attribute for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database which is constrained to be unique.",
                    "value": {"type":"shortText","isUnique":true,"defaultThresholdType":"exists","name":"Serial number"}
                  },
                  "Example 480": {
                    "summary": "Short text meta-attribute",
                    "description": "This example demonstrates how to create a short text meta-attribute for the existing 'EPS Value' attribute in the MaterialUniverse (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) table of the MI_Training database. Any attribute type can be used for meta-attributes.",
                    "value": {"type":"shortText","isUnique":false,"defaultThresholdType":"exists","aboutAttribute":{"guid":"000000b9-0001-4fff-8fff-dd92ffff0000"},"name":"Short Label"}
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Schema - Attributes"
        ],
        "summary": "Delete a meta-attribute.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "meta-attribute-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiExceptionsAttributeDeletionException"
                },
                "example": {"message":"Cannot delete attribute 'Notes'.","code":400,"errors":[{"message":"It is being used in version controlled data.","reason":"InUse","referencedByType":"VersionControlledData"},{"message":"It is being used in one or more search masks.","reason":"InUse","referencedByType":"SearchMask","referencedBy":[{"name":"Search mask that searches in Notes","guid":"9f0d122d-effc-4ccd-8449-c548752408da"}]}]}
              }
            }
          },
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Attribute not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/tables/{table-guid}/attributes/{attribute-guid}/meta-attributes": {
      "get": {
        "tags": [
          "Schema - Attributes"
        ],
        "summary": "Get meta-attributes for attribute",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            }
          },
          {
            "name": "attribute-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
              "nullable": true
            }
          },
          {
            "name": "X-Ansys-VC-Mode",
            "in": "header",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Database not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/constants": {
      "get": {
        "tags": [
          "Schema - Constants"
        ],
        "summary": "Get all constants",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimConstant"
                  }
                },
                "example": [{"name":"PI","guid":"00000001-0004-4fff-8fff-0000ffff0000"},{"name":"Speed of Light in Vacuum","guid":"0000000f-0004-4fff-8fff-0000ffff0000"}]
              }
            }
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "post": {
        "tags": [
          "Schema - Constants"
        ],
        "summary": "Create a new constant.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "description": "Database in which constant will be created",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Database in which constant will be created",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "Constant to add to database",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaConstant"
              },
              "examples": {
                "Example 16": {
                  "summary": "Constant",
                  "description": "This example demonstrates how to create a new constant for the MI_Training database.",
                  "value": {"value":0.0072973525693,"name":"fine-structure constant"}
                },
                "Example 17": {
                  "summary": "Constant with specified guid",
                  "description": "This example demonstrates how to create a new constant for the MI_Training database with a specified guid. Normally, if the guid is not specified, a random new Guid will be generated.",
                  "value": {"value":0.0072973525693,"name":"fine-structure constant (guid)","guid":"b18f3e48-6986-4292-b5e4-719c5682abc7"}
                },
                "Example 18": {
                  "summary": "Constant with specified unit",
                  "description": "This example demonstrates how to create a new constant with a specified unit 'ohm' from the MI_Training database.",
                  "value": {"unit":{"guid":"00000059-0013-4fff-8fff-0000ffff0000"},"value":376.730313668,"name":"characteristic impedance of vacuum (guid and unit)"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaConstant"
              },
              "examples": {
                "Example 16": {
                  "summary": "Constant",
                  "description": "This example demonstrates how to create a new constant for the MI_Training database.",
                  "value": {"value":0.0072973525693,"name":"fine-structure constant"}
                },
                "Example 17": {
                  "summary": "Constant with specified guid",
                  "description": "This example demonstrates how to create a new constant for the MI_Training database with a specified guid. Normally, if the guid is not specified, a random new Guid will be generated.",
                  "value": {"value":0.0072973525693,"name":"fine-structure constant (guid)","guid":"b18f3e48-6986-4292-b5e4-719c5682abc7"}
                },
                "Example 18": {
                  "summary": "Constant with specified unit",
                  "description": "This example demonstrates how to create a new constant with a specified unit 'ohm' from the MI_Training database.",
                  "value": {"unit":{"guid":"00000059-0013-4fff-8fff-0000ffff0000"},"value":376.730313668,"name":"characteristic impedance of vacuum (guid and unit)"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaConstant"
              },
              "examples": {
                "Example 16": {
                  "summary": "Constant",
                  "description": "This example demonstrates how to create a new constant for the MI_Training database.",
                  "value": {"value":0.0072973525693,"name":"fine-structure constant"}
                },
                "Example 17": {
                  "summary": "Constant with specified guid",
                  "description": "This example demonstrates how to create a new constant for the MI_Training database with a specified guid. Normally, if the guid is not specified, a random new Guid will be generated.",
                  "value": {"value":0.0072973525693,"name":"fine-structure constant (guid)","guid":"b18f3e48-6986-4292-b5e4-719c5682abc7"}
                },
                "Example 18": {
                  "summary": "Constant with specified unit",
                  "description": "This example demonstrates how to create a new constant with a specified unit 'ohm' from the MI_Training database.",
                  "value": {"unit":{"guid":"00000059-0013-4fff-8fff-0000ffff0000"},"value":376.730313668,"name":"characteristic impedance of vacuum (guid and unit)"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaConstant"
              },
              "examples": {
                "Example 16": {
                  "summary": "Constant",
                  "description": "This example demonstrates how to create a new constant for the MI_Training database.",
                  "value": {"value":0.0072973525693,"name":"fine-structure constant"}
                },
                "Example 17": {
                  "summary": "Constant with specified guid",
                  "description": "This example demonstrates how to create a new constant for the MI_Training database with a specified guid. Normally, if the guid is not specified, a random new Guid will be generated.",
                  "value": {"value":0.0072973525693,"name":"fine-structure constant (guid)","guid":"b18f3e48-6986-4292-b5e4-719c5682abc7"}
                },
                "Example 18": {
                  "summary": "Constant with specified unit",
                  "description": "This example demonstrates how to create a new constant with a specified unit 'ohm' from the MI_Training database.",
                  "value": {"unit":{"guid":"00000059-0013-4fff-8fff-0000ffff0000"},"value":376.730313668,"name":"characteristic impedance of vacuum (guid and unit)"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/constants/{constant-guid}": {
      "get": {
        "tags": [
          "Schema - Constants"
        ],
        "summary": "Get individual constant",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "description": "Database in which constant will be search for",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Database in which constant will be search for",
              "nullable": true
            }
          },
          {
            "name": "constant-guid",
            "in": "path",
            "description": "Guid of requested constant",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Guid of requested constant",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaConstant"
                },
                "example": {"unit":{"symbol":"m/s","guid":"00000097-0013-4fff-8fff-0000ffff0000"},"value":300000000.0,"name":"Speed of Light in Vacuum","guid":"0000000f-0004-4fff-8fff-0000ffff0000"}
              }
            }
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Schema - Constants"
        ],
        "summary": "Update constant.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "description": "Database in which constant will be search for",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Database in which constant will be search for",
              "nullable": true
            }
          },
          {
            "name": "constant-guid",
            "in": "path",
            "description": "Guid of constant to update",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Guid of constant to update",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Constant data to be updated",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaConstant"
              },
              "examples": {
                "Example 16": {
                  "summary": "Everything for a constant",
                  "description": "This example shows how to update all properties of the 'Speed of light in Vacuum' constant (guid = 0000000f-0004-4fff-8fff-0000ffff0000) from the MI_Training database. Its unit is changed to 'Ohm'",
                  "value": {"unit":{"guid":"00000059-0013-4fff-8fff-0000ffff0000"},"value":376.730313668,"name":"characteristic impedance of vacuum","guid":"f553096b-0944-4a61-9a1d-063315e45c7d"}
                },
                "Example 17": {
                  "summary": "Update name",
                  "description": "This example shows how to update the 'Name' property of the 'Speed of light in Vacuum' constant (guid = 0000000f-0004-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"characteristic impedance of vacuum"}
                },
                "Example 18": {
                  "summary": "Update guid and unit",
                  "description": "This example shows how to update the 'Guid' and 'Unit' properties of the 'Speed of light in Vacuum' constant (guid = 0000000f-0004-4fff-8fff-0000ffff0000) from the MI_Training database. Its unit is changed to 'Ohm'",
                  "value": {"unit":{"guid":"00000059-0013-4fff-8fff-0000ffff0000"},"guid":"1f652d1e-460a-49d1-9dd4-842dd05d0974"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaConstant"
              },
              "examples": {
                "Example 16": {
                  "summary": "Everything for a constant",
                  "description": "This example shows how to update all properties of the 'Speed of light in Vacuum' constant (guid = 0000000f-0004-4fff-8fff-0000ffff0000) from the MI_Training database. Its unit is changed to 'Ohm'",
                  "value": {"unit":{"guid":"00000059-0013-4fff-8fff-0000ffff0000"},"value":376.730313668,"name":"characteristic impedance of vacuum","guid":"f553096b-0944-4a61-9a1d-063315e45c7d"}
                },
                "Example 17": {
                  "summary": "Update name",
                  "description": "This example shows how to update the 'Name' property of the 'Speed of light in Vacuum' constant (guid = 0000000f-0004-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"characteristic impedance of vacuum"}
                },
                "Example 18": {
                  "summary": "Update guid and unit",
                  "description": "This example shows how to update the 'Guid' and 'Unit' properties of the 'Speed of light in Vacuum' constant (guid = 0000000f-0004-4fff-8fff-0000ffff0000) from the MI_Training database. Its unit is changed to 'Ohm'",
                  "value": {"unit":{"guid":"00000059-0013-4fff-8fff-0000ffff0000"},"guid":"1f652d1e-460a-49d1-9dd4-842dd05d0974"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaConstant"
              },
              "examples": {
                "Example 16": {
                  "summary": "Everything for a constant",
                  "description": "This example shows how to update all properties of the 'Speed of light in Vacuum' constant (guid = 0000000f-0004-4fff-8fff-0000ffff0000) from the MI_Training database. Its unit is changed to 'Ohm'",
                  "value": {"unit":{"guid":"00000059-0013-4fff-8fff-0000ffff0000"},"value":376.730313668,"name":"characteristic impedance of vacuum","guid":"f553096b-0944-4a61-9a1d-063315e45c7d"}
                },
                "Example 17": {
                  "summary": "Update name",
                  "description": "This example shows how to update the 'Name' property of the 'Speed of light in Vacuum' constant (guid = 0000000f-0004-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"characteristic impedance of vacuum"}
                },
                "Example 18": {
                  "summary": "Update guid and unit",
                  "description": "This example shows how to update the 'Guid' and 'Unit' properties of the 'Speed of light in Vacuum' constant (guid = 0000000f-0004-4fff-8fff-0000ffff0000) from the MI_Training database. Its unit is changed to 'Ohm'",
                  "value": {"unit":{"guid":"00000059-0013-4fff-8fff-0000ffff0000"},"guid":"1f652d1e-460a-49d1-9dd4-842dd05d0974"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaConstant"
              },
              "examples": {
                "Example 16": {
                  "summary": "Everything for a constant",
                  "description": "This example shows how to update all properties of the 'Speed of light in Vacuum' constant (guid = 0000000f-0004-4fff-8fff-0000ffff0000) from the MI_Training database. Its unit is changed to 'Ohm'",
                  "value": {"unit":{"guid":"00000059-0013-4fff-8fff-0000ffff0000"},"value":376.730313668,"name":"characteristic impedance of vacuum","guid":"f553096b-0944-4a61-9a1d-063315e45c7d"}
                },
                "Example 17": {
                  "summary": "Update name",
                  "description": "This example shows how to update the 'Name' property of the 'Speed of light in Vacuum' constant (guid = 0000000f-0004-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"characteristic impedance of vacuum"}
                },
                "Example 18": {
                  "summary": "Update guid and unit",
                  "description": "This example shows how to update the 'Guid' and 'Unit' properties of the 'Speed of light in Vacuum' constant (guid = 0000000f-0004-4fff-8fff-0000ffff0000) from the MI_Training database. Its unit is changed to 'Ohm'",
                  "value": {"unit":{"guid":"00000059-0013-4fff-8fff-0000ffff0000"},"guid":"1f652d1e-460a-49d1-9dd4-842dd05d0974"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaConstant"
                },
                "example": {"unit":{"symbol":"m/s","guid":"00000097-0013-4fff-8fff-0000ffff0000"},"value":300000000.0,"name":"Speed of Light in Vacuum","guid":"0000000f-0004-4fff-8fff-0000ffff0000"}
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Schema - Constants"
        ],
        "summary": "Delete a constant",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "description": "Database in which constant will be search for",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Database in which constant will be search for",
              "nullable": true
            }
          },
          {
            "name": "constant-guid",
            "in": "path",
            "description": "Guid of constant to delete",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Guid of constant to delete",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad request. Parameter in use."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Database not found"
          }
        }
      }
    },
    "/v1alpha/databases": {
      "get": {
        "tags": [
          "Schema - Databases"
        ],
        "summary": "Lists all databases that the user can see.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimDatabase"
                  }
                },
                "example": [{"key":"MI_Training","versionGuid":"feead34a-cc0e-4070-bbc0-647654a25407","status":"OK","isReadOnly":false,"isLocked":false,"indexInSync":true,"schemaVersion":"2022.08.18.01","name":"MI Training","guid":"43a43640-4919-428a-bac9-16efbc4ce6ed"}]
              }
            }
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}": {
      "get": {
        "tags": [
          "Schema - Databases"
        ],
        "summary": "Returns details for a given database.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaDatabase"
                }
              }
            }
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Schema - Databases"
        ],
        "summary": "Update database details.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaDatabase"
              },
              "examples": {
                "Example 6": {
                  "summary": "Update everything in a database",
                  "description": "This example shows how to update all properties of the MI_Training database.",
                  "value": {"author":"Ansys Granta Technical Training (Updated)","company":"ANSYS, Inc. (updated)","notes":"MI Training Database for Granta MI v2022R2 and above.\r\n\r\n\nThis database has been developed to support training classes. Any other use of this database will not be supported by Ansys Granta. (Updated)","currencyCode":"PLN","versionGuid":"338a8105-0c10-4758-bc4d-36fb6a5c189f","isLocked":false,"name":"MI Training (Updated)","guid":"6eab14f9-3311-47d8-9bc7-2611497f88cb"}
                },
                "Update the author": {
                  "summary": "This example shows how to update the 'Author' property of the MI_Training database.",
                  "value": {"author":"Ansys Granta Technical Training (Updated)"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaDatabase"
              },
              "examples": {
                "Example 6": {
                  "summary": "Update everything in a database",
                  "description": "This example shows how to update all properties of the MI_Training database.",
                  "value": {"author":"Ansys Granta Technical Training (Updated)","company":"ANSYS, Inc. (updated)","notes":"MI Training Database for Granta MI v2022R2 and above.\r\n\r\n\nThis database has been developed to support training classes. Any other use of this database will not be supported by Ansys Granta. (Updated)","currencyCode":"PLN","versionGuid":"338a8105-0c10-4758-bc4d-36fb6a5c189f","isLocked":false,"name":"MI Training (Updated)","guid":"6eab14f9-3311-47d8-9bc7-2611497f88cb"}
                },
                "Update the author": {
                  "summary": "This example shows how to update the 'Author' property of the MI_Training database.",
                  "value": {"author":"Ansys Granta Technical Training (Updated)"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaDatabase"
              },
              "examples": {
                "Example 6": {
                  "summary": "Update everything in a database",
                  "description": "This example shows how to update all properties of the MI_Training database.",
                  "value": {"author":"Ansys Granta Technical Training (Updated)","company":"ANSYS, Inc. (updated)","notes":"MI Training Database for Granta MI v2022R2 and above.\r\n\r\n\nThis database has been developed to support training classes. Any other use of this database will not be supported by Ansys Granta. (Updated)","currencyCode":"PLN","versionGuid":"338a8105-0c10-4758-bc4d-36fb6a5c189f","isLocked":false,"name":"MI Training (Updated)","guid":"6eab14f9-3311-47d8-9bc7-2611497f88cb"}
                },
                "Update the author": {
                  "summary": "This example shows how to update the 'Author' property of the MI_Training database.",
                  "value": {"author":"Ansys Granta Technical Training (Updated)"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaDatabase"
              },
              "examples": {
                "Example 6": {
                  "summary": "Update everything in a database",
                  "description": "This example shows how to update all properties of the MI_Training database.",
                  "value": {"author":"Ansys Granta Technical Training (Updated)","company":"ANSYS, Inc. (updated)","notes":"MI Training Database for Granta MI v2022R2 and above.\r\n\r\n\nThis database has been developed to support training classes. Any other use of this database will not be supported by Ansys Granta. (Updated)","currencyCode":"PLN","versionGuid":"338a8105-0c10-4758-bc4d-36fb6a5c189f","isLocked":false,"name":"MI Training (Updated)","guid":"6eab14f9-3311-47d8-9bc7-2611497f88cb"}
                },
                "Update the author": {
                  "summary": "This example shows how to update the 'Author' property of the MI_Training database.",
                  "value": {"author":"Ansys Granta Technical Training (Updated)"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaDatabase"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Database not found."
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}:lock": {
      "post": {
        "tags": [
          "Schema - Databases"
        ],
        "summary": "Lock database",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "description": "Database to lock",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Database to lock",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaDatabase"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Database not found."
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}:unlock": {
      "post": {
        "tags": [
          "Schema - Databases"
        ],
        "summary": "Unlock database",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "description": "Database to unlock",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Database to unlock",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaDatabase"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Database not found."
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/discrete-types": {
      "get": {
        "tags": [
          "Schema - Discrete Types"
        ],
        "summary": "Gets all discrete types for a given database.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteType"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "post": {
        "tags": [
          "Schema - Discrete Types"
        ],
        "summary": "Create a new discrete type.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteType"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteType"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteType"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/discrete-types/{discrete-type-guid}": {
      "get": {
        "tags": [
          "Schema - Discrete Types"
        ],
        "summary": "Gets a single discrete type.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "discrete-type-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteType"
                }
              }
            }
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Schema - Discrete Types"
        ],
        "summary": "Update discrete type.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "discrete-type-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteType"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteType"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteType"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteType"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Database or discrete type not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Schema - Discrete Types"
        ],
        "summary": "Delete discrete type, including all of its discrete values.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "discrete-type-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "400": {
            "description": "Bad request. Discrete type in use by Attributes."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Database or discrete type not found."
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/discrete-types/{discrete-type-guid}:usages": {
      "get": {
        "tags": [
          "Schema - Discrete Types"
        ],
        "summary": "Gets objects that are using this discrete type.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "discrete-type-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimObjects"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Database or discrete type not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/discrete-types/{discrete-type-guid}/discrete-values": {
      "get": {
        "tags": [
          "Schema - DiscreteTypes - DiscreteValues"
        ],
        "summary": "Gets all discrete values for a given discreteType. If discreteType is ordered, then discreteValues will be return in order, otherwise order is not deterministic.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "discrete-type-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteValue"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Database or Discrete Type not found"
          }
        }
      },
      "post": {
        "tags": [
          "Schema - DiscreteTypes - DiscreteValues"
        ],
        "summary": "Create new discrete value. If it's ordered, it will be added at the end.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "discrete-type-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteValue"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteValue"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteValue"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteValue"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database or Discrete Type not found"
          }
        }
      },
      "put": {
        "tags": [
          "Schema - DiscreteTypes - DiscreteValues"
        ],
        "summary": "Replace the whole discrete value collection for a given discrete type.\r\nThis will result in adding, modifying, deleting and reordering discrete values. If any of those operations fail, the whole operation fails.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "discrete-type-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteValue"
                },
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteValue"
                },
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteValue"
                },
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteValue"
                },
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database or Discrete Type not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/discrete-types/{discrete-type-guid}/discrete-values/{discrete-value-guid}": {
      "get": {
        "tags": [
          "Schema - DiscreteTypes - DiscreteValues"
        ],
        "summary": "Gets specific discrete value for a given discreteType within a given database.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "discrete-type-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "discrete-value-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteValue"
                }
              }
            }
          },
          "404": {
            "description": "Database or Discrete Type or Discrete Value not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Schema - DiscreteTypes - DiscreteValues"
        ],
        "summary": "Update discrete value.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "discrete-type-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "discrete-value-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteValue"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteValue"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteValue"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteValue"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteValue"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Database or discrete type not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Schema - DiscreteTypes - DiscreteValues"
        ],
        "summary": "Delete a single discrete value. It must not be used by any data, or the operation will fail.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "discrete-type-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "discrete-value-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "400": {
            "description": "Bad request. Discrete value in use."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Database or discrete type or discrete value not found."
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/discrete-types/{discrete-type-guid}/discrete-values:find-unused": {
      "get": {
        "tags": [
          "Schema - DiscreteTypes - DiscreteValues"
        ],
        "summary": "Find discrete values that are not in use by any data",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "discrete-type-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiSchemaDiscreteValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Database or Discrete Type not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/tables/{table-guid}/layouts/{layout-guid}/sections": {
      "get": {
        "tags": [
          "Schema - Layout Sections"
        ],
        "summary": "Get all sections for a layout",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "layout-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "showFullDetail",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
              "nullable": true
            }
          },
          {
            "name": "X-Ansys-VC-Mode",
            "in": "header",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsLayoutSection"
                  }
                },
                "examples": {
                  "Example 11": {
                    "summary": "Get 'slim' layout sections",
                    "description": "This example demonstrates the response to getting the sections for a layout with the 'showFullDetail' parameter set to false, which is the default value.",
                    "value": {"length":2,"longLength":2,"rank":1,"syncRoot":[{"sectionDetailType":"slim","displayNames":{"en":"General Properties English Display Name","fr":"General Properties French Display Name"},"name":"General Properties","guid":"b10170ab-ff56-4828-81b8-c4427674ed2f"},{"sectionDetailType":"slim","displayNames":{"en":"Mechanical Properties English Display Name","fr":"Mechanical Properties French Display Name"},"name":"Mechanical Properties","guid":"aa6a7ef2-0e37-40a6-b3eb-11d502408281"}],"isReadOnly":false,"isFixedSize":true,"isSynchronized":false}
                  },
                  "Example 12": {
                    "summary": "Get 'full' layout sections",
                    "description": "This example demonstrates the response to getting the sections for a layout with the 'showFullDetail' parameter set to true.",
                    "value": {"length":2,"longLength":2,"rank":1,"syncRoot":[{"sectionDetailType":"full","sectionItems":[{"itemType":"attribute","attributeType":"point","required":false,"readOnly":false,"metaAttributes":[],"underlyingEntityGuid":"cd65d31d-008d-4060-82fe-22392c9037f1","name":"Price","guid":"be4eebb4-3643-4905-85e1-4a8a66e2c70d"},{"itemType":"attribute","attributeType":"point","required":false,"readOnly":false,"metaAttributes":[],"underlyingEntityGuid":"125da234-f5cb-416f-b4e1-463bef773126","name":"Density","guid":"2061a6a6-c507-45c7-a7ff-191f170b6146"}],"displayNames":{"en":"General Properties English Display Name","fr":"General Properties French Display Name"},"name":"General Properties","guid":"b10170ab-ff56-4828-81b8-c4427674ed2f"},{"sectionDetailType":"full","sectionItems":[{"itemType":"attribute","attributeType":"floatFunctional","required":true,"readOnly":false,"metaAttributes":[],"underlyingEntityGuid":"319badf8-e4be-42fc-ba17-d99e2ee50cd9","name":"Young's modulus","guid":"3e6da2f7-0696-4325-98cd-f073c01abea4"},{"itemType":"attribute","attributeType":"range","required":true,"readOnly":false,"metaAttributes":[],"underlyingEntityGuid":"115e2403-e809-4198-9fe5-fdfc79c8ffe2","name":"Tensile strength","guid":"7cc177c1-6c21-462b-a79d-aba2a3024466"},{"itemType":"attribute","attributeType":"point","required":true,"readOnly":false,"metaAttributes":[],"underlyingEntityGuid":"963c229c-8a22-4a68-ab83-0f2d62da5513","name":"Shape factor","guid":"9e9d8c7a-4ecc-42c7-b03a-3019e0905120"}],"displayNames":{"en":"Mechanical Properties English Display Name","fr":"Mechanical Properties French Display Name"},"name":"Mechanical Properties","guid":"aa6a7ef2-0e37-40a6-b3eb-11d502408281"}],"isReadOnly":false,"isFixedSize":true,"isSynchronized":false}
                  }
                }
              }
            }
          },
          "404": {
            "description": "Layout not found"
          }
        }
      },
      "post": {
        "tags": [
          "Schema - Layout Sections"
        ],
        "summary": "Create a new layout section.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "layout-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimLayoutSection"
              },
              "examples": {
                "Example 11": {
                  "summary": "Layout Section",
                  "description": "This example demonstrates how to create a new layout section in the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"Additional Properties"}
                },
                "Example 12": {
                  "summary": "Layout Section with Guid",
                  "description": "This example demonstrates how to create a new layout section with a specified guid value in the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database. Normally, if the guid is not specified, a random new Guid will be generated.",
                  "value": {"name":"Additional Properties (Guid)","guid":"aac44727-83ac-42bf-b8b7-5be4f33ef8ae"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimLayoutSection"
              },
              "examples": {
                "Example 11": {
                  "summary": "Layout Section",
                  "description": "This example demonstrates how to create a new layout section in the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"Additional Properties"}
                },
                "Example 12": {
                  "summary": "Layout Section with Guid",
                  "description": "This example demonstrates how to create a new layout section with a specified guid value in the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database. Normally, if the guid is not specified, a random new Guid will be generated.",
                  "value": {"name":"Additional Properties (Guid)","guid":"aac44727-83ac-42bf-b8b7-5be4f33ef8ae"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimLayoutSection"
              },
              "examples": {
                "Example 11": {
                  "summary": "Layout Section",
                  "description": "This example demonstrates how to create a new layout section in the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"Additional Properties"}
                },
                "Example 12": {
                  "summary": "Layout Section with Guid",
                  "description": "This example demonstrates how to create a new layout section with a specified guid value in the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database. Normally, if the guid is not specified, a random new Guid will be generated.",
                  "value": {"name":"Additional Properties (Guid)","guid":"aac44727-83ac-42bf-b8b7-5be4f33ef8ae"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimLayoutSection"
              },
              "examples": {
                "Example 11": {
                  "summary": "Layout Section",
                  "description": "This example demonstrates how to create a new layout section in the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"Additional Properties"}
                },
                "Example 12": {
                  "summary": "Layout Section with Guid",
                  "description": "This example demonstrates how to create a new layout section with a specified guid value in the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database. Normally, if the guid is not specified, a random new Guid will be generated.",
                  "value": {"name":"Additional Properties (Guid)","guid":"aac44727-83ac-42bf-b8b7-5be4f33ef8ae"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimLayoutSection"
                },
                "example": {"sectionDetailType":"slim","displayNames":{},"name":"Additional Properties","guid":"bc9737d1-d1a5-48ed-874b-158fba9a9542"}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "layout not found"
          }
        }
      },
      "put": {
        "tags": [
          "Schema - Layout Sections"
        ],
        "summary": "Reorder the list of layout sections for a layout.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "layout-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimEntity"
                },
                "nullable": true
              },
              "examples": {
                "Example 6": {
                  "summary": "Reorder Layout Sections",
                  "description": "This example demonstrates how to reorder sections in the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": [{"guid":"aa6a7ef2-0e37-40a6-b3eb-11d502408281"},{"guid":"b10170ab-ff56-4828-81b8-c4427674ed2f"},{"guid":"07124fac-3100-444f-ad5b-385decd9539f"},{"guid":"937e77fe-70ca-4e99-b013-f9186bce45d3"},{"guid":"6f610145-72f9-4c11-aa72-6cbe268e9238"},{"guid":"f2587e4f-36b4-4b75-8ecb-853e51adf3a5"},{"guid":"6a5788ea-1a46-4806-a9d7-916a2eebb71c"},{"guid":"e243499b-3369-45db-bf3e-3c0dbb82f57f"},{"guid":"b175f578-cf61-4642-9b98-eda48578db1e"},{"guid":"268854a1-1886-4bbf-b6aa-02aa64020fac"},{"guid":"3bde950b-9320-439e-8e7a-cf12c54eb94d"},{"guid":"3b829b2a-bfca-4531-9532-834eedcc0778"},{"guid":"b9d84ce2-9435-4f22-9377-9db56fb80c53"},{"guid":"3be73930-15a2-4dca-a818-3e18aa6081aa"},{"guid":"83ba3aad-cb2f-49df-89e5-091017087563"},{"guid":"0c17f625-debe-4b6a-bcde-d60f3db571f5"},{"guid":"461c81d8-ecb4-4675-a05d-2dfef747db71"},{"guid":"5b986b6d-ce14-48fd-b5a9-6286b9983954"},{"guid":"d15a87a0-2880-4508-af1e-381a2aa9e831"}]
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimEntity"
                },
                "nullable": true
              },
              "examples": {
                "Example 6": {
                  "summary": "Reorder Layout Sections",
                  "description": "This example demonstrates how to reorder sections in the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": [{"guid":"aa6a7ef2-0e37-40a6-b3eb-11d502408281"},{"guid":"b10170ab-ff56-4828-81b8-c4427674ed2f"},{"guid":"07124fac-3100-444f-ad5b-385decd9539f"},{"guid":"937e77fe-70ca-4e99-b013-f9186bce45d3"},{"guid":"6f610145-72f9-4c11-aa72-6cbe268e9238"},{"guid":"f2587e4f-36b4-4b75-8ecb-853e51adf3a5"},{"guid":"6a5788ea-1a46-4806-a9d7-916a2eebb71c"},{"guid":"e243499b-3369-45db-bf3e-3c0dbb82f57f"},{"guid":"b175f578-cf61-4642-9b98-eda48578db1e"},{"guid":"268854a1-1886-4bbf-b6aa-02aa64020fac"},{"guid":"3bde950b-9320-439e-8e7a-cf12c54eb94d"},{"guid":"3b829b2a-bfca-4531-9532-834eedcc0778"},{"guid":"b9d84ce2-9435-4f22-9377-9db56fb80c53"},{"guid":"3be73930-15a2-4dca-a818-3e18aa6081aa"},{"guid":"83ba3aad-cb2f-49df-89e5-091017087563"},{"guid":"0c17f625-debe-4b6a-bcde-d60f3db571f5"},{"guid":"461c81d8-ecb4-4675-a05d-2dfef747db71"},{"guid":"5b986b6d-ce14-48fd-b5a9-6286b9983954"},{"guid":"d15a87a0-2880-4508-af1e-381a2aa9e831"}]
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimEntity"
                },
                "nullable": true
              },
              "examples": {
                "Example 6": {
                  "summary": "Reorder Layout Sections",
                  "description": "This example demonstrates how to reorder sections in the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": [{"guid":"aa6a7ef2-0e37-40a6-b3eb-11d502408281"},{"guid":"b10170ab-ff56-4828-81b8-c4427674ed2f"},{"guid":"07124fac-3100-444f-ad5b-385decd9539f"},{"guid":"937e77fe-70ca-4e99-b013-f9186bce45d3"},{"guid":"6f610145-72f9-4c11-aa72-6cbe268e9238"},{"guid":"f2587e4f-36b4-4b75-8ecb-853e51adf3a5"},{"guid":"6a5788ea-1a46-4806-a9d7-916a2eebb71c"},{"guid":"e243499b-3369-45db-bf3e-3c0dbb82f57f"},{"guid":"b175f578-cf61-4642-9b98-eda48578db1e"},{"guid":"268854a1-1886-4bbf-b6aa-02aa64020fac"},{"guid":"3bde950b-9320-439e-8e7a-cf12c54eb94d"},{"guid":"3b829b2a-bfca-4531-9532-834eedcc0778"},{"guid":"b9d84ce2-9435-4f22-9377-9db56fb80c53"},{"guid":"3be73930-15a2-4dca-a818-3e18aa6081aa"},{"guid":"83ba3aad-cb2f-49df-89e5-091017087563"},{"guid":"0c17f625-debe-4b6a-bcde-d60f3db571f5"},{"guid":"461c81d8-ecb4-4675-a05d-2dfef747db71"},{"guid":"5b986b6d-ce14-48fd-b5a9-6286b9983954"},{"guid":"d15a87a0-2880-4508-af1e-381a2aa9e831"}]
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimEntity"
                },
                "nullable": true
              },
              "examples": {
                "Example 6": {
                  "summary": "Reorder Layout Sections",
                  "description": "This example demonstrates how to reorder sections in the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": [{"guid":"aa6a7ef2-0e37-40a6-b3eb-11d502408281"},{"guid":"b10170ab-ff56-4828-81b8-c4427674ed2f"},{"guid":"07124fac-3100-444f-ad5b-385decd9539f"},{"guid":"937e77fe-70ca-4e99-b013-f9186bce45d3"},{"guid":"6f610145-72f9-4c11-aa72-6cbe268e9238"},{"guid":"f2587e4f-36b4-4b75-8ecb-853e51adf3a5"},{"guid":"6a5788ea-1a46-4806-a9d7-916a2eebb71c"},{"guid":"e243499b-3369-45db-bf3e-3c0dbb82f57f"},{"guid":"b175f578-cf61-4642-9b98-eda48578db1e"},{"guid":"268854a1-1886-4bbf-b6aa-02aa64020fac"},{"guid":"3bde950b-9320-439e-8e7a-cf12c54eb94d"},{"guid":"3b829b2a-bfca-4531-9532-834eedcc0778"},{"guid":"b9d84ce2-9435-4f22-9377-9db56fb80c53"},{"guid":"3be73930-15a2-4dca-a818-3e18aa6081aa"},{"guid":"83ba3aad-cb2f-49df-89e5-091017087563"},{"guid":"0c17f625-debe-4b6a-bcde-d60f3db571f5"},{"guid":"461c81d8-ecb4-4675-a05d-2dfef747db71"},{"guid":"5b986b6d-ce14-48fd-b5a9-6286b9983954"},{"guid":"d15a87a0-2880-4508-af1e-381a2aa9e831"}]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimLayoutSection"
                  }
                },
                "example": [{"sectionDetailType":"slim","displayNames":{"en":"Mechanical Properties English Display Name","fr":"Mechanical Properties French Display Name"},"name":"Mechanical Properties","guid":"aa6a7ef2-0e37-40a6-b3eb-11d502408281"},{"sectionDetailType":"slim","displayNames":{"en":"General Properties English Display Name","fr":"General Properties French Display Name"},"name":"General Properties","guid":"b10170ab-ff56-4828-81b8-c4427674ed2f"},{"sectionDetailType":"slim","displayNames":{"en":"Electrical Properties English Display Name","fr":"Electrical Properties French Display Name"},"name":"Electrical Properties","guid":"07124fac-3100-444f-ad5b-385decd9539f"},{"sectionDetailType":"slim","displayNames":{"en":"Composition Overview English Display Name","fr":"Composition Overview French Display Name"},"name":"Composition Overview","guid":"937e77fe-70ca-4e99-b013-f9186bce45d3"},{"sectionDetailType":"slim","displayNames":{"en":"Composition detail (metals, ceramics and glasses) English Display Name","fr":"Composition detail (metals, ceramics and glasses) French Display Name"},"name":"Composition detail (metals, ceramics and glasses)","guid":"6f610145-72f9-4c11-aa72-6cbe268e9238"},{"sectionDetailType":"slim","displayNames":{"en":"Restricted substances English Display Name","fr":"Restricted substances French Display Name"},"name":"Restricted substances","guid":"f2587e4f-36b4-4b75-8ecb-853e51adf3a5"},{"sectionDetailType":"slim","displayNames":{"en":"Further Information English Display Name","fr":"Further Information French Display Name"},"name":"Further Information","guid":"6a5788ea-1a46-4806-a9d7-916a2eebb71c"},{"sectionDetailType":"slim","displayNames":{"en":"Restricted substances English Display Name","fr":"Restricted substances French Display Name"},"name":"Restricted substances","guid":"f2587e4f-36b4-4b75-8ecb-853e51adf3a5"},{"sectionDetailType":"slim","displayNames":{"en":"Notes English Display Name","fr":"Notes French Display Name"},"name":"Notes","guid":"e243499b-3369-45db-bf3e-3c0dbb82f57f"},{"sectionDetailType":"slim","displayNames":{"en":"Material recycling: energy, CO2 and recycle fraction English Display Name","fr":"Material recycling: energy, CO2 and recycle fraction French Display Name"},"name":"Material recycling: energy, CO2 and recycle fraction","guid":"b175f578-cf61-4642-9b98-eda48578db1e"},{"sectionDetailType":"slim","displayNames":{"en":"Material processing: CO2 footprint English Display Name","fr":"Material processing: CO2 footprint French Display Name"},"name":"Material processing: CO2 footprint","guid":"268854a1-1886-4bbf-b6aa-02aa64020fac"},{"sectionDetailType":"slim","displayNames":{"en":"Material processing: energy English Display Name","fr":"Material processing: energy French Display Name"},"name":"Material processing: energy","guid":"3bde950b-9320-439e-8e7a-cf12c54eb94d"},{"sectionDetailType":"slim","displayNames":{"en":"Eco-indicators for principal component English Display Name","fr":"Eco-indicators for principal component French Display Name"},"name":"Eco-indicators for principal component","guid":"3b829b2a-bfca-4531-9532-834eedcc0778"},{"sectionDetailType":"slim","displayNames":{"en":"Primary material production: energy, CO2 and water English Display Name","fr":"Primary material production: energy, CO2 and water French Display Name"},"name":"Primary material production: energy, CO2 and water","guid":"b9d84ce2-9435-4f22-9377-9db56fb80c53"},{"sectionDetailType":"slim","displayNames":{"en":"Geo-economic data for principal component English Display Name","fr":"Geo-economic data for principal component French Display Name"},"name":"Geo-economic data for principal component","guid":"3be73930-15a2-4dca-a818-3e18aa6081aa"},{"sectionDetailType":"slim","displayNames":{"en":"Durability: fluids and sunlight English Display Name","fr":"Durability: fluids and sunlight French Display Name"},"name":"Durability: fluids and sunlight","guid":"83ba3aad-cb2f-49df-89e5-091017087563"},{"sectionDetailType":"slim","displayNames":{"en":"Durability: flammability English Display Name","fr":"Durability: flammability French Display Name"},"name":"Durability: flammability","guid":"0c17f625-debe-4b6a-bcde-d60f3db571f5"},{"sectionDetailType":"slim","displayNames":{"en":"Optical properties English Display Name","fr":"Optical properties French Display Name"},"name":"Optical properties","guid":"461c81d8-ecb4-4675-a05d-2dfef747db71"},{"sectionDetailType":"slim","displayNames":{"en":"Thermal properties English Display Name","fr":"Thermal properties French Display Name"},"name":"Thermal properties","guid":"5b986b6d-ce14-48fd-b5a9-6286b9983954"},{"sectionDetailType":"slim","displayNames":{"en":"Bio-data English Display Name","fr":"Bio-data French Display Name"},"name":"Bio-data","guid":"d15a87a0-2880-4508-af1e-381a2aa9e831"}]
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Layout Section not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/tables/{table-guid}/layouts/{layout-guid}/sections/{section-guid}": {
      "get": {
        "tags": [
          "Schema - Layout Sections"
        ],
        "summary": "Get a layout section with a specified guid for a given layout.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "layout-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "section-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "showFullDetail",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
              "nullable": true
            }
          },
          {
            "name": "X-Ansys-VC-Mode",
            "in": "header",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsLayoutSection"
                },
                "examples": {
                  "Example 11": {
                    "summary": "Get 'slim' layout section",
                    "description": "This example demonstrates the response to getting a layout section with the 'showFullDetail' parameter set to false, which is the default value.",
                    "value": {"detailType":"slim","propertyNameToStatusMap":null,"displayNames":{"de":"Testing Information German Display Name","fr":"Testing Information French Display Name"},"name":"Testing Information","guid":"4a7860e6-c8d3-4cff-aab6-27a6b857f5a1"}
                  },
                  "Example 12": {
                    "summary": "Get 'full' layout section",
                    "description": "This example demonstrates the response to getting a layout section with the 'showFullDetail' parameter set to true.",
                    "value": {"detailType":"full","sectionItems":[{"itemType":"attribute","attributeType":"shortText","required":true,"readOnly":false,"metaAttributes":[],"underlyingEntityGuid":"b36c40b9-ff0d-4083-9ff8-68b8e93c33b5","name":"Form","guid":"7ba71f42-e2ef-4d8e-b493-41a98ea309e4"},{"itemType":"attribute","attributeType":"point","required":true,"readOnly":false,"metaAttributes":[{"itemType":"attribute","attributeType":"longText","required":true,"readOnly":false,"underlyingEntityGuid":"7c278779-1bfe-4aee-a2dc-a42f00228802","name":"Sources","guid":"62041cab-01e7-4357-b545-20b72ecb6f2a"},{"itemType":"attribute","attributeType":"shortText","required":true,"readOnly":false,"underlyingEntityGuid":"48846f91-534d-4c77-92cc-f68a3c700063","name":"Notes","guid":"4f8b18b8-079f-4d14-8c22-de1e2d8d05aa"}],"underlyingEntityGuid":"345fdbda-202a-45db-87cb-3eaa0c73abdb","name":"Chemical resistance","guid":"27b47f29-da6a-464c-bf22-c2fe94ca6054"},{"itemType":"link","linkType":"recordLink","targetDatabase":"ac8d7a63-ce7a-455f-b787-ad7efa018348","targetTable":"ca17544e-fbd9-491e-89c4-567d7f56789e","forwards":true,"underlyingEntityGuid":"549139ff-f598-4ba9-a097-bede1c5072d0","name":"Material Pedigree","guid":"56ac1c65-4632-4189-9da0-9174d7c163a3"},{"itemType":"attribute","attributeType":"link","required":false,"readOnly":false,"metaAttributes":[],"tabularColumns":[{"columnType":"linkedAttribute","tabularColumnGuid":"3547b882-0ad7-40d5-a224-f983336dd3ed","name":"Offset Yield Stress","guid":"746c2108-db2e-4533-bd0c-b550e7c91ab9"},{"columnType":"local","tabularColumnGuid":"70374667-034f-4a00-93b9-9fb03a8e7df5","name":"Young's Modulus Notes","guid":"dc5b91d2-7ac5-48a8-93d9-9a1cea2fbfd3"}],"targetDatabase":"ac8d7a63-ce7a-455f-b787-ad7efa018348","targetTable":"a11b4dc5-cfa4-4369-90a5-87a8cdfffbcb","underlyingEntityGuid":"8a749686-9fc7-4356-ad06-31be7b8aef3a","name":"Reference Characteristics","guid":"e937c260-8926-45fd-9960-05bcb7f18030"},{"itemType":"link","linkType":"associationChain","targetDatabase":"ac8d7a63-ce7a-455f-b787-ad7efa018348","targetTable":"80bbe30c-7065-430a-9541-8cd396785b70","forwards":true,"nextLink":{"itemType":"link","linkType":"associationChain","targetDatabase":"ac8d7a63-ce7a-455f-b787-ad7efa018348","targetTable":"24cec4ba-f1af-4419-b460-16d8b95197c9","forwards":false,"underlyingEntityGuid":"708f4cfc-08dc-48c9-bb6d-3f18c0c252b2","name":"Pedigree information","guid":"6ace8821-19c5-4a04-a430-dfb5827346f2"},"underlyingEntityGuid":"91584bf4-47b4-416a-888f-7e7c92c34440","name":"To Pedigree from Producers","guid":"1d1b1807-272d-44ec-a65a-f401687d7289"}],"propertyNameToStatusMap":null,"displayNames":{"de":"Testing Information German Display Name","fr":"Testing Information French Display Name"},"name":"Testing Information","guid":"72d4042e-ccbd-480b-b062-b79c7efd36e9"}
                  }
                }
              }
            }
          },
          "404": {
            "description": "layout section not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Schema - Layout Sections"
        ],
        "summary": "Delete a layout section.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "layout-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "section-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Layout Section not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/tables/{table-guid}/layouts/{layout-guid}/sections/{section-guid}/items": {
      "post": {
        "tags": [
          "Schema - Layout Sections"
        ],
        "summary": "Add a new layout item.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "layout-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "section-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsNewLayoutItem"
              },
              "examples": {
                "Example 41": {
                  "summary": "Layout Attribute Item",
                  "description": "This example demonstrates how to add the 'Additive' attribute to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database. The ReadOnly and Required properties default to false.",
                  "value": {"itemType":"attribute","attributeGuid":"ec51581f-4a78-4b1b-81df-83382c541b7b"}
                },
                "Example 42": {
                  "summary": "Layout Attribute Item with ReadOnly and Required properties set",
                  "description": "This example demonstrates how to add the 'Additive' attribute to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database specifying the ReadOnly and Required properties and the Guid of the created layout item.",
                  "value": {"itemType":"attribute","attributeGuid":"ec51581f-4a78-4b1b-81df-83382c541b7b","required":true,"readOnly":true}
                },
                "Example 43": {
                  "summary": "Layout Attribute Item with Meta Attributes",
                  "description": "This example demonstrates how to add the 'Flexural modulus' attribute with its 'Notes' meta-attribute to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"itemType":"attribute","attributeGuid":"000000ec-0001-4fff-8fff-dd92ffff0000","metaAttributes":[{"itemType":"attribute","attributeGuid":"3cd6866c-3ad4-4cc9-b2d0-e7296b0c12d5","required":false,"readOnly":false}]}
                },
                "Example 44": {
                  "summary": "Layout Attribute Item for a Tabular Attribute",
                  "description": "This example demonstrates how to add the 'Restricted substances associated with this material' attribute to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database with specified tabular columns to include.",
                  "value": {"itemType":"attribute","attributeGuid":"51e51832-0bcc-4fe0-bb95-ddd6917dc554","tabularColumnGuids":["7b28a5fd-4972-40fc-8181-626586258bc3","9a0ce77a-60cf-42c7-b827-e7d74bea7a6b"]}
                },
                "Example 45": {
                  "summary": "Layout Record Link Group Item",
                  "description": "This example demonstrates how to add the 'Training Exercise' link group to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"itemType":"recordLink","linkGroupGuid":"9337df8e-c22b-4aaf-a9fc-6930c69c94cb"}
                },
                "Example 46": {
                  "summary": "Layout Smart Link Group Item",
                  "description": "This example demonstrates how to add the 'Smart Link to Training Record' smart link group to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"itemType":"smartLink","forwards":true,"linkGroupGuid":"7bf0d4d5-6896-4a10-b7a1-d1fe4e533e66"}
                },
                "Example 47": {
                  "summary": "Layout Cross Database Link Group Item",
                  "description": "This example demonstrates how to add a cross database link group to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"itemType":"crossDatabaseLink","sourceDatabaseGuid":"4d8a6629-5ba2-42dc-a9b6-5c155223dd4e","sourceTableGuid":"35273e80-656e-4fda-8e5a-4af6b2412fd9","linkGroupGuid":"ae7218fa-9faf-49bd-9dc6-e4dd3507ca58"}
                },
                "Example 48": {
                  "summary": "Layout Association Chain Item",
                  "description": "This example demonstrates how to add an association chain to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"itemType":"associationChain","associationChainName":"Name of association chain","associationChainLinks":[{"forwards":true,"tabularAttributeGuid":"11c960f7-245c-4983-9fa4-a49436dc2a97"},{"forwards":false,"tabularAttributeGuid":"0fccf89f-9f41-4693-97d5-1e820a269250"}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsNewLayoutItem"
              },
              "examples": {
                "Example 41": {
                  "summary": "Layout Attribute Item",
                  "description": "This example demonstrates how to add the 'Additive' attribute to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database. The ReadOnly and Required properties default to false.",
                  "value": {"itemType":"attribute","attributeGuid":"ec51581f-4a78-4b1b-81df-83382c541b7b"}
                },
                "Example 42": {
                  "summary": "Layout Attribute Item with ReadOnly and Required properties set",
                  "description": "This example demonstrates how to add the 'Additive' attribute to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database specifying the ReadOnly and Required properties and the Guid of the created layout item.",
                  "value": {"itemType":"attribute","attributeGuid":"ec51581f-4a78-4b1b-81df-83382c541b7b","required":true,"readOnly":true}
                },
                "Example 43": {
                  "summary": "Layout Attribute Item with Meta Attributes",
                  "description": "This example demonstrates how to add the 'Flexural modulus' attribute with its 'Notes' meta-attribute to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"itemType":"attribute","attributeGuid":"000000ec-0001-4fff-8fff-dd92ffff0000","metaAttributes":[{"itemType":"attribute","attributeGuid":"3cd6866c-3ad4-4cc9-b2d0-e7296b0c12d5","required":false,"readOnly":false}]}
                },
                "Example 44": {
                  "summary": "Layout Attribute Item for a Tabular Attribute",
                  "description": "This example demonstrates how to add the 'Restricted substances associated with this material' attribute to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database with specified tabular columns to include.",
                  "value": {"itemType":"attribute","attributeGuid":"51e51832-0bcc-4fe0-bb95-ddd6917dc554","tabularColumnGuids":["7b28a5fd-4972-40fc-8181-626586258bc3","9a0ce77a-60cf-42c7-b827-e7d74bea7a6b"]}
                },
                "Example 45": {
                  "summary": "Layout Record Link Group Item",
                  "description": "This example demonstrates how to add the 'Training Exercise' link group to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"itemType":"recordLink","linkGroupGuid":"9337df8e-c22b-4aaf-a9fc-6930c69c94cb"}
                },
                "Example 46": {
                  "summary": "Layout Smart Link Group Item",
                  "description": "This example demonstrates how to add the 'Smart Link to Training Record' smart link group to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"itemType":"smartLink","forwards":true,"linkGroupGuid":"7bf0d4d5-6896-4a10-b7a1-d1fe4e533e66"}
                },
                "Example 47": {
                  "summary": "Layout Cross Database Link Group Item",
                  "description": "This example demonstrates how to add a cross database link group to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"itemType":"crossDatabaseLink","sourceDatabaseGuid":"4d8a6629-5ba2-42dc-a9b6-5c155223dd4e","sourceTableGuid":"35273e80-656e-4fda-8e5a-4af6b2412fd9","linkGroupGuid":"ae7218fa-9faf-49bd-9dc6-e4dd3507ca58"}
                },
                "Example 48": {
                  "summary": "Layout Association Chain Item",
                  "description": "This example demonstrates how to add an association chain to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"itemType":"associationChain","associationChainName":"Name of association chain","associationChainLinks":[{"forwards":true,"tabularAttributeGuid":"11c960f7-245c-4983-9fa4-a49436dc2a97"},{"forwards":false,"tabularAttributeGuid":"0fccf89f-9f41-4693-97d5-1e820a269250"}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsNewLayoutItem"
              },
              "examples": {
                "Example 41": {
                  "summary": "Layout Attribute Item",
                  "description": "This example demonstrates how to add the 'Additive' attribute to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database. The ReadOnly and Required properties default to false.",
                  "value": {"itemType":"attribute","attributeGuid":"ec51581f-4a78-4b1b-81df-83382c541b7b"}
                },
                "Example 42": {
                  "summary": "Layout Attribute Item with ReadOnly and Required properties set",
                  "description": "This example demonstrates how to add the 'Additive' attribute to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database specifying the ReadOnly and Required properties and the Guid of the created layout item.",
                  "value": {"itemType":"attribute","attributeGuid":"ec51581f-4a78-4b1b-81df-83382c541b7b","required":true,"readOnly":true}
                },
                "Example 43": {
                  "summary": "Layout Attribute Item with Meta Attributes",
                  "description": "This example demonstrates how to add the 'Flexural modulus' attribute with its 'Notes' meta-attribute to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"itemType":"attribute","attributeGuid":"000000ec-0001-4fff-8fff-dd92ffff0000","metaAttributes":[{"itemType":"attribute","attributeGuid":"3cd6866c-3ad4-4cc9-b2d0-e7296b0c12d5","required":false,"readOnly":false}]}
                },
                "Example 44": {
                  "summary": "Layout Attribute Item for a Tabular Attribute",
                  "description": "This example demonstrates how to add the 'Restricted substances associated with this material' attribute to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database with specified tabular columns to include.",
                  "value": {"itemType":"attribute","attributeGuid":"51e51832-0bcc-4fe0-bb95-ddd6917dc554","tabularColumnGuids":["7b28a5fd-4972-40fc-8181-626586258bc3","9a0ce77a-60cf-42c7-b827-e7d74bea7a6b"]}
                },
                "Example 45": {
                  "summary": "Layout Record Link Group Item",
                  "description": "This example demonstrates how to add the 'Training Exercise' link group to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"itemType":"recordLink","linkGroupGuid":"9337df8e-c22b-4aaf-a9fc-6930c69c94cb"}
                },
                "Example 46": {
                  "summary": "Layout Smart Link Group Item",
                  "description": "This example demonstrates how to add the 'Smart Link to Training Record' smart link group to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"itemType":"smartLink","forwards":true,"linkGroupGuid":"7bf0d4d5-6896-4a10-b7a1-d1fe4e533e66"}
                },
                "Example 47": {
                  "summary": "Layout Cross Database Link Group Item",
                  "description": "This example demonstrates how to add a cross database link group to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"itemType":"crossDatabaseLink","sourceDatabaseGuid":"4d8a6629-5ba2-42dc-a9b6-5c155223dd4e","sourceTableGuid":"35273e80-656e-4fda-8e5a-4af6b2412fd9","linkGroupGuid":"ae7218fa-9faf-49bd-9dc6-e4dd3507ca58"}
                },
                "Example 48": {
                  "summary": "Layout Association Chain Item",
                  "description": "This example demonstrates how to add an association chain to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"itemType":"associationChain","associationChainName":"Name of association chain","associationChainLinks":[{"forwards":true,"tabularAttributeGuid":"11c960f7-245c-4983-9fa4-a49436dc2a97"},{"forwards":false,"tabularAttributeGuid":"0fccf89f-9f41-4693-97d5-1e820a269250"}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsNewLayoutItem"
              },
              "examples": {
                "Example 41": {
                  "summary": "Layout Attribute Item",
                  "description": "This example demonstrates how to add the 'Additive' attribute to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database. The ReadOnly and Required properties default to false.",
                  "value": {"itemType":"attribute","attributeGuid":"ec51581f-4a78-4b1b-81df-83382c541b7b"}
                },
                "Example 42": {
                  "summary": "Layout Attribute Item with ReadOnly and Required properties set",
                  "description": "This example demonstrates how to add the 'Additive' attribute to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database specifying the ReadOnly and Required properties and the Guid of the created layout item.",
                  "value": {"itemType":"attribute","attributeGuid":"ec51581f-4a78-4b1b-81df-83382c541b7b","required":true,"readOnly":true}
                },
                "Example 43": {
                  "summary": "Layout Attribute Item with Meta Attributes",
                  "description": "This example demonstrates how to add the 'Flexural modulus' attribute with its 'Notes' meta-attribute to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"itemType":"attribute","attributeGuid":"000000ec-0001-4fff-8fff-dd92ffff0000","metaAttributes":[{"itemType":"attribute","attributeGuid":"3cd6866c-3ad4-4cc9-b2d0-e7296b0c12d5","required":false,"readOnly":false}]}
                },
                "Example 44": {
                  "summary": "Layout Attribute Item for a Tabular Attribute",
                  "description": "This example demonstrates how to add the 'Restricted substances associated with this material' attribute to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database with specified tabular columns to include.",
                  "value": {"itemType":"attribute","attributeGuid":"51e51832-0bcc-4fe0-bb95-ddd6917dc554","tabularColumnGuids":["7b28a5fd-4972-40fc-8181-626586258bc3","9a0ce77a-60cf-42c7-b827-e7d74bea7a6b"]}
                },
                "Example 45": {
                  "summary": "Layout Record Link Group Item",
                  "description": "This example demonstrates how to add the 'Training Exercise' link group to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"itemType":"recordLink","linkGroupGuid":"9337df8e-c22b-4aaf-a9fc-6930c69c94cb"}
                },
                "Example 46": {
                  "summary": "Layout Smart Link Group Item",
                  "description": "This example demonstrates how to add the 'Smart Link to Training Record' smart link group to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"itemType":"smartLink","forwards":true,"linkGroupGuid":"7bf0d4d5-6896-4a10-b7a1-d1fe4e533e66"}
                },
                "Example 47": {
                  "summary": "Layout Cross Database Link Group Item",
                  "description": "This example demonstrates how to add a cross database link group to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"itemType":"crossDatabaseLink","sourceDatabaseGuid":"4d8a6629-5ba2-42dc-a9b6-5c155223dd4e","sourceTableGuid":"35273e80-656e-4fda-8e5a-4af6b2412fd9","linkGroupGuid":"ae7218fa-9faf-49bd-9dc6-e4dd3507ca58"}
                },
                "Example 48": {
                  "summary": "Layout Association Chain Item",
                  "description": "This example demonstrates how to add an association chain to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"itemType":"associationChain","associationChainName":"Name of association chain","associationChainLinks":[{"forwards":true,"tabularAttributeGuid":"11c960f7-245c-4983-9fa4-a49436dc2a97"},{"forwards":false,"tabularAttributeGuid":"0fccf89f-9f41-4693-97d5-1e820a269250"}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsNewLayoutItem"
                },
                "examples": {
                  "Example 36": {
                    "summary": "Layout Attribute Item",
                    "description": "This example demonstrates the response to creating a new attribute layout item. It was created by adding the 'Additive' attribute to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"itemType":"attribute","attributeGuid":"ec51581f-4a78-4b1b-81df-83382c541b7b","required":true,"readOnly":false,"metaAttributes":null,"tabularColumnGuids":null,"propertyNameToStatusMap":null,"guid":"be3d78bf-892a-4f9e-8424-52a99f8f1e52"}
                  },
                  "Example 37": {
                    "summary": "Layout Attribute Item with Meta Attributes",
                    "description": "This example demonstrates the response to creating a new attribute layout item with a meta-attribute. It was created by adding the 'Flexural modulus' attribute with its 'Notes' meta-attribute to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"itemType":"attribute","attributeGuid":"000000ec-0001-4fff-8fff-dd92ffff0000","required":false,"readOnly":false,"metaAttributes":[{"itemType":"attribute","attributeGuid":"3cd6866c-3ad4-4cc9-b2d0-e7296b0c12d5","required":true,"readOnly":false}],"tabularColumnGuids":null,"propertyNameToStatusMap":null,"guid":"55850d57-42a2-47ac-ad2f-9cc47bd75336"}
                  },
                  "Example 38": {
                    "summary": "Layout Attribute Item for a Tabular Attribute",
                    "description": "This example demonstrates the response to creating a new tabular attribute layout item with specified tabular columns to include. It was created by adding the 'Restricted substances associated with this material' attribute to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database with specified tabular columns to include. ",
                    "value": {"itemType":"attribute","attributeGuid":"51e51832-0bcc-4fe0-bb95-ddd6917dc554","required":false,"readOnly":false,"metaAttributes":null,"tabularColumnGuids":["7b28a5fd-4972-40fc-8181-626586258bc3","9a0ce77a-60cf-42c7-b827-e7d74bea7a6b"],"propertyNameToStatusMap":null,"guid":null}
                  },
                  "Example 39": {
                    "summary": "Layout Record Link Group Item",
                    "description": "This example demonstrates the response to creating a new link group layout item. It was created by adding the 'Training Exercise' link group to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"itemType":"recordLink","linkGroupGuid":"9337df8e-c22b-4aaf-a9fc-6930c69c94cb","propertyNameToStatusMap":null,"guid":null}
                  },
                  "Example 40": {
                    "summary": "Layout Smart Link Group Item",
                    "description": "This example demonstrates the response to creating a new smart link group layout item. It was created by adding the 'Smart Link to Training Record' smart link group to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"itemType":"smartLink","forwards":true,"linkGroupGuid":"7bf0d4d5-6896-4a10-b7a1-d1fe4e533e66","propertyNameToStatusMap":null,"guid":null}
                  },
                  "Example 41": {
                    "summary": "Layout Cross Database Link Group Item",
                    "description": "This example demonstrates the response to creating a new cross database link group layout item. It was created by adding a cross database link group to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"itemType":"crossDatabaseLink","sourceDatabaseGuid":"56559d10-22a9-4221-953f-54a5f358ae79","sourceTableGuid":"0cfcb05e-8f8d-46ae-813b-839bbef44ce9","linkGroupGuid":"bf0a853e-b1e9-4e6e-b67a-dfe9c3e1ce25","propertyNameToStatusMap":null,"guid":null}
                  },
                  "Example 42": {
                    "summary": "Layout Association Chain Item",
                    "description": "This example demonstrates the response to creating a new association chain layout item. It was created by adding a association chain to the 'General Properties' layout section (guid = b10170ab-ff56-4828-81b8-c4427674ed2f) of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                    "value": {"itemType":"associationChain","associationChainName":"Name of association chain","associationChainLinks":[{"forwards":true,"tabularAttributeGuid":"6c6083a1-8d1f-45c5-b484-4c010837c5fc"},{"forwards":false,"tabularAttributeGuid":"647daf8a-5d66-4990-8821-8b5ed674000b"}],"propertyNameToStatusMap":null,"guid":null}
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Section not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/tables/{table-guid}/layouts/{layout-guid}/sections/{section-guid}/items/{item-guid}": {
      "delete": {
        "tags": [
          "Schema - Layout Sections"
        ],
        "summary": "Delete a layout item.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "layout-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "section-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "item-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Layout Item not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/tables/{table-guid}/layouts": {
      "get": {
        "tags": [
          "Schema - Layouts"
        ],
        "summary": "Get all layouts for table",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
              "nullable": true
            }
          },
          {
            "name": "X-Ansys-VC-Mode",
            "in": "header",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimLayout"
                  }
                },
                "example": [{"displayNames":{"en":"Ceramics English Display Name","fr":"Ceramics French Display Name"},"name":"Ceramics","guid":"00000b36-0009-4fff-8fff-dd92ffff0000"},{"displayNames":{},"name":"Metals","guid":"0000b135-0009-4fff-8fff-dd92ffff0000"},{"displayNames":{},"name":"Polymers","guid":"00007645-0009-4fff-8fff-dd92ffff0000"}]
              }
            }
          },
          "404": {
            "description": "Table not found"
          }
        }
      },
      "post": {
        "tags": [
          "Schema - Layouts"
        ],
        "summary": "Create a new layout.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimLayout"
              },
              "examples": {
                "Example 11": {
                  "summary": "Layout",
                  "description": "This example demonstrates how to create a new layout for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"Composite materials"}
                },
                "Example 12": {
                  "summary": "Layout with Guid",
                  "description": "This example demonstrates how to create a new layout for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database with a specified guid value. Normally, if the guid is not specified, a random new Guid will be generated. ",
                  "value": {"name":"Composite materials (guid)","guid":"5ff5c8d7-b91f-4e37-982e-d98510b969a4"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimLayout"
              },
              "examples": {
                "Example 11": {
                  "summary": "Layout",
                  "description": "This example demonstrates how to create a new layout for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"Composite materials"}
                },
                "Example 12": {
                  "summary": "Layout with Guid",
                  "description": "This example demonstrates how to create a new layout for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database with a specified guid value. Normally, if the guid is not specified, a random new Guid will be generated. ",
                  "value": {"name":"Composite materials (guid)","guid":"5ff5c8d7-b91f-4e37-982e-d98510b969a4"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimLayout"
              },
              "examples": {
                "Example 11": {
                  "summary": "Layout",
                  "description": "This example demonstrates how to create a new layout for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"Composite materials"}
                },
                "Example 12": {
                  "summary": "Layout with Guid",
                  "description": "This example demonstrates how to create a new layout for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database with a specified guid value. Normally, if the guid is not specified, a random new Guid will be generated. ",
                  "value": {"name":"Composite materials (guid)","guid":"5ff5c8d7-b91f-4e37-982e-d98510b969a4"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimLayout"
              },
              "examples": {
                "Example 11": {
                  "summary": "Layout",
                  "description": "This example demonstrates how to create a new layout for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"Composite materials"}
                },
                "Example 12": {
                  "summary": "Layout with Guid",
                  "description": "This example demonstrates how to create a new layout for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database with a specified guid value. Normally, if the guid is not specified, a random new Guid will be generated. ",
                  "value": {"name":"Composite materials (guid)","guid":"5ff5c8d7-b91f-4e37-982e-d98510b969a4"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimLayout"
                },
                "example": {"displayNames":{},"name":"Ceramics","guid":"573bd8f1-fedb-4ff2-90f1-80bd576dbca2"}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Table not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/tables/{table-guid}/layouts/{layout-guid}": {
      "get": {
        "tags": [
          "Schema - Layouts"
        ],
        "summary": "Get a layout with a specified guid for a given database and table.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "layout-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "showFullDetail",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
              "nullable": true
            }
          },
          {
            "name": "X-Ansys-VC-Mode",
            "in": "header",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsLayout"
                },
                "examples": {
                  "Example 11": {
                    "summary": "Layout with 'slim' sections",
                    "description": "This example demonstrated the response to getting a layout with the 'showFullDetail' parameter set to false, which is the default value.",
                    "value": {"sections":[{"sectionDetailType":"slim","displayNames":{"en":"General Properties English Display Name","fr":"General Properties French Display Name"},"name":"General Properties","guid":"b10170ab-ff56-4828-81b8-c4427674ed2f"},{"sectionDetailType":"slim","displayNames":{"en":"Mechanical Properties English Display Name","fr":"Mechanical Properties French Display Name"},"name":"Mechanical Properties","guid":"aa6a7ef2-0e37-40a6-b3eb-11d502408281"}],"propertyNameToStatusMap":null,"displayNames":{"en":"Ceramics English Display Name","fr":"Ceramics French Display Name"},"name":"Ceramics","guid":"00000b36-0009-4fff-8fff-dd92ffff0000"}
                  },
                  "Example 12": {
                    "summary": "Layout with 'full' sections",
                    "description": "This example demonstrated the response to getting a layout with the 'showFullDetail' parameter set to true.",
                    "value": {"sections":[{"sectionDetailType":"full","sectionItems":[{"itemType":"attribute","attributeType":"point","required":false,"readOnly":false,"metaAttributes":[],"underlyingEntityGuid":"0bd9e70a-25c1-4da4-a0f6-9f5615ac35ec","name":"Price","guid":"d86be746-72df-46bd-b21f-93f3cb1f7765"},{"itemType":"attribute","attributeType":"point","required":false,"readOnly":false,"metaAttributes":[],"underlyingEntityGuid":"945cdf2f-a81b-4476-8156-b73dcac6ac11","name":"Density","guid":"f0565b10-55b9-4ffa-a8db-263c8cdfdbd1"}],"displayNames":{"en":"General Properties English Display Name","fr":"General Properties French Display Name"},"name":"General Properties","guid":"b10170ab-ff56-4828-81b8-c4427674ed2f"},{"sectionDetailType":"full","sectionItems":[{"itemType":"attribute","attributeType":"floatFunctional","required":true,"readOnly":false,"metaAttributes":[],"underlyingEntityGuid":"c00df394-0522-47ea-8aaa-42e83db669ca","name":"Young's modulus","guid":"b4857abe-46b2-439a-9ef8-8fdf41aec1f7"},{"itemType":"attribute","attributeType":"range","required":true,"readOnly":false,"metaAttributes":[],"underlyingEntityGuid":"01a1ac38-1c63-4deb-8e7b-fe18c9c4e2de","name":"Tensile strength","guid":"946e4bb4-1737-40bb-a8d5-cd92543eae7f"},{"itemType":"attribute","attributeType":"point","required":true,"readOnly":false,"metaAttributes":[],"underlyingEntityGuid":"38f30698-7b81-4060-9409-a1122e163c12","name":"Shape factor","guid":"1429e689-011d-43aa-840b-3d0e078d4d6d"}],"displayNames":{"en":"Mechanical Properties English Display Name","fr":"Mechanical Properties French Display Name"},"name":"Mechanical Properties","guid":"aa6a7ef2-0e37-40a6-b3eb-11d502408281"}],"propertyNameToStatusMap":null,"displayNames":{"en":"Ceramics English Display Name","fr":"Ceramics French Display Name"},"name":"Ceramics","guid":"00000b36-0009-4fff-8fff-dd92ffff0000"}
                  }
                }
              }
            }
          },
          "404": {
            "description": "Layout not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Schema - Layouts"
        ],
        "summary": "Update a layout.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "layout-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsLayout"
              },
              "examples": {
                "Example 11": {
                  "summary": "Everything for a layout",
                  "description": "This example demonstrates how to update all properties of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"Ceramics (Updated)","guid":"418c9aef-035d-4f0c-a87b-a690e36d7d29"}
                },
                "Example 12": {
                  "summary": "Rename layout",
                  "description": "This example demonstrates how to update the 'Name' property of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"Ceramics (Updated)"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsLayout"
              },
              "examples": {
                "Example 11": {
                  "summary": "Everything for a layout",
                  "description": "This example demonstrates how to update all properties of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"Ceramics (Updated)","guid":"418c9aef-035d-4f0c-a87b-a690e36d7d29"}
                },
                "Example 12": {
                  "summary": "Rename layout",
                  "description": "This example demonstrates how to update the 'Name' property of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"Ceramics (Updated)"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsLayout"
              },
              "examples": {
                "Example 11": {
                  "summary": "Everything for a layout",
                  "description": "This example demonstrates how to update all properties of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"Ceramics (Updated)","guid":"418c9aef-035d-4f0c-a87b-a690e36d7d29"}
                },
                "Example 12": {
                  "summary": "Rename layout",
                  "description": "This example demonstrates how to update the 'Name' property of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"Ceramics (Updated)"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsLayout"
              },
              "examples": {
                "Example 11": {
                  "summary": "Everything for a layout",
                  "description": "This example demonstrates how to update all properties of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"Ceramics (Updated)","guid":"418c9aef-035d-4f0c-a87b-a690e36d7d29"}
                },
                "Example 12": {
                  "summary": "Rename layout",
                  "description": "This example demonstrates how to update the 'Name' property of the 'Ceramics' layout (guid = 00000b36-0009-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"Ceramics (Updated)"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsLayout"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Layout not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Schema - Layouts"
        ],
        "summary": "Delete a layout.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "layout-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Layout not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/parameters": {
      "get": {
        "tags": [
          "Schema - Parameters"
        ],
        "summary": "Get all parameters for a given database.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameter"
                  }
                },
                "examples": {
                  "Example 6": {
                    "summary": "A mix of parameters",
                    "description": "This example contains a mix of numeric and discrete parameters from the MI_Training database.",
                    "value": [{"type":"numeric","isRestricted":false,"unit":{"symbol":"% strain","guid":"0000019b-0013-4fff-8fff-0000ffff0000"},"values":[{"value":0.1,"type":"numeric","isDefault":false,"guid":"173284fb-e557-406f-a7eb-f4e75f1d48a9"},{"value":1.0,"type":"numeric","isDefault":true,"guid":"00000005-000b-4fff-8fff-0005ffff0000"}],"interpolationType":"linear","scaleType":"linear","helpPath":"/help/strain.html","displayNames":{"en":"Strain","fr":"Souche"},"name":"Strain","guid":"00000005-000a-4fff-8fff-0000ffff0000"},{"type":"numeric","isRestricted":false,"values":[{"value":-1.0,"type":"numeric","isDefault":true,"guid":"4c35e5cd-0641-45d1-96d3-bc42076b3a94"},{"value":0.0,"type":"numeric","isDefault":false,"guid":"00000022-000b-4fff-8fff-0022ffff0000"}],"interpolationType":"linear","scaleType":"linear","helpPath":"/help/strain-ratio.html","displayNames":{"en":"Strain Ratio","fr":"Rapport de contrainte"},"name":"Strain Ratio","guid":"00000022-000a-4fff-8fff-0000ffff0000"},{"values":[{"type":"discrete","isDefault":true,"name":"Mean","guid":"21a27377-12eb-413c-bac4-d4ffceda39d1"},{"type":"discrete","isDefault":false,"name":"A-basis","guid":"505b5d32-0a4a-48af-9a7a-90c4caacd35c"},{"type":"discrete","isDefault":false,"name":"B-basis","guid":"9ba94816-6784-4848-bfa6-d24b12597a5b"}],"type":"discrete","helpPath":"/help/basis.html","displayNames":{"en":"Basis","fr":"Base"},"name":"Basis","guid":"7a6ccb7b-8a47-4cab-8203-c741d476560f"}]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "post": {
        "tags": [
          "Schema - Parameters"
        ],
        "summary": "Create a new parameter.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameter"
              },
              "examples": {
                "Example 26": {
                  "summary": "Discrete Parameter",
                  "description": "This example demonstrates how to create a new discrete parameter for the MI_Training database.",
                  "value": {"values":[{"type":"discrete","isDefault":true,"name":"Red"},{"type":"discrete","isDefault":false,"name":"Green"}],"type":"discrete","name":"Colour"}
                },
                "Example 27": {
                  "summary": "Discrete Parameter with Guids",
                  "description": "This example demonstrates how to create a new discrete parameter with a specified guid value for the MI_Training database. Normally, if the guid is not specified, a random new Guid will be generated. Guids can be explicitly set for the individual parameter values, if needed.",
                  "value": {"values":[{"type":"discrete","isDefault":true,"name":"Red","guid":"4befa328-fc62-4419-b6f8-460004eb7d70"},{"type":"discrete","isDefault":false,"name":"Green"}],"type":"discrete","name":"Colour (guid)","guid":"751ce9d1-a952-4935-a7cf-fcb46821708e"}
                },
                "Example 28": {
                  "summary": "Numeric Restricted Parameter",
                  "description": "This example demonstrates how to create a new numeric restricted parameter for the MI_Training database. Note that the IsRestricted flag is set to true.",
                  "value": {"type":"numeric","isRestricted":true,"values":[{"value":2010.0,"type":"numeric","isDefault":true,"name":"Twenty Ten"},{"value":2015.0,"type":"numeric","isDefault":false},{"value":2020.0,"type":"numeric","isDefault":false,"name":"Twenty Twenty"}],"interpolationType":"none","scaleType":"linear","name":"Year"}
                },
                "Example 29": {
                  "summary": "Numeric Restricted Parameter with Unit",
                  "description": "This example demonstrates how to create a new numeric restricted parameter which also has the 'centimetre' unit from the MI_Training database. Note that the IsRestricted flag is set to true. Only the unit guid is required to reference a unit.",
                  "value": {"type":"numeric","isRestricted":true,"unit":{"guid":"00000099-0013-4fff-8fff-0000ffff0000"},"values":[{"value":10.0,"type":"numeric","isDefault":true,"name":"Small box"},{"value":20.0,"type":"numeric","isDefault":false},{"value":30.0,"type":"numeric","isDefault":false,"name":"Big box"}],"interpolationType":"none","scaleType":"linear","name":"Box dimension"}
                },
                "Example 30": {
                  "summary": "Numeric Unrestricted Parameter with Unit",
                  "description": "This example demonstrates how to create a new numeric unrestricted parameter which also has the 'Temperature (Kelvin/Celsius)' unit from the MI_Training database. The IsRestricted flag can either be explicitly set to false or omitted. Pre-defined parameter values can still be specified, but the parameter will not be restricted to them.",
                  "value": {"type":"numeric","isRestricted":false,"unit":{"guid":"00000002-0013-4fff-8fff-0000ffff0000"},"values":[{"value":10.0,"type":"numeric","isDefault":true,"name":"Cold"},{"value":20.0,"type":"numeric","isDefault":false},{"value":30.0,"type":"numeric","isDefault":false,"name":"Hot"}],"interpolationType":"cubicSpline","scaleType":"logarithmic","helpPath":"/help/outside-temperature.html","name":"Outside Temperature"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameter"
              },
              "examples": {
                "Example 26": {
                  "summary": "Discrete Parameter",
                  "description": "This example demonstrates how to create a new discrete parameter for the MI_Training database.",
                  "value": {"values":[{"type":"discrete","isDefault":true,"name":"Red"},{"type":"discrete","isDefault":false,"name":"Green"}],"type":"discrete","name":"Colour"}
                },
                "Example 27": {
                  "summary": "Discrete Parameter with Guids",
                  "description": "This example demonstrates how to create a new discrete parameter with a specified guid value for the MI_Training database. Normally, if the guid is not specified, a random new Guid will be generated. Guids can be explicitly set for the individual parameter values, if needed.",
                  "value": {"values":[{"type":"discrete","isDefault":true,"name":"Red","guid":"4befa328-fc62-4419-b6f8-460004eb7d70"},{"type":"discrete","isDefault":false,"name":"Green"}],"type":"discrete","name":"Colour (guid)","guid":"751ce9d1-a952-4935-a7cf-fcb46821708e"}
                },
                "Example 28": {
                  "summary": "Numeric Restricted Parameter",
                  "description": "This example demonstrates how to create a new numeric restricted parameter for the MI_Training database. Note that the IsRestricted flag is set to true.",
                  "value": {"type":"numeric","isRestricted":true,"values":[{"value":2010.0,"type":"numeric","isDefault":true,"name":"Twenty Ten"},{"value":2015.0,"type":"numeric","isDefault":false},{"value":2020.0,"type":"numeric","isDefault":false,"name":"Twenty Twenty"}],"interpolationType":"none","scaleType":"linear","name":"Year"}
                },
                "Example 29": {
                  "summary": "Numeric Restricted Parameter with Unit",
                  "description": "This example demonstrates how to create a new numeric restricted parameter which also has the 'centimetre' unit from the MI_Training database. Note that the IsRestricted flag is set to true. Only the unit guid is required to reference a unit.",
                  "value": {"type":"numeric","isRestricted":true,"unit":{"guid":"00000099-0013-4fff-8fff-0000ffff0000"},"values":[{"value":10.0,"type":"numeric","isDefault":true,"name":"Small box"},{"value":20.0,"type":"numeric","isDefault":false},{"value":30.0,"type":"numeric","isDefault":false,"name":"Big box"}],"interpolationType":"none","scaleType":"linear","name":"Box dimension"}
                },
                "Example 30": {
                  "summary": "Numeric Unrestricted Parameter with Unit",
                  "description": "This example demonstrates how to create a new numeric unrestricted parameter which also has the 'Temperature (Kelvin/Celsius)' unit from the MI_Training database. The IsRestricted flag can either be explicitly set to false or omitted. Pre-defined parameter values can still be specified, but the parameter will not be restricted to them.",
                  "value": {"type":"numeric","isRestricted":false,"unit":{"guid":"00000002-0013-4fff-8fff-0000ffff0000"},"values":[{"value":10.0,"type":"numeric","isDefault":true,"name":"Cold"},{"value":20.0,"type":"numeric","isDefault":false},{"value":30.0,"type":"numeric","isDefault":false,"name":"Hot"}],"interpolationType":"cubicSpline","scaleType":"logarithmic","helpPath":"/help/outside-temperature.html","name":"Outside Temperature"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameter"
              },
              "examples": {
                "Example 26": {
                  "summary": "Discrete Parameter",
                  "description": "This example demonstrates how to create a new discrete parameter for the MI_Training database.",
                  "value": {"values":[{"type":"discrete","isDefault":true,"name":"Red"},{"type":"discrete","isDefault":false,"name":"Green"}],"type":"discrete","name":"Colour"}
                },
                "Example 27": {
                  "summary": "Discrete Parameter with Guids",
                  "description": "This example demonstrates how to create a new discrete parameter with a specified guid value for the MI_Training database. Normally, if the guid is not specified, a random new Guid will be generated. Guids can be explicitly set for the individual parameter values, if needed.",
                  "value": {"values":[{"type":"discrete","isDefault":true,"name":"Red","guid":"4befa328-fc62-4419-b6f8-460004eb7d70"},{"type":"discrete","isDefault":false,"name":"Green"}],"type":"discrete","name":"Colour (guid)","guid":"751ce9d1-a952-4935-a7cf-fcb46821708e"}
                },
                "Example 28": {
                  "summary": "Numeric Restricted Parameter",
                  "description": "This example demonstrates how to create a new numeric restricted parameter for the MI_Training database. Note that the IsRestricted flag is set to true.",
                  "value": {"type":"numeric","isRestricted":true,"values":[{"value":2010.0,"type":"numeric","isDefault":true,"name":"Twenty Ten"},{"value":2015.0,"type":"numeric","isDefault":false},{"value":2020.0,"type":"numeric","isDefault":false,"name":"Twenty Twenty"}],"interpolationType":"none","scaleType":"linear","name":"Year"}
                },
                "Example 29": {
                  "summary": "Numeric Restricted Parameter with Unit",
                  "description": "This example demonstrates how to create a new numeric restricted parameter which also has the 'centimetre' unit from the MI_Training database. Note that the IsRestricted flag is set to true. Only the unit guid is required to reference a unit.",
                  "value": {"type":"numeric","isRestricted":true,"unit":{"guid":"00000099-0013-4fff-8fff-0000ffff0000"},"values":[{"value":10.0,"type":"numeric","isDefault":true,"name":"Small box"},{"value":20.0,"type":"numeric","isDefault":false},{"value":30.0,"type":"numeric","isDefault":false,"name":"Big box"}],"interpolationType":"none","scaleType":"linear","name":"Box dimension"}
                },
                "Example 30": {
                  "summary": "Numeric Unrestricted Parameter with Unit",
                  "description": "This example demonstrates how to create a new numeric unrestricted parameter which also has the 'Temperature (Kelvin/Celsius)' unit from the MI_Training database. The IsRestricted flag can either be explicitly set to false or omitted. Pre-defined parameter values can still be specified, but the parameter will not be restricted to them.",
                  "value": {"type":"numeric","isRestricted":false,"unit":{"guid":"00000002-0013-4fff-8fff-0000ffff0000"},"values":[{"value":10.0,"type":"numeric","isDefault":true,"name":"Cold"},{"value":20.0,"type":"numeric","isDefault":false},{"value":30.0,"type":"numeric","isDefault":false,"name":"Hot"}],"interpolationType":"cubicSpline","scaleType":"logarithmic","helpPath":"/help/outside-temperature.html","name":"Outside Temperature"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameter"
              },
              "examples": {
                "Example 26": {
                  "summary": "Discrete Parameter",
                  "description": "This example demonstrates how to create a new discrete parameter for the MI_Training database.",
                  "value": {"values":[{"type":"discrete","isDefault":true,"name":"Red"},{"type":"discrete","isDefault":false,"name":"Green"}],"type":"discrete","name":"Colour"}
                },
                "Example 27": {
                  "summary": "Discrete Parameter with Guids",
                  "description": "This example demonstrates how to create a new discrete parameter with a specified guid value for the MI_Training database. Normally, if the guid is not specified, a random new Guid will be generated. Guids can be explicitly set for the individual parameter values, if needed.",
                  "value": {"values":[{"type":"discrete","isDefault":true,"name":"Red","guid":"4befa328-fc62-4419-b6f8-460004eb7d70"},{"type":"discrete","isDefault":false,"name":"Green"}],"type":"discrete","name":"Colour (guid)","guid":"751ce9d1-a952-4935-a7cf-fcb46821708e"}
                },
                "Example 28": {
                  "summary": "Numeric Restricted Parameter",
                  "description": "This example demonstrates how to create a new numeric restricted parameter for the MI_Training database. Note that the IsRestricted flag is set to true.",
                  "value": {"type":"numeric","isRestricted":true,"values":[{"value":2010.0,"type":"numeric","isDefault":true,"name":"Twenty Ten"},{"value":2015.0,"type":"numeric","isDefault":false},{"value":2020.0,"type":"numeric","isDefault":false,"name":"Twenty Twenty"}],"interpolationType":"none","scaleType":"linear","name":"Year"}
                },
                "Example 29": {
                  "summary": "Numeric Restricted Parameter with Unit",
                  "description": "This example demonstrates how to create a new numeric restricted parameter which also has the 'centimetre' unit from the MI_Training database. Note that the IsRestricted flag is set to true. Only the unit guid is required to reference a unit.",
                  "value": {"type":"numeric","isRestricted":true,"unit":{"guid":"00000099-0013-4fff-8fff-0000ffff0000"},"values":[{"value":10.0,"type":"numeric","isDefault":true,"name":"Small box"},{"value":20.0,"type":"numeric","isDefault":false},{"value":30.0,"type":"numeric","isDefault":false,"name":"Big box"}],"interpolationType":"none","scaleType":"linear","name":"Box dimension"}
                },
                "Example 30": {
                  "summary": "Numeric Unrestricted Parameter with Unit",
                  "description": "This example demonstrates how to create a new numeric unrestricted parameter which also has the 'Temperature (Kelvin/Celsius)' unit from the MI_Training database. The IsRestricted flag can either be explicitly set to false or omitted. Pre-defined parameter values can still be specified, but the parameter will not be restricted to them.",
                  "value": {"type":"numeric","isRestricted":false,"unit":{"guid":"00000002-0013-4fff-8fff-0000ffff0000"},"values":[{"value":10.0,"type":"numeric","isDefault":true,"name":"Cold"},{"value":20.0,"type":"numeric","isDefault":false},{"value":30.0,"type":"numeric","isDefault":false,"name":"Hot"}],"interpolationType":"cubicSpline","scaleType":"logarithmic","helpPath":"/help/outside-temperature.html","name":"Outside Temperature"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/parameters/{parameter-guid}": {
      "get": {
        "tags": [
          "Schema - Parameters"
        ],
        "summary": "Get a parameter with a specified guid for a given database.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "parameter-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameter"
                },
                "example": {"type":"numeric","isRestricted":false,"unit":{"symbol":"% strain","guid":"0000019b-0013-4fff-8fff-0000ffff0000"},"values":[{"value":0.1,"type":"numeric","isDefault":false,"guid":"173284fb-e557-406f-a7eb-f4e75f1d48a9"},{"value":1.0,"type":"numeric","isDefault":true,"guid":"00000005-000b-4fff-8fff-0005ffff0000"}],"interpolationType":"linear","scaleType":"linear","helpPath":"/help/Strain.html","displayNames":{"en":"Strain","fr":"Souche"},"name":"Strain","guid":"00000005-000a-4fff-8fff-0000ffff0000"}
              }
            }
          },
          "404": {
            "description": "Parameter not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Schema - Parameters"
        ],
        "summary": "Update a parameter.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "parameter-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameter"
              },
              "examples": {
                "Example 36": {
                  "summary": "Everything for a numeric parameter",
                  "description": "This example shows how to update all properties of the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database. Its Unit will be changed to kg.",
                  "value": {"type":"numeric","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"},"interpolationType":"cubicSpline","scaleType":"logarithmic","helpPath":"help/strain-updated.html","name":"Strain (Updated)","guid":"8e1b337f-3227-470d-8ccf-62cb561ac0a5"}
                },
                "Example 37": {
                  "summary": "Everything for a discrete parameter",
                  "description": "This example shows how to update all properties of the 'Basis' discrete parameter (guid = 7a6ccb7b-8a47-4cab-8203-c741d476560f) from the MI_Training database.",
                  "value": {"type":"discrete","helpPath":"help/basis-updated.html","name":"Basis (Updated)","guid":"cc3dbfcc-af4f-4c8c-aa43-1f94493c29c1"}
                },
                "Example 38": {
                  "summary": "Update Guid",
                  "description": "This example demonstrates how to update the 'Guid' property of the 'Strain' parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database. Guid can be updated for both kinds of parameters.",
                  "value": {"type":"numeric","guid":"ae2c11e4-5704-4c3f-9c05-02af927b4f43"}
                },
                "Example 39": {
                  "summary": "Update Name",
                  "description": "This example demonstrates how to update the 'Name' property of the 'Strain' parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database. Name can be updated for both kinds of parameters.",
                  "value": {"type":"discrete","name":"Strain (Updated)"}
                },
                "Example 40": {
                  "summary": "Update Guid and Unit",
                  "description": "This example demonstrates how to update the 'Guid' and 'Unit' properties of the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database. Its Unit will be changed to kg. Only numeric parameters have units.",
                  "value": {"type":"numeric","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"},"guid":"4eae80cf-2610-4a87-bc61-9352dd4c75ac"}
                },
                "Example 41": {
                  "summary": "Remove Unit",
                  "description": "This example demonstrates how to remove the 'Unit' property of the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database by setting it to null.",
                  "value": {"type":"numeric","unit":null}
                },
                "Example 42": {
                  "summary": "Change interpolation and scale type",
                  "description": "This example demonstrates how to update the interpolation type and scale type of the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database. The parameter must be a numeric parameter.",
                  "value": {"type":"numeric","interpolationType":"cubicSpline","scaleType":"logarithmic"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameter"
              },
              "examples": {
                "Example 36": {
                  "summary": "Everything for a numeric parameter",
                  "description": "This example shows how to update all properties of the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database. Its Unit will be changed to kg.",
                  "value": {"type":"numeric","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"},"interpolationType":"cubicSpline","scaleType":"logarithmic","helpPath":"help/strain-updated.html","name":"Strain (Updated)","guid":"8e1b337f-3227-470d-8ccf-62cb561ac0a5"}
                },
                "Example 37": {
                  "summary": "Everything for a discrete parameter",
                  "description": "This example shows how to update all properties of the 'Basis' discrete parameter (guid = 7a6ccb7b-8a47-4cab-8203-c741d476560f) from the MI_Training database.",
                  "value": {"type":"discrete","helpPath":"help/basis-updated.html","name":"Basis (Updated)","guid":"cc3dbfcc-af4f-4c8c-aa43-1f94493c29c1"}
                },
                "Example 38": {
                  "summary": "Update Guid",
                  "description": "This example demonstrates how to update the 'Guid' property of the 'Strain' parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database. Guid can be updated for both kinds of parameters.",
                  "value": {"type":"numeric","guid":"ae2c11e4-5704-4c3f-9c05-02af927b4f43"}
                },
                "Example 39": {
                  "summary": "Update Name",
                  "description": "This example demonstrates how to update the 'Name' property of the 'Strain' parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database. Name can be updated for both kinds of parameters.",
                  "value": {"type":"discrete","name":"Strain (Updated)"}
                },
                "Example 40": {
                  "summary": "Update Guid and Unit",
                  "description": "This example demonstrates how to update the 'Guid' and 'Unit' properties of the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database. Its Unit will be changed to kg. Only numeric parameters have units.",
                  "value": {"type":"numeric","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"},"guid":"4eae80cf-2610-4a87-bc61-9352dd4c75ac"}
                },
                "Example 41": {
                  "summary": "Remove Unit",
                  "description": "This example demonstrates how to remove the 'Unit' property of the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database by setting it to null.",
                  "value": {"type":"numeric","unit":null}
                },
                "Example 42": {
                  "summary": "Change interpolation and scale type",
                  "description": "This example demonstrates how to update the interpolation type and scale type of the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database. The parameter must be a numeric parameter.",
                  "value": {"type":"numeric","interpolationType":"cubicSpline","scaleType":"logarithmic"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameter"
              },
              "examples": {
                "Example 36": {
                  "summary": "Everything for a numeric parameter",
                  "description": "This example shows how to update all properties of the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database. Its Unit will be changed to kg.",
                  "value": {"type":"numeric","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"},"interpolationType":"cubicSpline","scaleType":"logarithmic","helpPath":"help/strain-updated.html","name":"Strain (Updated)","guid":"8e1b337f-3227-470d-8ccf-62cb561ac0a5"}
                },
                "Example 37": {
                  "summary": "Everything for a discrete parameter",
                  "description": "This example shows how to update all properties of the 'Basis' discrete parameter (guid = 7a6ccb7b-8a47-4cab-8203-c741d476560f) from the MI_Training database.",
                  "value": {"type":"discrete","helpPath":"help/basis-updated.html","name":"Basis (Updated)","guid":"cc3dbfcc-af4f-4c8c-aa43-1f94493c29c1"}
                },
                "Example 38": {
                  "summary": "Update Guid",
                  "description": "This example demonstrates how to update the 'Guid' property of the 'Strain' parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database. Guid can be updated for both kinds of parameters.",
                  "value": {"type":"numeric","guid":"ae2c11e4-5704-4c3f-9c05-02af927b4f43"}
                },
                "Example 39": {
                  "summary": "Update Name",
                  "description": "This example demonstrates how to update the 'Name' property of the 'Strain' parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database. Name can be updated for both kinds of parameters.",
                  "value": {"type":"discrete","name":"Strain (Updated)"}
                },
                "Example 40": {
                  "summary": "Update Guid and Unit",
                  "description": "This example demonstrates how to update the 'Guid' and 'Unit' properties of the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database. Its Unit will be changed to kg. Only numeric parameters have units.",
                  "value": {"type":"numeric","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"},"guid":"4eae80cf-2610-4a87-bc61-9352dd4c75ac"}
                },
                "Example 41": {
                  "summary": "Remove Unit",
                  "description": "This example demonstrates how to remove the 'Unit' property of the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database by setting it to null.",
                  "value": {"type":"numeric","unit":null}
                },
                "Example 42": {
                  "summary": "Change interpolation and scale type",
                  "description": "This example demonstrates how to update the interpolation type and scale type of the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database. The parameter must be a numeric parameter.",
                  "value": {"type":"numeric","interpolationType":"cubicSpline","scaleType":"logarithmic"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameter"
              },
              "examples": {
                "Example 36": {
                  "summary": "Everything for a numeric parameter",
                  "description": "This example shows how to update all properties of the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database. Its Unit will be changed to kg.",
                  "value": {"type":"numeric","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"},"interpolationType":"cubicSpline","scaleType":"logarithmic","helpPath":"help/strain-updated.html","name":"Strain (Updated)","guid":"8e1b337f-3227-470d-8ccf-62cb561ac0a5"}
                },
                "Example 37": {
                  "summary": "Everything for a discrete parameter",
                  "description": "This example shows how to update all properties of the 'Basis' discrete parameter (guid = 7a6ccb7b-8a47-4cab-8203-c741d476560f) from the MI_Training database.",
                  "value": {"type":"discrete","helpPath":"help/basis-updated.html","name":"Basis (Updated)","guid":"cc3dbfcc-af4f-4c8c-aa43-1f94493c29c1"}
                },
                "Example 38": {
                  "summary": "Update Guid",
                  "description": "This example demonstrates how to update the 'Guid' property of the 'Strain' parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database. Guid can be updated for both kinds of parameters.",
                  "value": {"type":"numeric","guid":"ae2c11e4-5704-4c3f-9c05-02af927b4f43"}
                },
                "Example 39": {
                  "summary": "Update Name",
                  "description": "This example demonstrates how to update the 'Name' property of the 'Strain' parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database. Name can be updated for both kinds of parameters.",
                  "value": {"type":"discrete","name":"Strain (Updated)"}
                },
                "Example 40": {
                  "summary": "Update Guid and Unit",
                  "description": "This example demonstrates how to update the 'Guid' and 'Unit' properties of the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database. Its Unit will be changed to kg. Only numeric parameters have units.",
                  "value": {"type":"numeric","unit":{"guid":"0000007a-0013-4fff-8fff-0000ffff0000"},"guid":"4eae80cf-2610-4a87-bc61-9352dd4c75ac"}
                },
                "Example 41": {
                  "summary": "Remove Unit",
                  "description": "This example demonstrates how to remove the 'Unit' property of the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database by setting it to null.",
                  "value": {"type":"numeric","unit":null}
                },
                "Example 42": {
                  "summary": "Change interpolation and scale type",
                  "description": "This example demonstrates how to update the interpolation type and scale type of the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database. The parameter must be a numeric parameter.",
                  "value": {"type":"numeric","interpolationType":"cubicSpline","scaleType":"logarithmic"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameter"
                },
                "example": {"type":"numeric","isRestricted":false,"unit":{"symbol":"% strain","guid":"0000019b-0013-4fff-8fff-0000ffff0000"},"values":[{"value":0.1,"type":"numeric","isDefault":false,"guid":"173284fb-e557-406f-a7eb-f4e75f1d48a9"},{"value":1.0,"type":"numeric","isDefault":true,"guid":"00000005-000b-4fff-8fff-0005ffff0000"}],"interpolationType":"linear","scaleType":"linear","helpPath":"/help/Strain.html","displayNames":{"en":"Strain","fr":"Souche"},"name":"Strain","guid":"00000005-000a-4fff-8fff-0000ffff0000"}
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Schema - Parameters"
        ],
        "summary": "Delete a parameter.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "parameter-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad request. Parameter in use."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Database not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/parameters/{parameter-guid}:usages": {
      "get": {
        "tags": [
          "Schema - Parameters"
        ],
        "summary": "Get attributes which currently use the given parameter.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "parameter-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimObjects"
                }
              }
            }
          },
          "404": {
            "description": "Database not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/parameters/{parameter-guid}/parameter-values": {
      "post": {
        "tags": [
          "Schema - Parameters"
        ],
        "summary": "Create a new parameter value.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "parameter-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameterValue"
              },
              "examples": {
                "Example 11": {
                  "summary": "Numeric parameter value",
                  "description": "This example demonstrates how to create a new numeric parameter value for the 'Temperature' numeric parameter (guid = 00000001-000a-4fff-8fff-0000ffff0000) from the MI_Training database. Setting the IsDefault flag to true means that the default value of the parameter will be changed to the newly created value.",
                  "value": {"value":10.0,"type":"numeric","isDefault":true,"name":"Cold"}
                },
                "Example 12": {
                  "summary": "Discrete parameter value",
                  "description": "This example demonstrates how to create a new discrete parameter value for the 'Chemical Environment' discrete parameter (guid = b7cee874-160f-439a-a784-b887c516b2d5) from the MI_Training database.",
                  "value": {"type":"discrete","isDefault":false,"name":"Heavy water"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameterValue"
              },
              "examples": {
                "Example 11": {
                  "summary": "Numeric parameter value",
                  "description": "This example demonstrates how to create a new numeric parameter value for the 'Temperature' numeric parameter (guid = 00000001-000a-4fff-8fff-0000ffff0000) from the MI_Training database. Setting the IsDefault flag to true means that the default value of the parameter will be changed to the newly created value.",
                  "value": {"value":10.0,"type":"numeric","isDefault":true,"name":"Cold"}
                },
                "Example 12": {
                  "summary": "Discrete parameter value",
                  "description": "This example demonstrates how to create a new discrete parameter value for the 'Chemical Environment' discrete parameter (guid = b7cee874-160f-439a-a784-b887c516b2d5) from the MI_Training database.",
                  "value": {"type":"discrete","isDefault":false,"name":"Heavy water"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameterValue"
              },
              "examples": {
                "Example 11": {
                  "summary": "Numeric parameter value",
                  "description": "This example demonstrates how to create a new numeric parameter value for the 'Temperature' numeric parameter (guid = 00000001-000a-4fff-8fff-0000ffff0000) from the MI_Training database. Setting the IsDefault flag to true means that the default value of the parameter will be changed to the newly created value.",
                  "value": {"value":10.0,"type":"numeric","isDefault":true,"name":"Cold"}
                },
                "Example 12": {
                  "summary": "Discrete parameter value",
                  "description": "This example demonstrates how to create a new discrete parameter value for the 'Chemical Environment' discrete parameter (guid = b7cee874-160f-439a-a784-b887c516b2d5) from the MI_Training database.",
                  "value": {"type":"discrete","isDefault":false,"name":"Heavy water"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameterValue"
              },
              "examples": {
                "Example 11": {
                  "summary": "Numeric parameter value",
                  "description": "This example demonstrates how to create a new numeric parameter value for the 'Temperature' numeric parameter (guid = 00000001-000a-4fff-8fff-0000ffff0000) from the MI_Training database. Setting the IsDefault flag to true means that the default value of the parameter will be changed to the newly created value.",
                  "value": {"value":10.0,"type":"numeric","isDefault":true,"name":"Cold"}
                },
                "Example 12": {
                  "summary": "Discrete parameter value",
                  "description": "This example demonstrates how to create a new discrete parameter value for the 'Chemical Environment' discrete parameter (guid = b7cee874-160f-439a-a784-b887c516b2d5) from the MI_Training database.",
                  "value": {"type":"discrete","isDefault":false,"name":"Heavy water"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request. Parameter in use."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "put": {
        "tags": [
          "Schema - Parameters"
        ],
        "summary": "Replace the whole parameter value collection for a given parameter.\r\nThis will result in adding, modifying and deleting parameter values. If any of those operations fail, the whole operation fails.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "parameter-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameterValue"
                },
                "nullable": true
              },
              "examples": {
                "Example 21": {
                  "summary": "Replace numeric parameter values",
                  "description": "This example demonstrates how to replace the parameter values for the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database. Guids will be used to match against existing values. If no guid is specified, it will be assumed it is a new parameter value.",
                  "value": [{"value":10.0,"type":"numeric","isDefault":true,"name":"Strain Value (Updated)","guid":"173284fb-e557-406f-a7eb-f4e75f1d48a9"},{"value":5.0,"type":"numeric","isDefault":false,"name":"Strain Value (Added)"}]
                },
                "Example 22": {
                  "summary": "Replace discrete parameter values",
                  "description": "This example demonstrates how to replace the parameter values for the 'Basis' discrete parameter (guid = 7a6ccb7b-8a47-4cab-8203-c741d476560f) from the MI_Training database. Guids will be used to match against existing values. If no guid is specified, it will be assumed it is a new parameter value.",
                  "value": [{"type":"discrete","isDefault":false,"name":"Mean (Updated)","guid":"21a27377-12eb-413c-bac4-d4ffceda39d1"},{"type":"discrete","isDefault":true,"name":"A-basis (Updated)","guid":"505b5d32-0a4a-48af-9a7a-90c4caacd35c"},{"type":"discrete","isDefault":false,"name":"Basis Value (Added)"}]
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameterValue"
                },
                "nullable": true
              },
              "examples": {
                "Example 21": {
                  "summary": "Replace numeric parameter values",
                  "description": "This example demonstrates how to replace the parameter values for the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database. Guids will be used to match against existing values. If no guid is specified, it will be assumed it is a new parameter value.",
                  "value": [{"value":10.0,"type":"numeric","isDefault":true,"name":"Strain Value (Updated)","guid":"173284fb-e557-406f-a7eb-f4e75f1d48a9"},{"value":5.0,"type":"numeric","isDefault":false,"name":"Strain Value (Added)"}]
                },
                "Example 22": {
                  "summary": "Replace discrete parameter values",
                  "description": "This example demonstrates how to replace the parameter values for the 'Basis' discrete parameter (guid = 7a6ccb7b-8a47-4cab-8203-c741d476560f) from the MI_Training database. Guids will be used to match against existing values. If no guid is specified, it will be assumed it is a new parameter value.",
                  "value": [{"type":"discrete","isDefault":false,"name":"Mean (Updated)","guid":"21a27377-12eb-413c-bac4-d4ffceda39d1"},{"type":"discrete","isDefault":true,"name":"A-basis (Updated)","guid":"505b5d32-0a4a-48af-9a7a-90c4caacd35c"},{"type":"discrete","isDefault":false,"name":"Basis Value (Added)"}]
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameterValue"
                },
                "nullable": true
              },
              "examples": {
                "Example 21": {
                  "summary": "Replace numeric parameter values",
                  "description": "This example demonstrates how to replace the parameter values for the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database. Guids will be used to match against existing values. If no guid is specified, it will be assumed it is a new parameter value.",
                  "value": [{"value":10.0,"type":"numeric","isDefault":true,"name":"Strain Value (Updated)","guid":"173284fb-e557-406f-a7eb-f4e75f1d48a9"},{"value":5.0,"type":"numeric","isDefault":false,"name":"Strain Value (Added)"}]
                },
                "Example 22": {
                  "summary": "Replace discrete parameter values",
                  "description": "This example demonstrates how to replace the parameter values for the 'Basis' discrete parameter (guid = 7a6ccb7b-8a47-4cab-8203-c741d476560f) from the MI_Training database. Guids will be used to match against existing values. If no guid is specified, it will be assumed it is a new parameter value.",
                  "value": [{"type":"discrete","isDefault":false,"name":"Mean (Updated)","guid":"21a27377-12eb-413c-bac4-d4ffceda39d1"},{"type":"discrete","isDefault":true,"name":"A-basis (Updated)","guid":"505b5d32-0a4a-48af-9a7a-90c4caacd35c"},{"type":"discrete","isDefault":false,"name":"Basis Value (Added)"}]
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameterValue"
                },
                "nullable": true
              },
              "examples": {
                "Example 21": {
                  "summary": "Replace numeric parameter values",
                  "description": "This example demonstrates how to replace the parameter values for the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database. Guids will be used to match against existing values. If no guid is specified, it will be assumed it is a new parameter value.",
                  "value": [{"value":10.0,"type":"numeric","isDefault":true,"name":"Strain Value (Updated)","guid":"173284fb-e557-406f-a7eb-f4e75f1d48a9"},{"value":5.0,"type":"numeric","isDefault":false,"name":"Strain Value (Added)"}]
                },
                "Example 22": {
                  "summary": "Replace discrete parameter values",
                  "description": "This example demonstrates how to replace the parameter values for the 'Basis' discrete parameter (guid = 7a6ccb7b-8a47-4cab-8203-c741d476560f) from the MI_Training database. Guids will be used to match against existing values. If no guid is specified, it will be assumed it is a new parameter value.",
                  "value": [{"type":"discrete","isDefault":false,"name":"Mean (Updated)","guid":"21a27377-12eb-413c-bac4-d4ffceda39d1"},{"type":"discrete","isDefault":true,"name":"A-basis (Updated)","guid":"505b5d32-0a4a-48af-9a7a-90c4caacd35c"},{"type":"discrete","isDefault":false,"name":"Basis Value (Added)"}]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameterValue"
                  }
                },
                "examples": {
                  "Example 23": {
                    "summary": "Replace numeric parameter values",
                    "description": "This example demonstrates how to replace the parameter values for the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database. Guids will be used to match against existing values. If no guid is specified, it will be assumed it is a new parameter value.",
                    "value": [{"value":10.0,"type":"numeric","isDefault":true,"name":"Strain Value (Updated)","guid":"173284fb-e557-406f-a7eb-f4e75f1d48a9"},{"value":5.0,"type":"numeric","isDefault":false,"name":"Strain Value (Added)"}]
                  },
                  "Example 24": {
                    "summary": "Replace discrete parameter values",
                    "description": "This example demonstrates how to replace the parameter values for the 'Basis' discrete parameter (guid = 7a6ccb7b-8a47-4cab-8203-c741d476560f) from the MI_Training database. Guids will be used to match against existing values. If no guid is specified, it will be assumed it is a new parameter value.",
                    "value": [{"type":"discrete","isDefault":false,"name":"Mean (Updated)","guid":"21a27377-12eb-413c-bac4-d4ffceda39d1"},{"type":"discrete","isDefault":true,"name":"A-basis (Updated)","guid":"505b5d32-0a4a-48af-9a7a-90c4caacd35c"},{"type":"discrete","isDefault":false,"name":"Basis Value (Added)"}]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database or Parameter not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/parameters/{parameter-guid}/parameter-values/{parameter-value-guid}": {
      "patch": {
        "tags": [
          "Schema - Parameters"
        ],
        "summary": "Update a parameter value.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "parameter-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "parameter-value-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameterValue"
              },
              "examples": {
                "Example 21": {
                  "summary": "Update numeric parameter value",
                  "description": "This example demonstrates how to update all properties of the 'Strain 0.1' numeric parameter value (guid = 173284fb-e557-406f-a7eb-f4e75f1d48a9) from the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"value":10.0,"type":"numeric","isDefault":false,"name":"Strain 0.1 (Updated)","guid":"61570cd1-f8a6-43b3-a206-247f8c35c4f0"}
                },
                "Example 22": {
                  "summary": "Update discrete parameter value",
                  "description": "This example demonstrates how to update all properties of the 'Mean' discrete parameter value (guid = 21a27377-12eb-413c-bac4-d4ffceda39d1) from the 'Basis' numeric parameter (guid = 7a6ccb7b-8a47-4cab-8203-c741d476560f) from the MI_Training database.",
                  "value": {"type":"discrete","isDefault":false,"name":"Mean (Updated)","guid":"2df917dc-7b75-4b6a-9d8e-aa19c2857d3e"}
                },
                "Example 23": {
                  "summary": "Make default discrete",
                  "description": "This example demonstrates how to make the 'A-basis' discrete parameter value (guid = 505b5d32-0a4a-48af-9a7a-90c4caacd35c) from the 'Basis' discrete parameter (guid = 7a6ccb7b-8a47-4cab-8203-c741d476560f) from the MI_Training database default using a PATCH request.",
                  "value": {"type":"discrete","isDefault":true}
                },
                "Example 24": {
                  "summary": "Change guid of numeric",
                  "description": "This example demonstrates how to update guid of the 'Strain 0.1' numeric parameter value (guid = 173284fb-e557-406f-a7eb-f4e75f1d48a9) from the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database using a PATCH request.",
                  "value": {"type":"numeric","guid":"6bc405b8-979f-4244-97f8-b179d5bcd316"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameterValue"
              },
              "examples": {
                "Example 21": {
                  "summary": "Update numeric parameter value",
                  "description": "This example demonstrates how to update all properties of the 'Strain 0.1' numeric parameter value (guid = 173284fb-e557-406f-a7eb-f4e75f1d48a9) from the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"value":10.0,"type":"numeric","isDefault":false,"name":"Strain 0.1 (Updated)","guid":"61570cd1-f8a6-43b3-a206-247f8c35c4f0"}
                },
                "Example 22": {
                  "summary": "Update discrete parameter value",
                  "description": "This example demonstrates how to update all properties of the 'Mean' discrete parameter value (guid = 21a27377-12eb-413c-bac4-d4ffceda39d1) from the 'Basis' numeric parameter (guid = 7a6ccb7b-8a47-4cab-8203-c741d476560f) from the MI_Training database.",
                  "value": {"type":"discrete","isDefault":false,"name":"Mean (Updated)","guid":"2df917dc-7b75-4b6a-9d8e-aa19c2857d3e"}
                },
                "Example 23": {
                  "summary": "Make default discrete",
                  "description": "This example demonstrates how to make the 'A-basis' discrete parameter value (guid = 505b5d32-0a4a-48af-9a7a-90c4caacd35c) from the 'Basis' discrete parameter (guid = 7a6ccb7b-8a47-4cab-8203-c741d476560f) from the MI_Training database default using a PATCH request.",
                  "value": {"type":"discrete","isDefault":true}
                },
                "Example 24": {
                  "summary": "Change guid of numeric",
                  "description": "This example demonstrates how to update guid of the 'Strain 0.1' numeric parameter value (guid = 173284fb-e557-406f-a7eb-f4e75f1d48a9) from the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database using a PATCH request.",
                  "value": {"type":"numeric","guid":"6bc405b8-979f-4244-97f8-b179d5bcd316"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameterValue"
              },
              "examples": {
                "Example 21": {
                  "summary": "Update numeric parameter value",
                  "description": "This example demonstrates how to update all properties of the 'Strain 0.1' numeric parameter value (guid = 173284fb-e557-406f-a7eb-f4e75f1d48a9) from the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"value":10.0,"type":"numeric","isDefault":false,"name":"Strain 0.1 (Updated)","guid":"61570cd1-f8a6-43b3-a206-247f8c35c4f0"}
                },
                "Example 22": {
                  "summary": "Update discrete parameter value",
                  "description": "This example demonstrates how to update all properties of the 'Mean' discrete parameter value (guid = 21a27377-12eb-413c-bac4-d4ffceda39d1) from the 'Basis' numeric parameter (guid = 7a6ccb7b-8a47-4cab-8203-c741d476560f) from the MI_Training database.",
                  "value": {"type":"discrete","isDefault":false,"name":"Mean (Updated)","guid":"2df917dc-7b75-4b6a-9d8e-aa19c2857d3e"}
                },
                "Example 23": {
                  "summary": "Make default discrete",
                  "description": "This example demonstrates how to make the 'A-basis' discrete parameter value (guid = 505b5d32-0a4a-48af-9a7a-90c4caacd35c) from the 'Basis' discrete parameter (guid = 7a6ccb7b-8a47-4cab-8203-c741d476560f) from the MI_Training database default using a PATCH request.",
                  "value": {"type":"discrete","isDefault":true}
                },
                "Example 24": {
                  "summary": "Change guid of numeric",
                  "description": "This example demonstrates how to update guid of the 'Strain 0.1' numeric parameter value (guid = 173284fb-e557-406f-a7eb-f4e75f1d48a9) from the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database using a PATCH request.",
                  "value": {"type":"numeric","guid":"6bc405b8-979f-4244-97f8-b179d5bcd316"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameterValue"
              },
              "examples": {
                "Example 21": {
                  "summary": "Update numeric parameter value",
                  "description": "This example demonstrates how to update all properties of the 'Strain 0.1' numeric parameter value (guid = 173284fb-e557-406f-a7eb-f4e75f1d48a9) from the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"value":10.0,"type":"numeric","isDefault":false,"name":"Strain 0.1 (Updated)","guid":"61570cd1-f8a6-43b3-a206-247f8c35c4f0"}
                },
                "Example 22": {
                  "summary": "Update discrete parameter value",
                  "description": "This example demonstrates how to update all properties of the 'Mean' discrete parameter value (guid = 21a27377-12eb-413c-bac4-d4ffceda39d1) from the 'Basis' numeric parameter (guid = 7a6ccb7b-8a47-4cab-8203-c741d476560f) from the MI_Training database.",
                  "value": {"type":"discrete","isDefault":false,"name":"Mean (Updated)","guid":"2df917dc-7b75-4b6a-9d8e-aa19c2857d3e"}
                },
                "Example 23": {
                  "summary": "Make default discrete",
                  "description": "This example demonstrates how to make the 'A-basis' discrete parameter value (guid = 505b5d32-0a4a-48af-9a7a-90c4caacd35c) from the 'Basis' discrete parameter (guid = 7a6ccb7b-8a47-4cab-8203-c741d476560f) from the MI_Training database default using a PATCH request.",
                  "value": {"type":"discrete","isDefault":true}
                },
                "Example 24": {
                  "summary": "Change guid of numeric",
                  "description": "This example demonstrates how to update guid of the 'Strain 0.1' numeric parameter value (guid = 173284fb-e557-406f-a7eb-f4e75f1d48a9) from the 'Strain' numeric parameter (guid = 00000005-000a-4fff-8fff-0000ffff0000) from the MI_Training database using a PATCH request.",
                  "value": {"type":"numeric","guid":"6bc405b8-979f-4244-97f8-b179d5bcd316"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameterValue"
                },
                "examples": {
                  "Example 11": {
                    "summary": "Numeric parameter value",
                    "description": "This example demonstrates how to create a new numeric parameter value for the 'Temperature' numeric parameter (guid = 00000001-000a-4fff-8fff-0000ffff0000) from the MI_Training database. Setting the IsDefault flag to true means that the default value of the parameter will be changed to the newly created value.",
                    "value": {"value":10.0,"type":"numeric","isDefault":true,"name":"Cold"}
                  },
                  "Example 12": {
                    "summary": "Discrete parameter value",
                    "description": "This example demonstrates how to create a new discrete parameter value for the 'Chemical Environment' discrete parameter (guid = b7cee874-160f-439a-a784-b887c516b2d5) from the MI_Training database.",
                    "value": {"type":"discrete","isDefault":false,"name":"Heavy water"}
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Parameter in use."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Schema - Parameters"
        ],
        "summary": "Delete a parameter value.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "parameter-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "parameter-value-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad request. Parameter in use."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Database not found"
          }
        }
      }
    },
    "/v1alpha/profiles": {
      "get": {
        "tags": [
          "Schema - Profiles"
        ],
        "summary": "Get AllProfilesInfo",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaAllProfilesInfo"
                },
                "example": {"profiles":[{"key":"MI_Training","isImplicit":true,"name":"MI Training"},{"key":"MITrainingMetals-f76e3ce8-608a-42da-8d99-f0009dac966f","guid":"f76e3ce8-608a-42da-8d99-f0009dac966f","groupName":"MI:Training Profiles","isImplicit":false,"name":"MI:Training Metals"},{"key":"MITrainingComposites-90cb537b-82e9-4e8b-8193-208f581f7e0a","guid":"90cb537b-82e9-4e8b-8193-208f581f7e0a","groupName":"MI:Training Profiles","isImplicit":false,"name":"MI:Training Composites"},{"key":"MITrainingAdditiveManufacturing-31ae18d9-eaf7-43ab-9b88-716c34e61658","guid":"31ae18d9-eaf7-43ab-9b88-716c34e61658","groupName":"MI:Training Profiles","isImplicit":false,"name":"MI:Training Additive Manufacturing"}],"defaultProfile":{"key":"MITrainingMetals-f76e3ce8-608a-42da-8d99-f0009dac966f","guid":"f76e3ce8-608a-42da-8d99-f0009dac966f","groupName":"MI:Training Profiles","isImplicit":false,"name":"MI:Training Metals"}}
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "patch": {
        "tags": [
          "Schema - Profiles"
        ],
        "summary": "Update AllProfilesInfo",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaAllProfilesInfo"
              },
              "examples": {
                "Example 21": {
                  "summary": "Update default profile",
                  "description": "This example demonstrates how to update default profile. Default Profile might be set to one of the profiles visible to user or to null.",
                  "value": {"defaultProfile":{"key":"MITrainingComposites-90cb537b-82e9-4e8b-8193-208f581f7e0a"}}
                },
                "Example 22": {
                  "summary": "Remove default profile",
                  "description": "This example demonstrates how to remove default profile by setting it to null",
                  "value": {"defaultProfile":null}
                },
                "Example 23": {
                  "summary": "Update profiles order",
                  "description": "This example demonstrates how to reorder profiles. Profiles will be reordered in the order provided. Their values can not be changed. Full list of explicit profiles must be provided.",
                  "value": {"profiles":[{"guid":"31ae18d9-eaf7-43ab-9b88-716c34e61658"},{"guid":"f76e3ce8-608a-42da-8d99-f0009dac966f"},{"guid":"90cb537b-82e9-4e8b-8193-208f581f7e0a"}]}
                },
                "Example 24": {
                  "summary": "Everything for AllProfilesInfo",
                  "description": "This example shows all properties that can be updated for AllProfilesInfo.",
                  "value": {"profiles":[{"guid":"31ae18d9-eaf7-43ab-9b88-716c34e61658"},{"guid":"f76e3ce8-608a-42da-8d99-f0009dac966f"},{"guid":"90cb537b-82e9-4e8b-8193-208f581f7e0a"}],"defaultProfile":{"key":"MITrainingComposites-90cb537b-82e9-4e8b-8193-208f581f7e0a"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaAllProfilesInfo"
              },
              "examples": {
                "Example 21": {
                  "summary": "Update default profile",
                  "description": "This example demonstrates how to update default profile. Default Profile might be set to one of the profiles visible to user or to null.",
                  "value": {"defaultProfile":{"key":"MITrainingComposites-90cb537b-82e9-4e8b-8193-208f581f7e0a"}}
                },
                "Example 22": {
                  "summary": "Remove default profile",
                  "description": "This example demonstrates how to remove default profile by setting it to null",
                  "value": {"defaultProfile":null}
                },
                "Example 23": {
                  "summary": "Update profiles order",
                  "description": "This example demonstrates how to reorder profiles. Profiles will be reordered in the order provided. Their values can not be changed. Full list of explicit profiles must be provided.",
                  "value": {"profiles":[{"guid":"31ae18d9-eaf7-43ab-9b88-716c34e61658"},{"guid":"f76e3ce8-608a-42da-8d99-f0009dac966f"},{"guid":"90cb537b-82e9-4e8b-8193-208f581f7e0a"}]}
                },
                "Example 24": {
                  "summary": "Everything for AllProfilesInfo",
                  "description": "This example shows all properties that can be updated for AllProfilesInfo.",
                  "value": {"profiles":[{"guid":"31ae18d9-eaf7-43ab-9b88-716c34e61658"},{"guid":"f76e3ce8-608a-42da-8d99-f0009dac966f"},{"guid":"90cb537b-82e9-4e8b-8193-208f581f7e0a"}],"defaultProfile":{"key":"MITrainingComposites-90cb537b-82e9-4e8b-8193-208f581f7e0a"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaAllProfilesInfo"
              },
              "examples": {
                "Example 21": {
                  "summary": "Update default profile",
                  "description": "This example demonstrates how to update default profile. Default Profile might be set to one of the profiles visible to user or to null.",
                  "value": {"defaultProfile":{"key":"MITrainingComposites-90cb537b-82e9-4e8b-8193-208f581f7e0a"}}
                },
                "Example 22": {
                  "summary": "Remove default profile",
                  "description": "This example demonstrates how to remove default profile by setting it to null",
                  "value": {"defaultProfile":null}
                },
                "Example 23": {
                  "summary": "Update profiles order",
                  "description": "This example demonstrates how to reorder profiles. Profiles will be reordered in the order provided. Their values can not be changed. Full list of explicit profiles must be provided.",
                  "value": {"profiles":[{"guid":"31ae18d9-eaf7-43ab-9b88-716c34e61658"},{"guid":"f76e3ce8-608a-42da-8d99-f0009dac966f"},{"guid":"90cb537b-82e9-4e8b-8193-208f581f7e0a"}]}
                },
                "Example 24": {
                  "summary": "Everything for AllProfilesInfo",
                  "description": "This example shows all properties that can be updated for AllProfilesInfo.",
                  "value": {"profiles":[{"guid":"31ae18d9-eaf7-43ab-9b88-716c34e61658"},{"guid":"f76e3ce8-608a-42da-8d99-f0009dac966f"},{"guid":"90cb537b-82e9-4e8b-8193-208f581f7e0a"}],"defaultProfile":{"key":"MITrainingComposites-90cb537b-82e9-4e8b-8193-208f581f7e0a"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaAllProfilesInfo"
              },
              "examples": {
                "Example 21": {
                  "summary": "Update default profile",
                  "description": "This example demonstrates how to update default profile. Default Profile might be set to one of the profiles visible to user or to null.",
                  "value": {"defaultProfile":{"key":"MITrainingComposites-90cb537b-82e9-4e8b-8193-208f581f7e0a"}}
                },
                "Example 22": {
                  "summary": "Remove default profile",
                  "description": "This example demonstrates how to remove default profile by setting it to null",
                  "value": {"defaultProfile":null}
                },
                "Example 23": {
                  "summary": "Update profiles order",
                  "description": "This example demonstrates how to reorder profiles. Profiles will be reordered in the order provided. Their values can not be changed. Full list of explicit profiles must be provided.",
                  "value": {"profiles":[{"guid":"31ae18d9-eaf7-43ab-9b88-716c34e61658"},{"guid":"f76e3ce8-608a-42da-8d99-f0009dac966f"},{"guid":"90cb537b-82e9-4e8b-8193-208f581f7e0a"}]}
                },
                "Example 24": {
                  "summary": "Everything for AllProfilesInfo",
                  "description": "This example shows all properties that can be updated for AllProfilesInfo.",
                  "value": {"profiles":[{"guid":"31ae18d9-eaf7-43ab-9b88-716c34e61658"},{"guid":"f76e3ce8-608a-42da-8d99-f0009dac966f"},{"guid":"90cb537b-82e9-4e8b-8193-208f581f7e0a"}],"defaultProfile":{"key":"MITrainingComposites-90cb537b-82e9-4e8b-8193-208f581f7e0a"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaAllProfilesInfo"
                },
                "example": {"profiles":[{"key":"MI_Training","isImplicit":true,"name":"MI Training"},{"key":"MITrainingMetals-f76e3ce8-608a-42da-8d99-f0009dac966f","guid":"f76e3ce8-608a-42da-8d99-f0009dac966f","groupName":"MI:Training Profiles","isImplicit":false,"name":"MI:Training Metals"},{"key":"MITrainingComposites-90cb537b-82e9-4e8b-8193-208f581f7e0a","guid":"90cb537b-82e9-4e8b-8193-208f581f7e0a","groupName":"MI:Training Profiles","isImplicit":false,"name":"MI:Training Composites"},{"key":"MITrainingAdditiveManufacturing-31ae18d9-eaf7-43ab-9b88-716c34e61658","guid":"31ae18d9-eaf7-43ab-9b88-716c34e61658","groupName":"MI:Training Profiles","isImplicit":false,"name":"MI:Training Additive Manufacturing"}],"defaultProfile":{"key":"MITrainingMetals-f76e3ce8-608a-42da-8d99-f0009dac966f","guid":"f76e3ce8-608a-42da-8d99-f0009dac966f","groupName":"MI:Training Profiles","isImplicit":false,"name":"MI:Training Metals"}}
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Profile not found"
          }
        }
      },
      "post": {
        "tags": [
          "Schema - Profiles"
        ],
        "summary": "Create a new profile",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaProfile"
              },
              "examples": {
                "Example 16": {
                  "summary": "Profile",
                  "description": "This example demonstrates how to create a new profile",
                  "value": {"name":"MI:Training Processes"}
                },
                "Example 17": {
                  "summary": "Profile with specified guid",
                  "description": "This example demonstrates how to create a new profile with a specified guid. Normally, if the guid is not specified, a random new Guid will be generated.",
                  "value": {"guid":"efe49d88-7ec9-4e06-99ee-269cfb3918e3","name":"MI:Training Processes"}
                },
                "Example 18": {
                  "summary": "Full profile",
                  "description": "This example demonstrates how to create a new profile with all of its fields filled out.",
                  "value": {"description":"#markdown\r\nFor process-oriented users.","homepageUrl":"TrainingProfiles/TrainingProcesses","guid":"5ea3941a-030c-4361-91fb-1e203ad94ada","groupName":"MI:Training Profiles","name":"MI:Training Processes"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaProfile"
              },
              "examples": {
                "Example 16": {
                  "summary": "Profile",
                  "description": "This example demonstrates how to create a new profile",
                  "value": {"name":"MI:Training Processes"}
                },
                "Example 17": {
                  "summary": "Profile with specified guid",
                  "description": "This example demonstrates how to create a new profile with a specified guid. Normally, if the guid is not specified, a random new Guid will be generated.",
                  "value": {"guid":"efe49d88-7ec9-4e06-99ee-269cfb3918e3","name":"MI:Training Processes"}
                },
                "Example 18": {
                  "summary": "Full profile",
                  "description": "This example demonstrates how to create a new profile with all of its fields filled out.",
                  "value": {"description":"#markdown\r\nFor process-oriented users.","homepageUrl":"TrainingProfiles/TrainingProcesses","guid":"5ea3941a-030c-4361-91fb-1e203ad94ada","groupName":"MI:Training Profiles","name":"MI:Training Processes"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaProfile"
              },
              "examples": {
                "Example 16": {
                  "summary": "Profile",
                  "description": "This example demonstrates how to create a new profile",
                  "value": {"name":"MI:Training Processes"}
                },
                "Example 17": {
                  "summary": "Profile with specified guid",
                  "description": "This example demonstrates how to create a new profile with a specified guid. Normally, if the guid is not specified, a random new Guid will be generated.",
                  "value": {"guid":"efe49d88-7ec9-4e06-99ee-269cfb3918e3","name":"MI:Training Processes"}
                },
                "Example 18": {
                  "summary": "Full profile",
                  "description": "This example demonstrates how to create a new profile with all of its fields filled out.",
                  "value": {"description":"#markdown\r\nFor process-oriented users.","homepageUrl":"TrainingProfiles/TrainingProcesses","guid":"5ea3941a-030c-4361-91fb-1e203ad94ada","groupName":"MI:Training Profiles","name":"MI:Training Processes"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaProfile"
              },
              "examples": {
                "Example 16": {
                  "summary": "Profile",
                  "description": "This example demonstrates how to create a new profile",
                  "value": {"name":"MI:Training Processes"}
                },
                "Example 17": {
                  "summary": "Profile with specified guid",
                  "description": "This example demonstrates how to create a new profile with a specified guid. Normally, if the guid is not specified, a random new Guid will be generated.",
                  "value": {"guid":"efe49d88-7ec9-4e06-99ee-269cfb3918e3","name":"MI:Training Processes"}
                },
                "Example 18": {
                  "summary": "Full profile",
                  "description": "This example demonstrates how to create a new profile with all of its fields filled out.",
                  "value": {"description":"#markdown\r\nFor process-oriented users.","homepageUrl":"TrainingProfiles/TrainingProcesses","guid":"5ea3941a-030c-4361-91fb-1e203ad94ada","groupName":"MI:Training Profiles","name":"MI:Training Processes"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/v1alpha/profiles/{profile-guid}": {
      "get": {
        "tags": [
          "Schema - Profiles"
        ],
        "summary": "Get individual profile",
        "parameters": [
          {
            "name": "profile-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaProfile"
                },
                "example": {"description":"#markdown\r\nFor metals-oriented users.","homepageUrl":"TrainingProfiles/MITrainingMetals","profileTables":[{"databaseGuid":"43a43640-4919-428a-bac9-16efbc4ce6ed","databaseFallbackHint":"MI:Training","tableGuid":"0000dd92-0011-4fff-8fff-0000ffff0000","tableFallbackHint":"MaterialUniverse","guid":"a7cb2018-8410-42fd-ac6a-8bc1b441ba6e"},{"databaseGuid":"43a43640-4919-428a-bac9-16efbc4ce6ed","databaseFallbackHint":"MI:Training","tableGuid":"00003248-0011-4fff-8fff-0000ffff0000","tableFallbackHint":"ProcessUniverse","guid":"81bb4607-e2a3-4c78-81fc-a18a09979c72"}],"key":"MITrainingMetals-f76e3ce8-608a-42da-8d99-f0009dac966f","guid":"f76e3ce8-608a-42da-8d99-f0009dac966f","groupName":"MI:Training Profiles","isImplicit":false,"name":"MI:Training Metals"}
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Profile not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Schema - Profiles"
        ],
        "summary": "Update a profile",
        "parameters": [
          {
            "name": "profile-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaProfile"
              },
              "examples": {
                "Example 16": {
                  "summary": "Update a guid",
                  "description": "This example demonstrates how to update the 'Guid' property of the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f).",
                  "value": {"guid":"a7f976a5-0a75-4082-b8bb-261256c4140d"}
                },
                "Example 17": {
                  "summary": "Update a name",
                  "description": "This example demonstrates how to update the 'Name' property of the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f).",
                  "value": {"name":"MI:Training Metals (Updated)"}
                },
                "Example 18": {
                  "summary": "Everything for a profile",
                  "description": "This example demonstrates how to update all properties of the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f). Profile tables will be reordered in the order provided. Their values can not be changed. Full list of profiles profileTables must be provided.",
                  "value": {"description":"#markdown\r\nFor metals-oriented users. (Updated)","homepageUrl":"TrainingProfiles/TrainingMetalsUpdated","profileTables":[{"guid":"81bb4607-e2a3-4c78-81fc-a18a09979c72"},{"guid":"a7cb2018-8410-42fd-ac6a-8bc1b441ba6e"}],"guid":"66bcaec2-fc95-45c2-b5b8-141ba44c6f8b","groupName":"MI:Training Profiles (Updated)","name":"MI:Training Metals"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaProfile"
              },
              "examples": {
                "Example 16": {
                  "summary": "Update a guid",
                  "description": "This example demonstrates how to update the 'Guid' property of the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f).",
                  "value": {"guid":"a7f976a5-0a75-4082-b8bb-261256c4140d"}
                },
                "Example 17": {
                  "summary": "Update a name",
                  "description": "This example demonstrates how to update the 'Name' property of the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f).",
                  "value": {"name":"MI:Training Metals (Updated)"}
                },
                "Example 18": {
                  "summary": "Everything for a profile",
                  "description": "This example demonstrates how to update all properties of the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f). Profile tables will be reordered in the order provided. Their values can not be changed. Full list of profiles profileTables must be provided.",
                  "value": {"description":"#markdown\r\nFor metals-oriented users. (Updated)","homepageUrl":"TrainingProfiles/TrainingMetalsUpdated","profileTables":[{"guid":"81bb4607-e2a3-4c78-81fc-a18a09979c72"},{"guid":"a7cb2018-8410-42fd-ac6a-8bc1b441ba6e"}],"guid":"66bcaec2-fc95-45c2-b5b8-141ba44c6f8b","groupName":"MI:Training Profiles (Updated)","name":"MI:Training Metals"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaProfile"
              },
              "examples": {
                "Example 16": {
                  "summary": "Update a guid",
                  "description": "This example demonstrates how to update the 'Guid' property of the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f).",
                  "value": {"guid":"a7f976a5-0a75-4082-b8bb-261256c4140d"}
                },
                "Example 17": {
                  "summary": "Update a name",
                  "description": "This example demonstrates how to update the 'Name' property of the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f).",
                  "value": {"name":"MI:Training Metals (Updated)"}
                },
                "Example 18": {
                  "summary": "Everything for a profile",
                  "description": "This example demonstrates how to update all properties of the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f). Profile tables will be reordered in the order provided. Their values can not be changed. Full list of profiles profileTables must be provided.",
                  "value": {"description":"#markdown\r\nFor metals-oriented users. (Updated)","homepageUrl":"TrainingProfiles/TrainingMetalsUpdated","profileTables":[{"guid":"81bb4607-e2a3-4c78-81fc-a18a09979c72"},{"guid":"a7cb2018-8410-42fd-ac6a-8bc1b441ba6e"}],"guid":"66bcaec2-fc95-45c2-b5b8-141ba44c6f8b","groupName":"MI:Training Profiles (Updated)","name":"MI:Training Metals"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaProfile"
              },
              "examples": {
                "Example 16": {
                  "summary": "Update a guid",
                  "description": "This example demonstrates how to update the 'Guid' property of the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f).",
                  "value": {"guid":"a7f976a5-0a75-4082-b8bb-261256c4140d"}
                },
                "Example 17": {
                  "summary": "Update a name",
                  "description": "This example demonstrates how to update the 'Name' property of the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f).",
                  "value": {"name":"MI:Training Metals (Updated)"}
                },
                "Example 18": {
                  "summary": "Everything for a profile",
                  "description": "This example demonstrates how to update all properties of the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f). Profile tables will be reordered in the order provided. Their values can not be changed. Full list of profiles profileTables must be provided.",
                  "value": {"description":"#markdown\r\nFor metals-oriented users. (Updated)","homepageUrl":"TrainingProfiles/TrainingMetalsUpdated","profileTables":[{"guid":"81bb4607-e2a3-4c78-81fc-a18a09979c72"},{"guid":"a7cb2018-8410-42fd-ac6a-8bc1b441ba6e"}],"guid":"66bcaec2-fc95-45c2-b5b8-141ba44c6f8b","groupName":"MI:Training Profiles (Updated)","name":"MI:Training Metals"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaProfile"
                },
                "example": {"description":"#markdown\r\nFor metals-oriented users.","homepageUrl":"TrainingProfiles/MITrainingMetals","profileTables":[{"databaseGuid":"43a43640-4919-428a-bac9-16efbc4ce6ed","databaseFallbackHint":"MI:Training","tableGuid":"0000dd92-0011-4fff-8fff-0000ffff0000","tableFallbackHint":"MaterialUniverse","guid":"a7cb2018-8410-42fd-ac6a-8bc1b441ba6e"},{"databaseGuid":"43a43640-4919-428a-bac9-16efbc4ce6ed","databaseFallbackHint":"MI:Training","tableGuid":"00003248-0011-4fff-8fff-0000ffff0000","tableFallbackHint":"ProcessUniverse","guid":"81bb4607-e2a3-4c78-81fc-a18a09979c72"}],"key":"MITrainingMetals-f76e3ce8-608a-42da-8d99-f0009dac966f","guid":"f76e3ce8-608a-42da-8d99-f0009dac966f","groupName":"MI:Training Profiles","isImplicit":false,"name":"MI:Training Metals"}
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Profile not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Schema - Profiles"
        ],
        "summary": "Delete a profile",
        "parameters": [
          {
            "name": "profile-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad request. Profile is set as default."
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Profile not found"
          }
        }
      }
    },
    "/v1alpha/profiles/{profile-guid}/profile-tables": {
      "get": {
        "tags": [
          "Schema - ProfileTables"
        ],
        "summary": "Get all profile tables of given profile",
        "parameters": [
          {
            "name": "profile-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimProfileTable"
                  }
                },
                "example": [{"databaseGuid":"43a43640-4919-428a-bac9-16efbc4ce6ed","databaseFallbackHint":"MI:Training","tableGuid":"0000dd92-0011-4fff-8fff-0000ffff0000","tableFallbackHint":"MaterialUniverse","guid":"a7cb2018-8410-42fd-ac6a-8bc1b441ba6e"},{"databaseGuid":"43a43640-4919-428a-bac9-16efbc4ce6ed","databaseFallbackHint":"MI:Training","tableGuid":"00003248-0011-4fff-8fff-0000ffff0000","tableFallbackHint":"ProcessUniverse","guid":"81bb4607-e2a3-4c78-81fc-a18a09979c72"}]
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Profile not found"
          }
        }
      },
      "post": {
        "tags": [
          "Schema - ProfileTables"
        ],
        "summary": "Create a new profile table",
        "parameters": [
          {
            "name": "profile-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaProfileTable"
              },
              "examples": {
                "Example 16": {
                  "summary": "Profile Table",
                  "description": "This example demonstrates how to create a new profile table for the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f)",
                  "value": {"databaseGuid":"43a43640-4919-428a-bac9-16efbc4ce6ed","tableGuid":"bc666ac6-8ac6-482b-9a16-502e6ab3730e"}
                },
                "Example 17": {
                  "summary": "Profile Table with specified guid",
                  "description": "This example demonstrates how to create a new profile table for the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f) with a specified guid. Normally, if the guid is not specified, a random new Guid will be generated.",
                  "value": {"databaseGuid":"43a43640-4919-428a-bac9-16efbc4ce6ed","tableGuid":"bc666ac6-8ac6-482b-9a16-502e6ab3730e","guid":"100308a4-2090-49e7-a47c-11434707cb1c"}
                },
                "Example 18": {
                  "summary": "Full Profile Table",
                  "description": "This example demonstrates how to create a new profile table for the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f) with all of its fields filled out.",
                  "value": {"subsetGuid":"c2a6b6d0-540c-4927-b861-840644fc3968","layoutGuid":"f8379ae4-a8a8-4329-b9b5-cd0b2d285fd0","databaseGuid":"43a43640-4919-428a-bac9-16efbc4ce6ed","tableGuid":"bc666ac6-8ac6-482b-9a16-502e6ab3730e","guid":"03efa7a3-bd09-427c-abb2-f49795325159"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaProfileTable"
              },
              "examples": {
                "Example 16": {
                  "summary": "Profile Table",
                  "description": "This example demonstrates how to create a new profile table for the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f)",
                  "value": {"databaseGuid":"43a43640-4919-428a-bac9-16efbc4ce6ed","tableGuid":"bc666ac6-8ac6-482b-9a16-502e6ab3730e"}
                },
                "Example 17": {
                  "summary": "Profile Table with specified guid",
                  "description": "This example demonstrates how to create a new profile table for the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f) with a specified guid. Normally, if the guid is not specified, a random new Guid will be generated.",
                  "value": {"databaseGuid":"43a43640-4919-428a-bac9-16efbc4ce6ed","tableGuid":"bc666ac6-8ac6-482b-9a16-502e6ab3730e","guid":"100308a4-2090-49e7-a47c-11434707cb1c"}
                },
                "Example 18": {
                  "summary": "Full Profile Table",
                  "description": "This example demonstrates how to create a new profile table for the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f) with all of its fields filled out.",
                  "value": {"subsetGuid":"c2a6b6d0-540c-4927-b861-840644fc3968","layoutGuid":"f8379ae4-a8a8-4329-b9b5-cd0b2d285fd0","databaseGuid":"43a43640-4919-428a-bac9-16efbc4ce6ed","tableGuid":"bc666ac6-8ac6-482b-9a16-502e6ab3730e","guid":"03efa7a3-bd09-427c-abb2-f49795325159"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaProfileTable"
              },
              "examples": {
                "Example 16": {
                  "summary": "Profile Table",
                  "description": "This example demonstrates how to create a new profile table for the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f)",
                  "value": {"databaseGuid":"43a43640-4919-428a-bac9-16efbc4ce6ed","tableGuid":"bc666ac6-8ac6-482b-9a16-502e6ab3730e"}
                },
                "Example 17": {
                  "summary": "Profile Table with specified guid",
                  "description": "This example demonstrates how to create a new profile table for the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f) with a specified guid. Normally, if the guid is not specified, a random new Guid will be generated.",
                  "value": {"databaseGuid":"43a43640-4919-428a-bac9-16efbc4ce6ed","tableGuid":"bc666ac6-8ac6-482b-9a16-502e6ab3730e","guid":"100308a4-2090-49e7-a47c-11434707cb1c"}
                },
                "Example 18": {
                  "summary": "Full Profile Table",
                  "description": "This example demonstrates how to create a new profile table for the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f) with all of its fields filled out.",
                  "value": {"subsetGuid":"c2a6b6d0-540c-4927-b861-840644fc3968","layoutGuid":"f8379ae4-a8a8-4329-b9b5-cd0b2d285fd0","databaseGuid":"43a43640-4919-428a-bac9-16efbc4ce6ed","tableGuid":"bc666ac6-8ac6-482b-9a16-502e6ab3730e","guid":"03efa7a3-bd09-427c-abb2-f49795325159"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaProfileTable"
              },
              "examples": {
                "Example 16": {
                  "summary": "Profile Table",
                  "description": "This example demonstrates how to create a new profile table for the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f)",
                  "value": {"databaseGuid":"43a43640-4919-428a-bac9-16efbc4ce6ed","tableGuid":"bc666ac6-8ac6-482b-9a16-502e6ab3730e"}
                },
                "Example 17": {
                  "summary": "Profile Table with specified guid",
                  "description": "This example demonstrates how to create a new profile table for the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f) with a specified guid. Normally, if the guid is not specified, a random new Guid will be generated.",
                  "value": {"databaseGuid":"43a43640-4919-428a-bac9-16efbc4ce6ed","tableGuid":"bc666ac6-8ac6-482b-9a16-502e6ab3730e","guid":"100308a4-2090-49e7-a47c-11434707cb1c"}
                },
                "Example 18": {
                  "summary": "Full Profile Table",
                  "description": "This example demonstrates how to create a new profile table for the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f) with all of its fields filled out.",
                  "value": {"subsetGuid":"c2a6b6d0-540c-4927-b861-840644fc3968","layoutGuid":"f8379ae4-a8a8-4329-b9b5-cd0b2d285fd0","databaseGuid":"43a43640-4919-428a-bac9-16efbc4ce6ed","tableGuid":"bc666ac6-8ac6-482b-9a16-502e6ab3730e","guid":"03efa7a3-bd09-427c-abb2-f49795325159"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/v1alpha/profiles/{profile-guid}/profile-tables/{profile-table-guid}": {
      "get": {
        "tags": [
          "Schema - ProfileTables"
        ],
        "summary": "Get individual profile table",
        "parameters": [
          {
            "name": "profile-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "profile-table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaProfileTable"
                },
                "example": {"subsetGuid":"c43d5d46-1d6a-4fd3-8cc7-923e8592daec","subsetFallbackHint":"Metals","layoutGuid":"2826bb31-9fb5-4ca5-8db2-121ae944221d","layoutFallbackHint":"Metals","databaseGuid":"43a43640-4919-428a-bac9-16efbc4ce6ed","databaseFallbackHint":"MI:Training","tableGuid":"0000b5e2-0011-4fff-8fff-0000ffff0000","tableFallbackHint":"Design Data","guid":"2aa49cb3-19a4-44e3-a389-278123c96631"}
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Schema - ProfileTables"
        ],
        "summary": "Update a profile table",
        "parameters": [
          {
            "name": "profile-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "profile-table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaProfileTable"
              },
              "examples": {
                "Example 16": {
                  "summary": "Everything for a profile table",
                  "description": "This example shows how to update all properties of the 'MaterialUniverse' profile table (guid = a7cb2018-8410-42fd-ac6a-8bc1b441ba6e) from the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f).",
                  "value": {"subsetGuid":"00000b36-0010-4fff-8fff-dd92ffff0000","layoutGuid":"00000b36-0009-4fff-8fff-dd92ffff0000","guid":"c2e258dc-5ea1-473a-88fb-c6a9f86d368c"}
                },
                "Example 17": {
                  "summary": "Remove subset and layout",
                  "description": "This example shows how to remove the 'Subset' and 'Layout' properties from the 'Design Data' profile table (guid = 2aa49cb3-19a4-44e3-a389-278123c96631) from the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f).",
                  "value": {"subsetGuid":null,"layoutGuid":null}
                },
                "Example 18": {
                  "summary": "Just guid",
                  "description": "This example shows how to update the 'Guid' property of the 'MaterialUniverse' profile table (guid = a7cb2018-8410-42fd-ac6a-8bc1b441ba6e) from the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f).",
                  "value": {"guid":"1f06d540-c176-4b4a-8728-a8a3ca60cf31"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaProfileTable"
              },
              "examples": {
                "Example 16": {
                  "summary": "Everything for a profile table",
                  "description": "This example shows how to update all properties of the 'MaterialUniverse' profile table (guid = a7cb2018-8410-42fd-ac6a-8bc1b441ba6e) from the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f).",
                  "value": {"subsetGuid":"00000b36-0010-4fff-8fff-dd92ffff0000","layoutGuid":"00000b36-0009-4fff-8fff-dd92ffff0000","guid":"c2e258dc-5ea1-473a-88fb-c6a9f86d368c"}
                },
                "Example 17": {
                  "summary": "Remove subset and layout",
                  "description": "This example shows how to remove the 'Subset' and 'Layout' properties from the 'Design Data' profile table (guid = 2aa49cb3-19a4-44e3-a389-278123c96631) from the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f).",
                  "value": {"subsetGuid":null,"layoutGuid":null}
                },
                "Example 18": {
                  "summary": "Just guid",
                  "description": "This example shows how to update the 'Guid' property of the 'MaterialUniverse' profile table (guid = a7cb2018-8410-42fd-ac6a-8bc1b441ba6e) from the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f).",
                  "value": {"guid":"1f06d540-c176-4b4a-8728-a8a3ca60cf31"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaProfileTable"
              },
              "examples": {
                "Example 16": {
                  "summary": "Everything for a profile table",
                  "description": "This example shows how to update all properties of the 'MaterialUniverse' profile table (guid = a7cb2018-8410-42fd-ac6a-8bc1b441ba6e) from the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f).",
                  "value": {"subsetGuid":"00000b36-0010-4fff-8fff-dd92ffff0000","layoutGuid":"00000b36-0009-4fff-8fff-dd92ffff0000","guid":"c2e258dc-5ea1-473a-88fb-c6a9f86d368c"}
                },
                "Example 17": {
                  "summary": "Remove subset and layout",
                  "description": "This example shows how to remove the 'Subset' and 'Layout' properties from the 'Design Data' profile table (guid = 2aa49cb3-19a4-44e3-a389-278123c96631) from the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f).",
                  "value": {"subsetGuid":null,"layoutGuid":null}
                },
                "Example 18": {
                  "summary": "Just guid",
                  "description": "This example shows how to update the 'Guid' property of the 'MaterialUniverse' profile table (guid = a7cb2018-8410-42fd-ac6a-8bc1b441ba6e) from the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f).",
                  "value": {"guid":"1f06d540-c176-4b4a-8728-a8a3ca60cf31"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaProfileTable"
              },
              "examples": {
                "Example 16": {
                  "summary": "Everything for a profile table",
                  "description": "This example shows how to update all properties of the 'MaterialUniverse' profile table (guid = a7cb2018-8410-42fd-ac6a-8bc1b441ba6e) from the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f).",
                  "value": {"subsetGuid":"00000b36-0010-4fff-8fff-dd92ffff0000","layoutGuid":"00000b36-0009-4fff-8fff-dd92ffff0000","guid":"c2e258dc-5ea1-473a-88fb-c6a9f86d368c"}
                },
                "Example 17": {
                  "summary": "Remove subset and layout",
                  "description": "This example shows how to remove the 'Subset' and 'Layout' properties from the 'Design Data' profile table (guid = 2aa49cb3-19a4-44e3-a389-278123c96631) from the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f).",
                  "value": {"subsetGuid":null,"layoutGuid":null}
                },
                "Example 18": {
                  "summary": "Just guid",
                  "description": "This example shows how to update the 'Guid' property of the 'MaterialUniverse' profile table (guid = a7cb2018-8410-42fd-ac6a-8bc1b441ba6e) from the 'MI:Training Metals' profile (guid = f76e3ce8-608a-42da-8d99-f0009dac966f).",
                  "value": {"guid":"1f06d540-c176-4b4a-8728-a8a3ca60cf31"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaProfileTable"
                },
                "example": {"subsetGuid":"c43d5d46-1d6a-4fd3-8cc7-923e8592daec","subsetFallbackHint":"Metals","layoutGuid":"2826bb31-9fb5-4ca5-8db2-121ae944221d","layoutFallbackHint":"Metals","databaseGuid":"43a43640-4919-428a-bac9-16efbc4ce6ed","databaseFallbackHint":"MI:Training","tableGuid":"0000b5e2-0011-4fff-8fff-0000ffff0000","tableFallbackHint":"Design Data","guid":"2aa49cb3-19a4-44e3-a389-278123c96631"}
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Profile Table not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Schema - ProfileTables"
        ],
        "summary": "Delete a profile table",
        "parameters": [
          {
            "name": "profile-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "profile-table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Profile Table not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/standard-names": {
      "get": {
        "tags": [
          "Schema - Standard Names"
        ],
        "summary": "Gets all standard names for a given database.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiSchemaStandardName"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "post": {
        "tags": [
          "Schema - Standard Names"
        ],
        "summary": "Create a new standard name",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaStandardName"
              },
              "examples": {
                "Example 26": {
                  "summary": "Standard name for attributes",
                  "description": "This example demonstrates how to create a new standard name which maps to two attributes from the MI_Training database.",
                  "value": {"mappedAttributes":[{"guid":"000000b9-0001-4fff-8fff-dd92ffff0000"},{"guid":"000000ec-0001-4fff-8fff-dd92ffff0000"}],"name":"Unification"}
                },
                "Example 27": {
                  "summary": "Standard name for parameters",
                  "description": "This example demonstrates how to create a new standard name which maps to two parameters from the MI_Training database.",
                  "value": {"mappedParameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"},{"guid":"b7cee874-160f-439a-a784-b887c516b2d5"}],"name":"Unification"}
                },
                "Example 28": {
                  "summary": "Standard name for record link groups",
                  "description": "This example demonstrates how to create a new standard name which maps to a record link group from the MI_Training database.",
                  "value": {"mappedRecordLinkGroups":[{"guid":"9337df8e-c22b-4aaf-a9fc-6930c69c94cb"}],"name":"Unification"}
                },
                "Example 29": {
                  "summary": "Standard name for cross-database record link groups",
                  "description": "This example demonstrates how to create a new standard name which maps to a cross-database record link group.",
                  "value": {"mappedCrossDatabaseRecordLinkGroups":[{"guid":"88d26d58-5f3e-44be-bc49-0c96fd636fec"}],"name":"Unification"}
                },
                "Example 30": {
                  "summary": "Standard name for attributes and parameters",
                  "description": "This example demonstrates how to create a new standard name which maps to two attributes and a parameter from the MI_Training database.",
                  "value": {"mappedAttributes":[{"guid":"000000b9-0001-4fff-8fff-dd92ffff0000"},{"guid":"000000ec-0001-4fff-8fff-dd92ffff0000"}],"mappedParameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"}],"name":"Unification"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaStandardName"
              },
              "examples": {
                "Example 26": {
                  "summary": "Standard name for attributes",
                  "description": "This example demonstrates how to create a new standard name which maps to two attributes from the MI_Training database.",
                  "value": {"mappedAttributes":[{"guid":"000000b9-0001-4fff-8fff-dd92ffff0000"},{"guid":"000000ec-0001-4fff-8fff-dd92ffff0000"}],"name":"Unification"}
                },
                "Example 27": {
                  "summary": "Standard name for parameters",
                  "description": "This example demonstrates how to create a new standard name which maps to two parameters from the MI_Training database.",
                  "value": {"mappedParameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"},{"guid":"b7cee874-160f-439a-a784-b887c516b2d5"}],"name":"Unification"}
                },
                "Example 28": {
                  "summary": "Standard name for record link groups",
                  "description": "This example demonstrates how to create a new standard name which maps to a record link group from the MI_Training database.",
                  "value": {"mappedRecordLinkGroups":[{"guid":"9337df8e-c22b-4aaf-a9fc-6930c69c94cb"}],"name":"Unification"}
                },
                "Example 29": {
                  "summary": "Standard name for cross-database record link groups",
                  "description": "This example demonstrates how to create a new standard name which maps to a cross-database record link group.",
                  "value": {"mappedCrossDatabaseRecordLinkGroups":[{"guid":"88d26d58-5f3e-44be-bc49-0c96fd636fec"}],"name":"Unification"}
                },
                "Example 30": {
                  "summary": "Standard name for attributes and parameters",
                  "description": "This example demonstrates how to create a new standard name which maps to two attributes and a parameter from the MI_Training database.",
                  "value": {"mappedAttributes":[{"guid":"000000b9-0001-4fff-8fff-dd92ffff0000"},{"guid":"000000ec-0001-4fff-8fff-dd92ffff0000"}],"mappedParameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"}],"name":"Unification"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaStandardName"
              },
              "examples": {
                "Example 26": {
                  "summary": "Standard name for attributes",
                  "description": "This example demonstrates how to create a new standard name which maps to two attributes from the MI_Training database.",
                  "value": {"mappedAttributes":[{"guid":"000000b9-0001-4fff-8fff-dd92ffff0000"},{"guid":"000000ec-0001-4fff-8fff-dd92ffff0000"}],"name":"Unification"}
                },
                "Example 27": {
                  "summary": "Standard name for parameters",
                  "description": "This example demonstrates how to create a new standard name which maps to two parameters from the MI_Training database.",
                  "value": {"mappedParameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"},{"guid":"b7cee874-160f-439a-a784-b887c516b2d5"}],"name":"Unification"}
                },
                "Example 28": {
                  "summary": "Standard name for record link groups",
                  "description": "This example demonstrates how to create a new standard name which maps to a record link group from the MI_Training database.",
                  "value": {"mappedRecordLinkGroups":[{"guid":"9337df8e-c22b-4aaf-a9fc-6930c69c94cb"}],"name":"Unification"}
                },
                "Example 29": {
                  "summary": "Standard name for cross-database record link groups",
                  "description": "This example demonstrates how to create a new standard name which maps to a cross-database record link group.",
                  "value": {"mappedCrossDatabaseRecordLinkGroups":[{"guid":"88d26d58-5f3e-44be-bc49-0c96fd636fec"}],"name":"Unification"}
                },
                "Example 30": {
                  "summary": "Standard name for attributes and parameters",
                  "description": "This example demonstrates how to create a new standard name which maps to two attributes and a parameter from the MI_Training database.",
                  "value": {"mappedAttributes":[{"guid":"000000b9-0001-4fff-8fff-dd92ffff0000"},{"guid":"000000ec-0001-4fff-8fff-dd92ffff0000"}],"mappedParameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"}],"name":"Unification"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaStandardName"
              },
              "examples": {
                "Example 26": {
                  "summary": "Standard name for attributes",
                  "description": "This example demonstrates how to create a new standard name which maps to two attributes from the MI_Training database.",
                  "value": {"mappedAttributes":[{"guid":"000000b9-0001-4fff-8fff-dd92ffff0000"},{"guid":"000000ec-0001-4fff-8fff-dd92ffff0000"}],"name":"Unification"}
                },
                "Example 27": {
                  "summary": "Standard name for parameters",
                  "description": "This example demonstrates how to create a new standard name which maps to two parameters from the MI_Training database.",
                  "value": {"mappedParameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"},{"guid":"b7cee874-160f-439a-a784-b887c516b2d5"}],"name":"Unification"}
                },
                "Example 28": {
                  "summary": "Standard name for record link groups",
                  "description": "This example demonstrates how to create a new standard name which maps to a record link group from the MI_Training database.",
                  "value": {"mappedRecordLinkGroups":[{"guid":"9337df8e-c22b-4aaf-a9fc-6930c69c94cb"}],"name":"Unification"}
                },
                "Example 29": {
                  "summary": "Standard name for cross-database record link groups",
                  "description": "This example demonstrates how to create a new standard name which maps to a cross-database record link group.",
                  "value": {"mappedCrossDatabaseRecordLinkGroups":[{"guid":"88d26d58-5f3e-44be-bc49-0c96fd636fec"}],"name":"Unification"}
                },
                "Example 30": {
                  "summary": "Standard name for attributes and parameters",
                  "description": "This example demonstrates how to create a new standard name which maps to two attributes and a parameter from the MI_Training database.",
                  "value": {"mappedAttributes":[{"guid":"000000b9-0001-4fff-8fff-dd92ffff0000"},{"guid":"000000ec-0001-4fff-8fff-dd92ffff0000"}],"mappedParameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"}],"name":"Unification"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/standard-names/{standard-name-guid}": {
      "get": {
        "tags": [
          "Schema - Standard Names"
        ],
        "summary": "Gets a standard name for a given database and guid.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "standard-name-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaStandardName"
                },
                "examples": {
                  "Example 51": {
                    "summary": "Standard name for attributes",
                    "description": "This example demonstrates how to create a new standard name which maps to two attributes from the MI_Training database.",
                    "value": {"mappedAttributes":[{"guid":"000000b9-0001-4fff-8fff-dd92ffff0000"},{"guid":"000000ec-0001-4fff-8fff-dd92ffff0000"}],"name":"Unification"}
                  },
                  "Example 52": {
                    "summary": "Standard name for parameters",
                    "description": "This example demonstrates how to create a new standard name which maps to two parameters from the MI_Training database.",
                    "value": {"mappedParameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"},{"guid":"b7cee874-160f-439a-a784-b887c516b2d5"}],"name":"Unification"}
                  },
                  "Example 53": {
                    "summary": "Standard name for record link groups",
                    "description": "This example demonstrates how to create a new standard name which maps to a record link group from the MI_Training database.",
                    "value": {"mappedRecordLinkGroups":[{"guid":"9337df8e-c22b-4aaf-a9fc-6930c69c94cb"}],"name":"Unification"}
                  },
                  "Example 54": {
                    "summary": "Standard name for cross-database record link groups",
                    "description": "This example demonstrates how to create a new standard name which maps to a cross-database record link group.",
                    "value": {"mappedCrossDatabaseRecordLinkGroups":[{"guid":"d8e95ed2-8bda-4ffb-8e95-2d9e6f42b738"}],"name":"Unification"}
                  },
                  "Example 55": {
                    "summary": "Standard name for attributes and parameters",
                    "description": "This example demonstrates how to create a new standard name which maps to two attributes and a parameter from the MI_Training database.",
                    "value": {"mappedAttributes":[{"guid":"000000b9-0001-4fff-8fff-dd92ffff0000"},{"guid":"000000ec-0001-4fff-8fff-dd92ffff0000"}],"mappedParameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"}],"name":"Unification"}
                  }
                }
              }
            }
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Schema - Standard Names"
        ],
        "summary": "Edit a standard name",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "standard-name-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaStandardName"
              },
              "examples": {
                "Example 21": {
                  "summary": "Update name",
                  "description": "This example demonstrates how to update the 'Name' property of the 'Density' standard name (guid = 5f5b89f7-da4e-4ae2-8c65-485e3c1a98fd) from the MI_Training database.",
                  "value": {"name":"Density (Updated)"}
                },
                "Example 22": {
                  "summary": "Update guid",
                  "description": "This example demonstrates how to update the 'Guid' property of the 'Density' standard name (guid = 5f5b89f7-da4e-4ae2-8c65-485e3c1a98fd) from the MI_Training database.",
                  "value": {"guid":"875808f7-c1da-4f24-876f-c194399a4fde"}
                },
                "Example 23": {
                  "summary": "Update mapped attributes",
                  "description": "This example demonstrates how to update the mapped attributes of the 'Density' standard name (guid = 5f5b89f7-da4e-4ae2-8c65-485e3c1a98fd) from the MI_Training database.",
                  "value": {"mappedAttributes":[{"guid":"000000b9-0001-4fff-8fff-dd92ffff0000"},{"guid":"000000ec-0001-4fff-8fff-dd92ffff0000"}]}
                },
                "Example 24": {
                  "summary": "Replace mapped attributes with parameters",
                  "description": "This example demonstrates how to remove the mapped attribute and add mapped parameters to the 'Density' standard name (guid = 5f5b89f7-da4e-4ae2-8c65-485e3c1a98fd) from the MI_Training database.",
                  "value": {"mappedAttributes":[],"mappedParameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"},{"guid":"b7cee874-160f-439a-a784-b887c516b2d5"}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaStandardName"
              },
              "examples": {
                "Example 21": {
                  "summary": "Update name",
                  "description": "This example demonstrates how to update the 'Name' property of the 'Density' standard name (guid = 5f5b89f7-da4e-4ae2-8c65-485e3c1a98fd) from the MI_Training database.",
                  "value": {"name":"Density (Updated)"}
                },
                "Example 22": {
                  "summary": "Update guid",
                  "description": "This example demonstrates how to update the 'Guid' property of the 'Density' standard name (guid = 5f5b89f7-da4e-4ae2-8c65-485e3c1a98fd) from the MI_Training database.",
                  "value": {"guid":"875808f7-c1da-4f24-876f-c194399a4fde"}
                },
                "Example 23": {
                  "summary": "Update mapped attributes",
                  "description": "This example demonstrates how to update the mapped attributes of the 'Density' standard name (guid = 5f5b89f7-da4e-4ae2-8c65-485e3c1a98fd) from the MI_Training database.",
                  "value": {"mappedAttributes":[{"guid":"000000b9-0001-4fff-8fff-dd92ffff0000"},{"guid":"000000ec-0001-4fff-8fff-dd92ffff0000"}]}
                },
                "Example 24": {
                  "summary": "Replace mapped attributes with parameters",
                  "description": "This example demonstrates how to remove the mapped attribute and add mapped parameters to the 'Density' standard name (guid = 5f5b89f7-da4e-4ae2-8c65-485e3c1a98fd) from the MI_Training database.",
                  "value": {"mappedAttributes":[],"mappedParameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"},{"guid":"b7cee874-160f-439a-a784-b887c516b2d5"}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaStandardName"
              },
              "examples": {
                "Example 21": {
                  "summary": "Update name",
                  "description": "This example demonstrates how to update the 'Name' property of the 'Density' standard name (guid = 5f5b89f7-da4e-4ae2-8c65-485e3c1a98fd) from the MI_Training database.",
                  "value": {"name":"Density (Updated)"}
                },
                "Example 22": {
                  "summary": "Update guid",
                  "description": "This example demonstrates how to update the 'Guid' property of the 'Density' standard name (guid = 5f5b89f7-da4e-4ae2-8c65-485e3c1a98fd) from the MI_Training database.",
                  "value": {"guid":"875808f7-c1da-4f24-876f-c194399a4fde"}
                },
                "Example 23": {
                  "summary": "Update mapped attributes",
                  "description": "This example demonstrates how to update the mapped attributes of the 'Density' standard name (guid = 5f5b89f7-da4e-4ae2-8c65-485e3c1a98fd) from the MI_Training database.",
                  "value": {"mappedAttributes":[{"guid":"000000b9-0001-4fff-8fff-dd92ffff0000"},{"guid":"000000ec-0001-4fff-8fff-dd92ffff0000"}]}
                },
                "Example 24": {
                  "summary": "Replace mapped attributes with parameters",
                  "description": "This example demonstrates how to remove the mapped attribute and add mapped parameters to the 'Density' standard name (guid = 5f5b89f7-da4e-4ae2-8c65-485e3c1a98fd) from the MI_Training database.",
                  "value": {"mappedAttributes":[],"mappedParameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"},{"guid":"b7cee874-160f-439a-a784-b887c516b2d5"}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaStandardName"
              },
              "examples": {
                "Example 21": {
                  "summary": "Update name",
                  "description": "This example demonstrates how to update the 'Name' property of the 'Density' standard name (guid = 5f5b89f7-da4e-4ae2-8c65-485e3c1a98fd) from the MI_Training database.",
                  "value": {"name":"Density (Updated)"}
                },
                "Example 22": {
                  "summary": "Update guid",
                  "description": "This example demonstrates how to update the 'Guid' property of the 'Density' standard name (guid = 5f5b89f7-da4e-4ae2-8c65-485e3c1a98fd) from the MI_Training database.",
                  "value": {"guid":"875808f7-c1da-4f24-876f-c194399a4fde"}
                },
                "Example 23": {
                  "summary": "Update mapped attributes",
                  "description": "This example demonstrates how to update the mapped attributes of the 'Density' standard name (guid = 5f5b89f7-da4e-4ae2-8c65-485e3c1a98fd) from the MI_Training database.",
                  "value": {"mappedAttributes":[{"guid":"000000b9-0001-4fff-8fff-dd92ffff0000"},{"guid":"000000ec-0001-4fff-8fff-dd92ffff0000"}]}
                },
                "Example 24": {
                  "summary": "Replace mapped attributes with parameters",
                  "description": "This example demonstrates how to remove the mapped attribute and add mapped parameters to the 'Density' standard name (guid = 5f5b89f7-da4e-4ae2-8c65-485e3c1a98fd) from the MI_Training database.",
                  "value": {"mappedAttributes":[],"mappedParameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"},{"guid":"b7cee874-160f-439a-a784-b887c516b2d5"}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaStandardName"
                },
                "examples": {
                  "Example 56": {
                    "summary": "Standard name for attributes",
                    "description": "This example demonstrates how to create a new standard name which maps to two attributes from the MI_Training database.",
                    "value": {"mappedAttributes":[{"guid":"000000b9-0001-4fff-8fff-dd92ffff0000"},{"guid":"000000ec-0001-4fff-8fff-dd92ffff0000"}],"name":"Unification"}
                  },
                  "Example 57": {
                    "summary": "Standard name for parameters",
                    "description": "This example demonstrates how to create a new standard name which maps to two parameters from the MI_Training database.",
                    "value": {"mappedParameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"},{"guid":"b7cee874-160f-439a-a784-b887c516b2d5"}],"name":"Unification"}
                  },
                  "Example 58": {
                    "summary": "Standard name for record link groups",
                    "description": "This example demonstrates how to create a new standard name which maps to a record link group from the MI_Training database.",
                    "value": {"mappedRecordLinkGroups":[{"guid":"9337df8e-c22b-4aaf-a9fc-6930c69c94cb"}],"name":"Unification"}
                  },
                  "Example 59": {
                    "summary": "Standard name for cross-database record link groups",
                    "description": "This example demonstrates how to create a new standard name which maps to a cross-database record link group.",
                    "value": {"mappedCrossDatabaseRecordLinkGroups":[{"guid":"c93cb4e8-d015-4cfe-aab5-5b49ebcc3f4d"}],"name":"Unification"}
                  },
                  "Example 60": {
                    "summary": "Standard name for attributes and parameters",
                    "description": "This example demonstrates how to create a new standard name which maps to two attributes and a parameter from the MI_Training database.",
                    "value": {"mappedAttributes":[{"guid":"000000b9-0001-4fff-8fff-dd92ffff0000"},{"guid":"000000ec-0001-4fff-8fff-dd92ffff0000"}],"mappedParameters":[{"guid":"00000001-000a-4fff-8fff-0000ffff0000"}],"name":"Unification"}
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Schema - Standard Names"
        ],
        "summary": "Delete a standard name.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "standard-name-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad request."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Database not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/tables/{table-guid}/subsets": {
      "get": {
        "tags": [
          "Schema - Subsets"
        ],
        "summary": "Get all subsets for table",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
              "nullable": true
            }
          },
          {
            "name": "X-Ansys-VC-Mode",
            "in": "header",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimSubset"
                  }
                },
                "example": [{"displayNames":{"en":"Ceramics English Display Name","fr":"Ceramics French Display Name"},"name":"Ceramics","guid":"00000b36-0010-4fff-8fff-dd92ffff0000"},{"displayNames":{},"name":"Metals","guid":"0000b135-0010-4fff-8fff-dd92ffff0000"},{"displayNames":{},"name":"Polymers","guid":"00007645-0010-4fff-8fff-dd92ffff0000"}]
              }
            }
          },
          "404": {
            "description": "Table not found"
          }
        }
      },
      "post": {
        "tags": [
          "Schema - Subsets"
        ],
        "summary": "Create a new subset.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaSubset"
              },
              "examples": {
                "Example 16": {
                  "summary": "Subset",
                  "description": "This example demonstrates how to create a new subset for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"Alloys"}
                },
                "Example 17": {
                  "summary": "Subset with Guid",
                  "description": "This example demonstrates how to create a new subset with a specified guid value for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database. Normally, if the guid is not specified, a random new Guid will be generated. ",
                  "value": {"name":"Alloys (guid)","guid":"72ff07ab-019e-43d0-82b5-870bc0e06d83"}
                },
                "Example 18": {
                  "summary": "Subset with associated layout",
                  "description": "This example demonstrates how to create a new subset for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database with the 'Ceramics' layout associated.",
                  "value": {"associatedLayout":{"guid":"00000b36-0009-4fff-8fff-dd92ffff0000"},"name":"Alloys (Layout)"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaSubset"
              },
              "examples": {
                "Example 16": {
                  "summary": "Subset",
                  "description": "This example demonstrates how to create a new subset for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"Alloys"}
                },
                "Example 17": {
                  "summary": "Subset with Guid",
                  "description": "This example demonstrates how to create a new subset with a specified guid value for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database. Normally, if the guid is not specified, a random new Guid will be generated. ",
                  "value": {"name":"Alloys (guid)","guid":"72ff07ab-019e-43d0-82b5-870bc0e06d83"}
                },
                "Example 18": {
                  "summary": "Subset with associated layout",
                  "description": "This example demonstrates how to create a new subset for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database with the 'Ceramics' layout associated.",
                  "value": {"associatedLayout":{"guid":"00000b36-0009-4fff-8fff-dd92ffff0000"},"name":"Alloys (Layout)"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaSubset"
              },
              "examples": {
                "Example 16": {
                  "summary": "Subset",
                  "description": "This example demonstrates how to create a new subset for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"Alloys"}
                },
                "Example 17": {
                  "summary": "Subset with Guid",
                  "description": "This example demonstrates how to create a new subset with a specified guid value for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database. Normally, if the guid is not specified, a random new Guid will be generated. ",
                  "value": {"name":"Alloys (guid)","guid":"72ff07ab-019e-43d0-82b5-870bc0e06d83"}
                },
                "Example 18": {
                  "summary": "Subset with associated layout",
                  "description": "This example demonstrates how to create a new subset for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database with the 'Ceramics' layout associated.",
                  "value": {"associatedLayout":{"guid":"00000b36-0009-4fff-8fff-dd92ffff0000"},"name":"Alloys (Layout)"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaSubset"
              },
              "examples": {
                "Example 16": {
                  "summary": "Subset",
                  "description": "This example demonstrates how to create a new subset for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"Alloys"}
                },
                "Example 17": {
                  "summary": "Subset with Guid",
                  "description": "This example demonstrates how to create a new subset with a specified guid value for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database. Normally, if the guid is not specified, a random new Guid will be generated. ",
                  "value": {"name":"Alloys (guid)","guid":"72ff07ab-019e-43d0-82b5-870bc0e06d83"}
                },
                "Example 18": {
                  "summary": "Subset with associated layout",
                  "description": "This example demonstrates how to create a new subset for the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database with the 'Ceramics' layout associated.",
                  "value": {"associatedLayout":{"guid":"00000b36-0009-4fff-8fff-dd92ffff0000"},"name":"Alloys (Layout)"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaSubset"
                },
                "example": {"associatedLayout":{"name":"Ceramics","guid":"00000b36-0009-4fff-8fff-dd92ffff0000"},"displayNames":{},"name":"Ceramics","guid":"00000b36-0010-4fff-8fff-dd92ffff0000"}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Table not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/tables/{table-guid}/subsets/{subset-guid}": {
      "get": {
        "tags": [
          "Schema - Subsets"
        ],
        "summary": "Get a subset with a specified guid for a given database and table.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "subset-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
              "nullable": true
            }
          },
          {
            "name": "X-Ansys-VC-Mode",
            "in": "header",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaSubset"
                },
                "example": {"associatedLayout":{"displayNames":{"en":"Ceramics Layout English Display Name","fr":"Ceramics Layout French Display Name"},"name":"Ceramics","guid":"00000b36-0009-4fff-8fff-dd92ffff0000"},"displayNames":{"en":"Ceramics English Display Name","fr":"Ceramics French Display Name"},"name":"Ceramics","guid":"00000b36-0010-4fff-8fff-dd92ffff0000"}
              }
            }
          },
          "404": {
            "description": "Subset not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Schema - Subsets"
        ],
        "summary": "Update a subset.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "subset-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaSubset"
              },
              "examples": {
                "Example 21": {
                  "summary": "Everything for a subset",
                  "description": "This example demonstrates how to update all properties of the 'Ceramics' subset (guid = 00000b36-0010-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"associatedLayout":{"guid":"0000b135-0009-4fff-8fff-dd92ffff0000"},"name":"Ceramics (Updated)","guid":"6a7d945d-c254-429b-8547-990880009f32"}
                },
                "Example 22": {
                  "summary": "Rename subset",
                  "description": "This example demonstrates how to update the 'Name' property of the 'Ceramics' subset (guid = 00000b36-0010-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"Ceramics (Updated)"}
                },
                "Example 23": {
                  "summary": "Update associated layout",
                  "description": "This example demonstrates how to update associated layout of the 'Ceramics' subset (guid = 00000b36-0010-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"associatedLayout":{"guid":"0000b135-0009-4fff-8fff-dd92ffff0000"}}
                },
                "Example 24": {
                  "summary": "Remove associated layout",
                  "description": "This example demonstrates how to remove associated layout of the 'Ceramics' subset (guid = 00000b36-0010-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"associatedLayout":null}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaSubset"
              },
              "examples": {
                "Example 21": {
                  "summary": "Everything for a subset",
                  "description": "This example demonstrates how to update all properties of the 'Ceramics' subset (guid = 00000b36-0010-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"associatedLayout":{"guid":"0000b135-0009-4fff-8fff-dd92ffff0000"},"name":"Ceramics (Updated)","guid":"6a7d945d-c254-429b-8547-990880009f32"}
                },
                "Example 22": {
                  "summary": "Rename subset",
                  "description": "This example demonstrates how to update the 'Name' property of the 'Ceramics' subset (guid = 00000b36-0010-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"Ceramics (Updated)"}
                },
                "Example 23": {
                  "summary": "Update associated layout",
                  "description": "This example demonstrates how to update associated layout of the 'Ceramics' subset (guid = 00000b36-0010-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"associatedLayout":{"guid":"0000b135-0009-4fff-8fff-dd92ffff0000"}}
                },
                "Example 24": {
                  "summary": "Remove associated layout",
                  "description": "This example demonstrates how to remove associated layout of the 'Ceramics' subset (guid = 00000b36-0010-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"associatedLayout":null}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaSubset"
              },
              "examples": {
                "Example 21": {
                  "summary": "Everything for a subset",
                  "description": "This example demonstrates how to update all properties of the 'Ceramics' subset (guid = 00000b36-0010-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"associatedLayout":{"guid":"0000b135-0009-4fff-8fff-dd92ffff0000"},"name":"Ceramics (Updated)","guid":"6a7d945d-c254-429b-8547-990880009f32"}
                },
                "Example 22": {
                  "summary": "Rename subset",
                  "description": "This example demonstrates how to update the 'Name' property of the 'Ceramics' subset (guid = 00000b36-0010-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"Ceramics (Updated)"}
                },
                "Example 23": {
                  "summary": "Update associated layout",
                  "description": "This example demonstrates how to update associated layout of the 'Ceramics' subset (guid = 00000b36-0010-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"associatedLayout":{"guid":"0000b135-0009-4fff-8fff-dd92ffff0000"}}
                },
                "Example 24": {
                  "summary": "Remove associated layout",
                  "description": "This example demonstrates how to remove associated layout of the 'Ceramics' subset (guid = 00000b36-0010-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"associatedLayout":null}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaSubset"
              },
              "examples": {
                "Example 21": {
                  "summary": "Everything for a subset",
                  "description": "This example demonstrates how to update all properties of the 'Ceramics' subset (guid = 00000b36-0010-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"associatedLayout":{"guid":"0000b135-0009-4fff-8fff-dd92ffff0000"},"name":"Ceramics (Updated)","guid":"6a7d945d-c254-429b-8547-990880009f32"}
                },
                "Example 22": {
                  "summary": "Rename subset",
                  "description": "This example demonstrates how to update the 'Name' property of the 'Ceramics' subset (guid = 00000b36-0010-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"Ceramics (Updated)"}
                },
                "Example 23": {
                  "summary": "Update associated layout",
                  "description": "This example demonstrates how to update associated layout of the 'Ceramics' subset (guid = 00000b36-0010-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"associatedLayout":{"guid":"0000b135-0009-4fff-8fff-dd92ffff0000"}}
                },
                "Example 24": {
                  "summary": "Remove associated layout",
                  "description": "This example demonstrates how to remove associated layout of the 'Ceramics' subset (guid = 00000b36-0010-4fff-8fff-dd92ffff0000) from the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"associatedLayout":null}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaSubset"
                },
                "example": {"associatedLayout":{"displayNames":{"en":"Ceramics Layout English Display Name","fr":"Ceramics Layout French Display Name"},"name":"Ceramics","guid":"00000b36-0009-4fff-8fff-dd92ffff0000"},"displayNames":{"en":"Ceramics English Display Name","fr":"Ceramics French Display Name"},"name":"Ceramics","guid":"00000b36-0010-4fff-8fff-dd92ffff0000"}
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Subset not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Schema - Subsets"
        ],
        "summary": "Delete a subset.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "subset-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Subset not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/tables": {
      "get": {
        "tags": [
          "Schema - Tables"
        ],
        "summary": "Get all tables",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
              "nullable": true
            }
          },
          {
            "name": "X-Ansys-VC-Mode",
            "in": "header",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimTable"
                  }
                },
                "example": [{"isHiddenFromBrowse":false,"isHiddenFromSearch":false,"isVersioned":false,"displayNames":{"en":"MaterialUniverse English Display Name","fr":"MaterialUniverse French Display Name"},"name":"MaterialUniverse","guid":"0000dd92-0011-4fff-8fff-0000ffff0000"},{"isHiddenFromBrowse":false,"isHiddenFromSearch":false,"isVersioned":true,"displayNames":{},"name":"Design Data","guid":"0000b5e2-0011-4fff-8fff-0000ffff0000"}]
              }
            }
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "post": {
        "tags": [
          "Schema - Tables"
        ],
        "summary": "Create a new table.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaTable"
              },
              "examples": {
                "Example 16": {
                  "summary": "Table",
                  "description": "This example demonstrates how to create a new table in the MI_Training database.",
                  "value": {"name":"Coatings"}
                },
                "Example 17": {
                  "summary": "Table with Guid",
                  "description": "This example demonstrates how to create a new table with a specified guid value in the MI_Training database. Normally, if the guid is not specified, a random new Guid will be generated. ",
                  "value": {"name":"Coatings (Guid)","guid":"c8456135-14c0-4117-9f24-4ffdb928ab66"}
                },
                "Example 18": {
                  "summary": "Hidden Table",
                  "description": "This example demonstrates how to create a new table in the MI_Training database that is not browsable or searchable. ",
                  "value": {"isHiddenFromBrowse":true,"isHiddenFromSearch":true,"name":"Coatings (Hidden)"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaTable"
              },
              "examples": {
                "Example 16": {
                  "summary": "Table",
                  "description": "This example demonstrates how to create a new table in the MI_Training database.",
                  "value": {"name":"Coatings"}
                },
                "Example 17": {
                  "summary": "Table with Guid",
                  "description": "This example demonstrates how to create a new table with a specified guid value in the MI_Training database. Normally, if the guid is not specified, a random new Guid will be generated. ",
                  "value": {"name":"Coatings (Guid)","guid":"c8456135-14c0-4117-9f24-4ffdb928ab66"}
                },
                "Example 18": {
                  "summary": "Hidden Table",
                  "description": "This example demonstrates how to create a new table in the MI_Training database that is not browsable or searchable. ",
                  "value": {"isHiddenFromBrowse":true,"isHiddenFromSearch":true,"name":"Coatings (Hidden)"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaTable"
              },
              "examples": {
                "Example 16": {
                  "summary": "Table",
                  "description": "This example demonstrates how to create a new table in the MI_Training database.",
                  "value": {"name":"Coatings"}
                },
                "Example 17": {
                  "summary": "Table with Guid",
                  "description": "This example demonstrates how to create a new table with a specified guid value in the MI_Training database. Normally, if the guid is not specified, a random new Guid will be generated. ",
                  "value": {"name":"Coatings (Guid)","guid":"c8456135-14c0-4117-9f24-4ffdb928ab66"}
                },
                "Example 18": {
                  "summary": "Hidden Table",
                  "description": "This example demonstrates how to create a new table in the MI_Training database that is not browsable or searchable. ",
                  "value": {"isHiddenFromBrowse":true,"isHiddenFromSearch":true,"name":"Coatings (Hidden)"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaTable"
              },
              "examples": {
                "Example 16": {
                  "summary": "Table",
                  "description": "This example demonstrates how to create a new table in the MI_Training database.",
                  "value": {"name":"Coatings"}
                },
                "Example 17": {
                  "summary": "Table with Guid",
                  "description": "This example demonstrates how to create a new table with a specified guid value in the MI_Training database. Normally, if the guid is not specified, a random new Guid will be generated. ",
                  "value": {"name":"Coatings (Guid)","guid":"c8456135-14c0-4117-9f24-4ffdb928ab66"}
                },
                "Example 18": {
                  "summary": "Hidden Table",
                  "description": "This example demonstrates how to create a new table in the MI_Training database that is not browsable or searchable. ",
                  "value": {"isHiddenFromBrowse":true,"isHiddenFromSearch":true,"name":"Coatings (Hidden)"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaTable"
                },
                "example": {"isHiddenFromBrowse":false,"isHiddenFromSearch":false,"isVersioned":false,"displayNames":{},"name":"Material Universe","guid":"0000dd92-0011-4fff-8fff-0000ffff0000"}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/tables/{table-guid}": {
      "get": {
        "tags": [
          "Schema - Tables"
        ],
        "summary": "Get a table with a specified guid for a given database.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
              "nullable": true
            }
          },
          {
            "name": "X-Ansys-VC-Mode",
            "in": "header",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaTable"
                },
                "example": {"defaultSubset":{"name":"All bulk materials","guid":"0000b1c5-0010-4fff-8fff-dd92ffff0000"},"subsets":[{"name":"Aerospace materials","guid":"0000fc72-0010-4fff-8fff-dd92ffff0000"},{"name":"All bulk materials","guid":"0000b1c5-0010-4fff-8fff-dd92ffff0000"},{"displayNames":{"en":"Ceramics English Display Name","fr":"Ceramics French Display Name"},"name":"Ceramics","guid":"00000b36-0010-4fff-8fff-dd92ffff0000"},{"name":"Metals","guid":"0000b135-0010-4fff-8fff-dd92ffff0000"},{"name":"Polymers","guid":"00007645-0010-4fff-8fff-dd92ffff0000"}],"defaultLayout":{"name":"All Attributes","guid":"384f9abe-0581-434d-a976-86952282207a"},"layouts":[{"name":"Aerospace materials","guid":"0000fc72-0009-4fff-8fff-dd92ffff0000"},{"name":"All Attributes","guid":"384f9abe-0581-434d-a976-86952282207a"},{"name":"All bulk materials","guid":"0000b1c5-0009-4fff-8fff-dd92ffff0000"},{"displayNames":{"en":"Ceramics English Display Name","fr":"Ceramics French Display Name"},"name":"Ceramics","guid":"00000b36-0009-4fff-8fff-dd92ffff0000"},{"name":"Metals","guid":"0000b135-0009-4fff-8fff-dd92ffff0000"},{"name":"Polymers","guid":"00007645-0009-4fff-8fff-dd92ffff0000"}],"isHiddenFromBrowse":false,"isHiddenFromSearch":false,"isVersioned":false,"displayNames":{"en":"MaterialUniverse English Display Name","fr":"MaterialUniverse French Display Name"},"name":"MaterialUniverse","guid":"0000dd92-0011-4fff-8fff-0000ffff0000"}
              }
            }
          },
          "404": {
            "description": "Table not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Schema - Tables"
        ],
        "summary": "Update a table.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaTable"
              },
              "examples": {
                "Example 36": {
                  "summary": "Everything for a table",
                  "description": "This example demonstrates how to update all properties of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"defaultSubset":{"guid":"00000b36-0010-4fff-8fff-dd92ffff0000"},"defaultLayout":{"guid":"00000b36-0009-4fff-8fff-dd92ffff0000"},"isHiddenFromBrowse":false,"isHiddenFromSearch":true,"name":"MaterialUniverse (Updated)","guid":"bdbdaf13-beef-437a-abb0-24849505c07a"}
                },
                "Example 37": {
                  "summary": "Update 'IsHiddenFromBrowse'",
                  "description": "This example demonstrates how to update the 'IsHiddenFromBrowse' property of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"isHiddenFromBrowse":true}
                },
                "Example 38": {
                  "summary": "Update 'IsHiddenFromSearch'",
                  "description": "This example demonstrates how to update the 'IsHiddenFromSearch' property of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"isHiddenFromSearch":false}
                },
                "Example 39": {
                  "summary": "Update default subset",
                  "description": "This example demonstrates how to update the default subset property of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"defaultSubset":{"guid":"00000b36-0010-4fff-8fff-dd92ffff0000"}}
                },
                "Example 40": {
                  "summary": "Remove default subset",
                  "description": "This example demonstrates how to remove the default subset property of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"defaultSubset":null}
                },
                "Example 41": {
                  "summary": "Update default layout",
                  "description": "This example demonstrates how to update the default layout property of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"defaultLayout":{"guid":"00000b36-0009-4fff-8fff-dd92ffff0000"}}
                },
                "Example 42": {
                  "summary": "Remove default layout",
                  "description": "This example demonstrates how to remove the default layout property of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"defaultLayout":null}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaTable"
              },
              "examples": {
                "Example 36": {
                  "summary": "Everything for a table",
                  "description": "This example demonstrates how to update all properties of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"defaultSubset":{"guid":"00000b36-0010-4fff-8fff-dd92ffff0000"},"defaultLayout":{"guid":"00000b36-0009-4fff-8fff-dd92ffff0000"},"isHiddenFromBrowse":false,"isHiddenFromSearch":true,"name":"MaterialUniverse (Updated)","guid":"bdbdaf13-beef-437a-abb0-24849505c07a"}
                },
                "Example 37": {
                  "summary": "Update 'IsHiddenFromBrowse'",
                  "description": "This example demonstrates how to update the 'IsHiddenFromBrowse' property of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"isHiddenFromBrowse":true}
                },
                "Example 38": {
                  "summary": "Update 'IsHiddenFromSearch'",
                  "description": "This example demonstrates how to update the 'IsHiddenFromSearch' property of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"isHiddenFromSearch":false}
                },
                "Example 39": {
                  "summary": "Update default subset",
                  "description": "This example demonstrates how to update the default subset property of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"defaultSubset":{"guid":"00000b36-0010-4fff-8fff-dd92ffff0000"}}
                },
                "Example 40": {
                  "summary": "Remove default subset",
                  "description": "This example demonstrates how to remove the default subset property of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"defaultSubset":null}
                },
                "Example 41": {
                  "summary": "Update default layout",
                  "description": "This example demonstrates how to update the default layout property of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"defaultLayout":{"guid":"00000b36-0009-4fff-8fff-dd92ffff0000"}}
                },
                "Example 42": {
                  "summary": "Remove default layout",
                  "description": "This example demonstrates how to remove the default layout property of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"defaultLayout":null}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaTable"
              },
              "examples": {
                "Example 36": {
                  "summary": "Everything for a table",
                  "description": "This example demonstrates how to update all properties of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"defaultSubset":{"guid":"00000b36-0010-4fff-8fff-dd92ffff0000"},"defaultLayout":{"guid":"00000b36-0009-4fff-8fff-dd92ffff0000"},"isHiddenFromBrowse":false,"isHiddenFromSearch":true,"name":"MaterialUniverse (Updated)","guid":"bdbdaf13-beef-437a-abb0-24849505c07a"}
                },
                "Example 37": {
                  "summary": "Update 'IsHiddenFromBrowse'",
                  "description": "This example demonstrates how to update the 'IsHiddenFromBrowse' property of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"isHiddenFromBrowse":true}
                },
                "Example 38": {
                  "summary": "Update 'IsHiddenFromSearch'",
                  "description": "This example demonstrates how to update the 'IsHiddenFromSearch' property of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"isHiddenFromSearch":false}
                },
                "Example 39": {
                  "summary": "Update default subset",
                  "description": "This example demonstrates how to update the default subset property of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"defaultSubset":{"guid":"00000b36-0010-4fff-8fff-dd92ffff0000"}}
                },
                "Example 40": {
                  "summary": "Remove default subset",
                  "description": "This example demonstrates how to remove the default subset property of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"defaultSubset":null}
                },
                "Example 41": {
                  "summary": "Update default layout",
                  "description": "This example demonstrates how to update the default layout property of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"defaultLayout":{"guid":"00000b36-0009-4fff-8fff-dd92ffff0000"}}
                },
                "Example 42": {
                  "summary": "Remove default layout",
                  "description": "This example demonstrates how to remove the default layout property of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"defaultLayout":null}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaTable"
              },
              "examples": {
                "Example 36": {
                  "summary": "Everything for a table",
                  "description": "This example demonstrates how to update all properties of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"defaultSubset":{"guid":"00000b36-0010-4fff-8fff-dd92ffff0000"},"defaultLayout":{"guid":"00000b36-0009-4fff-8fff-dd92ffff0000"},"isHiddenFromBrowse":false,"isHiddenFromSearch":true,"name":"MaterialUniverse (Updated)","guid":"bdbdaf13-beef-437a-abb0-24849505c07a"}
                },
                "Example 37": {
                  "summary": "Update 'IsHiddenFromBrowse'",
                  "description": "This example demonstrates how to update the 'IsHiddenFromBrowse' property of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"isHiddenFromBrowse":true}
                },
                "Example 38": {
                  "summary": "Update 'IsHiddenFromSearch'",
                  "description": "This example demonstrates how to update the 'IsHiddenFromSearch' property of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"isHiddenFromSearch":false}
                },
                "Example 39": {
                  "summary": "Update default subset",
                  "description": "This example demonstrates how to update the default subset property of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"defaultSubset":{"guid":"00000b36-0010-4fff-8fff-dd92ffff0000"}}
                },
                "Example 40": {
                  "summary": "Remove default subset",
                  "description": "This example demonstrates how to remove the default subset property of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"defaultSubset":null}
                },
                "Example 41": {
                  "summary": "Update default layout",
                  "description": "This example demonstrates how to update the default layout property of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"defaultLayout":{"guid":"00000b36-0009-4fff-8fff-dd92ffff0000"}}
                },
                "Example 42": {
                  "summary": "Remove default layout",
                  "description": "This example demonstrates how to remove the default layout property of the 'MaterialUniverse' table (guid = 0000dd92-0011-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"defaultLayout":null}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaTable"
                },
                "example": {"defaultSubset":{"name":"All bulk materials","guid":"0000b1c5-0010-4fff-8fff-dd92ffff0000"},"subsets":[{"name":"Aerospace materials","guid":"0000fc72-0010-4fff-8fff-dd92ffff0000"},{"name":"All bulk materials","guid":"0000b1c5-0010-4fff-8fff-dd92ffff0000"},{"displayNames":{"en":"Ceramics English Display Name","fr":"Ceramics French Display Name"},"name":"Ceramics","guid":"00000b36-0010-4fff-8fff-dd92ffff0000"},{"name":"Metals","guid":"0000b135-0010-4fff-8fff-dd92ffff0000"},{"name":"Polymers","guid":"00007645-0010-4fff-8fff-dd92ffff0000"}],"defaultLayout":{"name":"All Attributes","guid":"384f9abe-0581-434d-a976-86952282207a"},"layouts":[{"name":"Aerospace materials","guid":"0000fc72-0009-4fff-8fff-dd92ffff0000"},{"name":"All Attributes","guid":"384f9abe-0581-434d-a976-86952282207a"},{"name":"All bulk materials","guid":"0000b1c5-0009-4fff-8fff-dd92ffff0000"},{"displayNames":{"en":"Ceramics English Display Name","fr":"Ceramics French Display Name"},"name":"Ceramics","guid":"00000b36-0009-4fff-8fff-dd92ffff0000"},{"name":"Metals","guid":"0000b135-0009-4fff-8fff-dd92ffff0000"},{"name":"Polymers","guid":"00007645-0009-4fff-8fff-dd92ffff0000"}],"isHiddenFromBrowse":false,"isHiddenFromSearch":false,"isVersioned":false,"displayNames":{"en":"MaterialUniverse English Display Name","fr":"MaterialUniverse French Display Name"},"name":"MaterialUniverse","guid":"0000dd92-0011-4fff-8fff-0000ffff0000"}
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Schema - Tables"
        ],
        "summary": "Delete a table.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad request. Table in use."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Database not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/units/{unit-guid}/equivalent-units": {
      "get": {
        "tags": [
          "Schema - Units"
        ],
        "summary": "Get equivalent units (one per unit system)",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "unit-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnitEquivalent"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Database not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/units/{unit-guid}/equivalent-units/unit-system/{unit-system-guid}/equivalent-unit/{equivalent-unit-guid}:set-equivalent-unit": {
      "post": {
        "tags": [
          "Schema - Units"
        ],
        "summary": "Set the equivalent unit for a given unit system",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "unit-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "unit-system-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "equivalent-unit-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "404": {
            "description": "Database not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/units": {
      "get": {
        "tags": [
          "Schema - Units"
        ],
        "summary": "Get all units",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimUnit"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "post": {
        "tags": [
          "Schema - Units"
        ],
        "summary": "Create a new unit.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnit"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnit"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnit"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/units/{unit-guid}": {
      "get": {
        "tags": [
          "Schema - Units"
        ],
        "summary": "Get individual units",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "unit-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnit"
                }
              }
            }
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Schema - Units"
        ],
        "summary": "Update unit.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "unit-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnit"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnit"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnit"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnit"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Schema - Units"
        ],
        "summary": "Delete unit.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "unit-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/units/{unit-guid}:compatible-units": {
      "get": {
        "tags": [
          "Schema - Units"
        ],
        "summary": "Get compatible units for unit",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "unit-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnit"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Database not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/units/{unit-guid}:usages": {
      "get": {
        "tags": [
          "Schema - Units"
        ],
        "summary": "Get all usages of unit",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "unit-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnitUsage"
                }
              }
            }
          },
          "404": {
            "description": "Database not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/unit-systems": {
      "get": {
        "tags": [
          "Schema - Units"
        ],
        "summary": "Get all unit systems in the database",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimUnitSystem"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "post": {
        "tags": [
          "Schema - Units"
        ],
        "summary": "Create a new unit system.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnitSystem"
              },
              "examples": {
                "Example 6": {
                  "summary": "Unit System",
                  "description": "This example demonstrates how to create a new unit system for the MI_Training database. Only guid and name can be set as the rest of fields is backend generated and changes via equivalents endpoints.",
                  "value": {"name":"Hawaiian common","guid":"fc8f1e92-f2de-48ff-bde5-b81f8b52a0e7"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnitSystem"
              },
              "examples": {
                "Example 6": {
                  "summary": "Unit System",
                  "description": "This example demonstrates how to create a new unit system for the MI_Training database. Only guid and name can be set as the rest of fields is backend generated and changes via equivalents endpoints.",
                  "value": {"name":"Hawaiian common","guid":"fc8f1e92-f2de-48ff-bde5-b81f8b52a0e7"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnitSystem"
              },
              "examples": {
                "Example 6": {
                  "summary": "Unit System",
                  "description": "This example demonstrates how to create a new unit system for the MI_Training database. Only guid and name can be set as the rest of fields is backend generated and changes via equivalents endpoints.",
                  "value": {"name":"Hawaiian common","guid":"fc8f1e92-f2de-48ff-bde5-b81f8b52a0e7"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnitSystem"
              },
              "examples": {
                "Example 6": {
                  "summary": "Unit System",
                  "description": "This example demonstrates how to create a new unit system for the MI_Training database. Only guid and name can be set as the rest of fields is backend generated and changes via equivalents endpoints.",
                  "value": {"name":"Hawaiian common","guid":"fc8f1e92-f2de-48ff-bde5-b81f8b52a0e7"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/unit-systems/{unit-system-guid}": {
      "get": {
        "tags": [
          "Schema - Units"
        ],
        "summary": "Get an individual unit system",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "unit-system-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnitSystem"
                },
                "examples": {
                  "Example 11": {
                    "summary": "Unit System",
                    "description": "This example demonstrates how to create a new unit system for the MI_Training database. Only guid and name can be set as the rest of fields is backend generated and changes via equivalents endpoints.",
                    "value": {"name":"Hawaiian common","guid":"b435d927-f888-47d4-ae44-5e0fee353f8d"}
                  }
                }
              }
            }
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Schema - Units"
        ],
        "summary": "Update a unit system.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "unit-system-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnitSystem"
              },
              "examples": {
                "Example 16": {
                  "summary": "Everything for a unit system",
                  "description": "This example demonstrates how to update all properties of the 'UK Imperial' unit system (guid = 00000007-0014-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"UK Imperial (Updated)","guid":"454bbdcc-2f17-436c-9f00-d412469435ae"}
                },
                "Example 17": {
                  "summary": "Update name",
                  "description": "This example demonstrates how to update the 'Name' property of the 'UK Imperial' unit system (guid = 00000007-0014-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"UK Imperial (Updated)"}
                },
                "Example 18": {
                  "summary": "Update guid",
                  "description": "This example demonstrates how to update the 'Guid' of the 'UK Imperial' unit system (guid = 00000007-0014-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"guid":"6ac977e4-21c7-4834-808c-ac42ffeb56cd"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnitSystem"
              },
              "examples": {
                "Example 16": {
                  "summary": "Everything for a unit system",
                  "description": "This example demonstrates how to update all properties of the 'UK Imperial' unit system (guid = 00000007-0014-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"UK Imperial (Updated)","guid":"454bbdcc-2f17-436c-9f00-d412469435ae"}
                },
                "Example 17": {
                  "summary": "Update name",
                  "description": "This example demonstrates how to update the 'Name' property of the 'UK Imperial' unit system (guid = 00000007-0014-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"UK Imperial (Updated)"}
                },
                "Example 18": {
                  "summary": "Update guid",
                  "description": "This example demonstrates how to update the 'Guid' of the 'UK Imperial' unit system (guid = 00000007-0014-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"guid":"6ac977e4-21c7-4834-808c-ac42ffeb56cd"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnitSystem"
              },
              "examples": {
                "Example 16": {
                  "summary": "Everything for a unit system",
                  "description": "This example demonstrates how to update all properties of the 'UK Imperial' unit system (guid = 00000007-0014-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"UK Imperial (Updated)","guid":"454bbdcc-2f17-436c-9f00-d412469435ae"}
                },
                "Example 17": {
                  "summary": "Update name",
                  "description": "This example demonstrates how to update the 'Name' property of the 'UK Imperial' unit system (guid = 00000007-0014-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"UK Imperial (Updated)"}
                },
                "Example 18": {
                  "summary": "Update guid",
                  "description": "This example demonstrates how to update the 'Guid' of the 'UK Imperial' unit system (guid = 00000007-0014-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"guid":"6ac977e4-21c7-4834-808c-ac42ffeb56cd"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnitSystem"
              },
              "examples": {
                "Example 16": {
                  "summary": "Everything for a unit system",
                  "description": "This example demonstrates how to update all properties of the 'UK Imperial' unit system (guid = 00000007-0014-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"UK Imperial (Updated)","guid":"454bbdcc-2f17-436c-9f00-d412469435ae"}
                },
                "Example 17": {
                  "summary": "Update name",
                  "description": "This example demonstrates how to update the 'Name' property of the 'UK Imperial' unit system (guid = 00000007-0014-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"name":"UK Imperial (Updated)"}
                },
                "Example 18": {
                  "summary": "Update guid",
                  "description": "This example demonstrates how to update the 'Guid' of the 'UK Imperial' unit system (guid = 00000007-0014-4fff-8fff-0000ffff0000) from the MI_Training database.",
                  "value": {"guid":"6ac977e4-21c7-4834-808c-ac42ffeb56cd"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnitSystem"
                },
                "examples": {
                  "Example 12": {
                    "summary": "Unit System",
                    "description": "This example demonstrates how to create a new unit system for the MI_Training database. Only guid and name can be set as the rest of fields is backend generated and changes via equivalents endpoints.",
                    "value": {"name":"Hawaiian common","guid":"650a1a3a-1dc4-43c0-8e1f-814bfc032f38"}
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Schema - Units"
        ],
        "summary": "Delete a unit system.",
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "unit-system-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Database not found"
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/tables/{table-identity}:search": {
      "post": {
        "tags": [
          "Search"
        ],
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-identity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
              "nullable": true
            }
          },
          {
            "name": "X-Ansys-VC-Mode",
            "in": "header",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSearchSearchRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSearchSearchRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSearchSearchRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSearchSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSearchSearchResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSearchSearchResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSearchSearchResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}/tables/{table-guid}:search": {
      "post": {
        "tags": [
          "Search"
        ],
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "table-guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
              "nullable": true
            }
          },
          {
            "name": "X-Ansys-VC-Mode",
            "in": "header",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSearchSearchRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSearchSearchRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSearchSearchRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSearchSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSearchSearchResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSearchSearchResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSearchSearchResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1alpha/databases/{database-key}:search": {
      "post": {
        "tags": [
          "Search"
        ],
        "parameters": [
          {
            "name": "database-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
              "nullable": true
            }
          },
          {
            "name": "X-Ansys-VC-Mode",
            "in": "header",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSearchSearchRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSearchSearchRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSearchSearchRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSearchSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSearchSearchResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSearchSearchResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSearchSearchResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1alpha/integration-schemas/{schema}:search": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Runs a search against the integration schema.",
        "parameters": [
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSearchSearchRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSearchSearchRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSearchSearchRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiSearchSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSearchSearchResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSearchSearchResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantaServerApiSearchSearchResponse"
                }
              }
            }
          },
          "404": {
            "description": "Schema not found"
          }
        }
      }
    },
    "/v1alpha/status": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Check whether the API is available",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1alpha/suggestions": {
      "post": {
        "tags": [
          "Suggestions"
        ],
        "summary": "Returns a list of suggestion search terms, drawn from the most common terms in the data.",
        "parameters": [
          {
            "name": "mode",
            "in": "query",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.",
              "nullable": true
            }
          },
          {
            "name": "X-Ansys-VC-Mode",
            "in": "header",
            "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
            "schema": {
              "enum": [
                "read",
                "write"
              ],
              "type": "string",
              "description": "The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiAggregationsSuggestionsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiAggregationsSuggestionsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiAggregationsSuggestionsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantaServerApiAggregationsSuggestionsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "GrantaServerApiSearchCriterion": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchBooleanCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchFreeTextCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchRecordListMemberCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchRecordPropertyCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchRecordReferenceCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchRecordSubsetCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchTabularLinkingValueCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchAttributeCriterion"
          }
        ],
        "description": "The criterion to be used in a search.\r\n            \r\nMultiple criterion can be provided. These should be wrapped with a boolean criterion that specifies whether the search should return results that match \"any\", \"all\", or \"none\" of the criterion.\r\nThese criterion can be nested to created complex search queries.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "boolean": "#/components/schemas/GrantaServerApiSearchBooleanCriterion",
            "text": "#/components/schemas/GrantaServerApiSearchFreeTextCriterion",
            "recordListMember": "#/components/schemas/GrantaServerApiSearchRecordListMemberCriterion",
            "recordProperty": "#/components/schemas/GrantaServerApiSearchRecordPropertyCriterion",
            "reference": "#/components/schemas/GrantaServerApiSearchRecordReferenceCriterion",
            "subset": "#/components/schemas/GrantaServerApiSearchRecordSubsetCriterion",
            "tabularLinkingValue": "#/components/schemas/GrantaServerApiSearchTabularLinkingValueCriterion",
            "attribute": "#/components/schemas/GrantaServerApiSearchAttributeCriterion"
          }
        }
      },
      "GrantaServerApiAggregationsAggregationCriterion": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAttributeAggregationCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsFreeTextAggregationCriterion"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "attribute": "#/components/schemas/GrantaServerApiAggregationsAttributeAggregationCriterion",
            "text": "#/components/schemas/GrantaServerApiAggregationsFreeTextAggregationCriterion"
          }
        }
      },
      "GrantaServerApiAggregationsAggregationsRequest": {
        "type": "object",
        "properties": {
          "criterion": {
            "$ref": "#/components/schemas/GrantaServerApiSearchCriterion"
          },
          "aggregationCriteria": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationCriterion"
            },
            "description": "The aggregations you wish to perform.",
            "nullable": true
          }
        },
        "description": "A request for aggregation information from a particular scope. The type of information\r\nrequested can vary: for example, for attributes, it could be a request for minimum/maximum\r\nvalues, or for common text terms.\r\n            \r\nAn aggregation request is associated with a particular scope (database, table, integration\r\nschema, etc) based off the API invoked; however, the scope can be further narrowed down by\r\nproviding a criterion in the aggregation request. Only data from records matching that\r\ncriterion will be considered when aggregating data.\r\n            \r\nNote that only some types of criterion will be supported: in particular, criteria that involve\r\n\"matches\" criteria against functional attributes, or link-attribute criteria against record\r\nlink groups, are not eligible to be used as an aggregation query criterion."
      },
      "GrantaServerApiAggregationsAggregation": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAttributeAggregation"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsFreeTextAggregation"
          }
        ],
        "description": "The results of aggregation.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "attribute": "#/components/schemas/GrantaServerApiAggregationsAttributeAggregation",
            "text": "#/components/schemas/GrantaServerApiAggregationsFreeTextAggregation"
          }
        }
      },
      "GrantaServerApiAggregationsAggregationsResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregation"
            },
            "nullable": true
          }
        }
      },
      "GrantaServerApiAttributeType": {
        "enum": [
          "integer",
          "point",
          "range",
          "logical",
          "shortText",
          "longText",
          "dateTime",
          "discrete",
          "hyperlink",
          "file",
          "picture",
          "link",
          "floatFunctional",
          "discreteFunctional",
          "mathsFunctional"
        ],
        "type": "string",
        "description": "The types of attribute that are supported by the API."
      },
      "GrantaServerApiDataExportDatumsParameterValue": {
        "type": "object",
        "properties": {
          "parameter": {
            "$ref": "#/components/schemas/GrantaServerApiParameterInfo"
          },
          "valueName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "value": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "GrantaServerApiParameterInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "identity": {
            "type": "integer",
            "format": "int32"
          },
          "unitSymbol": {
            "type": "string",
            "nullable": true
          },
          "scaleType": {
            "type": "string",
            "description": "Linear or Log",
            "nullable": true
          },
          "interpolationType": {
            "type": "string",
            "description": "Auto, None, Linear or CubicSpline",
            "nullable": true
          },
          "parameterType": {
            "type": "string",
            "nullable": true
          },
          "defaultValue": {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsParameterValue"
          }
        }
      },
      "GrantaServerApiObjectIdentifier": {
        "type": "object",
        "properties": {
          "guid": {
            "type": "string",
            "description": "The GUID of this object. The GUID represents the object on a semantic level, and two objects of\r\nthe same type with the same GUID are considered to represent \"the same concept\". GUIDs should be\r\nrobust against data changes and database upgrades, and should be preferred where possible.",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of this object. The name represents the object at a human-readable level, but two objects of\r\nthe same type with the same need not represent \"the same concept\". Because the name is less uniquely identifying,\r\nclients should prefer GUIDs where possible, and operations based on name instead of GUID may fail if the name\r\ncannot be uniquely resolved. Certain object types may consider names to be equivalent",
            "nullable": true
          },
          "identity": {
            "type": "integer",
            "description": "The underlying identity of this object. This represents the object at a data level, and two objects\r\nof the same type with the same identity are considered to represent \"the same object\". However, identities\r\nare not robust against database upgrades, and are only reliable and consistent within a currently-\r\nloaded database in a running MI instance. Clients should prefer GUIDs where possible, and operations\r\nbased on identity which persist data will be resolved to GUIDs instead (and may fail if this cannot\r\nbe done).",
            "format": "int32",
            "nullable": true
          }
        },
        "description": "Properties that identify an object within the MI system.\r\n            \r\nAn Granta.Server.Api.ObjectIdentifier created by MI will always contain values for all three\r\nproperties. An Granta.Server.Api.ObjectIdentifier created by a client need not contain values for\r\nall three properties, and is allowed to contain values or combinations of values that do\r\nnot correspond to an existing object in MI (in which case the Granta.Server.Api.ObjectIdentifier\r\nwill be resolved against MI objects first by GUID, and then by name, and finally by identity,\r\ntaking the first match and ignoring subsequent fields."
      },
      "GrantaServerApiIntegrationSchemaAttribute": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "identity": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/GrantaServerApiAttributeType"
          },
          "unitSymbol": {
            "type": "string",
            "description": "If isUnitted is true, then this must have a non empty value",
            "nullable": true
          },
          "isUnitted": {
            "type": "boolean",
            "nullable": true
          },
          "discreteTypeIdentity": {
            "type": "integer",
            "description": "A discrete attribute must define the identity of its discrete type (i.e. list of possible values)",
            "format": "int32",
            "nullable": true
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiParameterInfo"
            },
            "description": "A float functional attribute must define a list of parameters.",
            "nullable": true
          },
          "targetDatabase": {
            "$ref": "#/components/schemas/GrantaServerApiObjectIdentifier"
          },
          "targetTable": {
            "$ref": "#/components/schemas/GrantaServerApiObjectIdentifier"
          },
          "graphType": {
            "type": "string",
            "description": "A float functional attribute must be either a Series or a Grid type graph.",
            "nullable": true
          },
          "xAxisParameter": {
            "type": "string",
            "description": "A float functional attribute must define an x-axis. This will be one of the parameters listed in parameters",
            "nullable": true
          }
        },
        "description": "An attribute as defined in an integration schema."
      },
      "GrantaServerApiIntegrationSchemaLayout": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "attributeIdentities": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "description": "An integration schema layout is named list of attribute identities."
      },
      "GrantaServerApiIntegrationSchemaDiscreteType": {
        "type": "object",
        "properties": {
          "identity": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "description": "An integration schema discrete type defines the list of values that a discrete attribute can take."
      },
      "GrantaServerApiIntegrationSchemaLinkSourceType": {
        "enum": [
          "recordLink",
          "crossDatabaseLink",
          "reverseCrossDatabaseLink"
        ],
        "type": "string",
        "description": "Source links for an integration schema can either be static (within an single database), or cross database. Cross database links\r\nmust indicate which database they are defined in - a reverse cross database link is defined in the \"target\" database of the mapped\r\nintegration schema attribute."
      },
      "GrantaServerApiIntegrationSchemaMapping": {
        "type": "object",
        "properties": {
          "source": {
            "$ref": "#/components/schemas/GrantaServerApiObjectIdentifier"
          },
          "targetIdentity": {
            "type": "integer",
            "description": "The identity of the integration schema attribute",
            "format": "int32"
          },
          "parameterMappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaMapping"
            },
            "description": "Any mapped parameters (float functional attributes only). The target parameters must be defined on the target integration attribute.\r\nNot every parameters from the source database needs to be mapped for each attribute.",
            "nullable": true
          },
          "linkSourceType": {
            "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaLinkSourceType"
          }
        },
        "description": "A mapping between a source database item and an integration schema attribute."
      },
      "GrantaServerApiIntegrationSchemaSource": {
        "type": "object",
        "properties": {
          "database": {
            "$ref": "#/components/schemas/GrantaServerApiObjectIdentifier"
          },
          "databaseKey": {
            "type": "string",
            "nullable": true
          },
          "table": {
            "$ref": "#/components/schemas/GrantaServerApiObjectIdentifier"
          },
          "mappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaMapping"
            },
            "description": "Mappings for items from this table to the integration schema attributes.",
            "nullable": true
          }
        },
        "description": "A source table from which integrated data will be taken."
      },
      "GrantaServerApiIntegrationSchemaSecurityGroups": {
        "type": "object",
        "properties": {
          "readGroup": {
            "type": "string",
            "description": "Members of this groups can read data from the integration schema.",
            "nullable": true
          },
          "adminGroup": {
            "type": "string",
            "description": "Members of this group can perform administrative tasks such as adding or deleting the schema.",
            "nullable": true
          }
        },
        "description": "The security groups that apply to an integration schema. If null or empty, the default MI security groups will be used."
      },
      "GrantaServerApiIntegrationSchemaIntegrationSchema": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "version": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaAttribute"
            },
            "nullable": true
          },
          "layouts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaLayout"
            },
            "nullable": true
          },
          "unitSystem": {
            "type": "string",
            "nullable": true
          },
          "discreteTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaDiscreteType"
            },
            "nullable": true
          },
          "sources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaSource"
            },
            "nullable": true
          },
          "accessControlCategoryValues": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "securityGroups": {
            "$ref": "#/components/schemas/GrantaServerApiIntegrationSchemaSecurityGroups"
          }
        },
        "description": "A type representing an integration schema. An integration schema is a schema that describes\r\na shape that data must conform to, similar to an MI schema, but unlike an MI schema, an\r\nintegration schema does not have any corresponding data stored in it. Instead, an integration\r\nschema defines mappings or transformations from existing stored data, which may be a different\r\nshape from the integration schema."
      },
      "GrantaServerApiRecordProperty": {
        "enum": [
          "recordIdentity",
          "recordGuid",
          "recordHistoryIdentity",
          "recordHistoryGuid",
          "tableIdentity",
          "tableGuid",
          "tableName",
          "databaseKey",
          "createdByUser",
          "createdDate",
          "lastModifiedByUser",
          "lastModifiedDate",
          "recordType",
          "versionState",
          "versionNumber",
          "releasedDate",
          "fullName",
          "shortName",
          "recordColor"
        ],
        "type": "string",
        "description": "A record property represents data on a record that typically cannot be independently edited,\r\nas opposed to attribute data which may be edited on a record freely (albeit possibly requiring\r\nreleasing a new version). Record properties are usually tracked by the system automatically\r\nand are usually read-only.\r\nNote: for legacy reasons, some 'record properties' do not fall into these criteria, and do\r\nrepresent editable record fields more similar to attribute data. These record properties are\r\nusually exposed in this API as both 'record properties' and 'pseudo-attributes'."
      },
      "GrantaServerApiDataExportDataExportRequest": {
        "type": "object",
        "properties": {
          "attributeIdentities": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "recordProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiRecordProperty"
            },
            "nullable": true
          },
          "recordHistoryIdentities": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "description": "Request object for exporting the attribute data from a list of records"
      },
      "GrantaServerApiDataExportDatumsDatum": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsNotApplicableDatum"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsApplicableDatum"
          }
        ],
        "properties": {
          "attributeIdentity": {
            "type": "integer",
            "format": "int64"
          }
        },
        "discriminator": {
          "propertyName": "notApplicable",
          "mapping": {
            "True": "#/components/schemas/GrantaServerApiDataExportDatumsNotApplicableDatum",
            "False": "#/components/schemas/GrantaServerApiDataExportDatumsApplicableDatum"
          }
        }
      },
      "GrantaServerApiDataExportPropertiesProperty": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesCreatedByUserProperty"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesCreatedDateProperty"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesDatabaseKeyProperty"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesFullNameProperty"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesLastModifiedDateProperty"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesLastModifiedByUserProperty"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesRecordColorProperty"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesRecordGuidProperty"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesRecordIdentityProperty"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesRecordHistoryGuidProperty"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesRecordHistoryIdentityProperty"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesRecordTypeProperty"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesReleasedDateProperty"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesShortNameProperty"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesTableGuidProperty"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesTableIdentityProperty"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesTableNameProperty"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesVersionNumberProperty"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesVersionStateProperty"
          }
        ],
        "discriminator": {
          "propertyName": "propertyName",
          "mapping": {
            "createdByUser": "#/components/schemas/GrantaServerApiDataExportPropertiesCreatedByUserProperty",
            "createdDate": "#/components/schemas/GrantaServerApiDataExportPropertiesCreatedDateProperty",
            "databaseKey": "#/components/schemas/GrantaServerApiDataExportPropertiesDatabaseKeyProperty",
            "fullName": "#/components/schemas/GrantaServerApiDataExportPropertiesFullNameProperty",
            "lastModifiedDate": "#/components/schemas/GrantaServerApiDataExportPropertiesLastModifiedDateProperty",
            "lastModifiedByUser": "#/components/schemas/GrantaServerApiDataExportPropertiesLastModifiedByUserProperty",
            "recordColor": "#/components/schemas/GrantaServerApiDataExportPropertiesRecordColorProperty",
            "recordGuid": "#/components/schemas/GrantaServerApiDataExportPropertiesRecordGuidProperty",
            "recordIdentity": "#/components/schemas/GrantaServerApiDataExportPropertiesRecordIdentityProperty",
            "recordHistoryGuid": "#/components/schemas/GrantaServerApiDataExportPropertiesRecordHistoryGuidProperty",
            "recordHistoryIdentity": "#/components/schemas/GrantaServerApiDataExportPropertiesRecordHistoryIdentityProperty",
            "recordType": "#/components/schemas/GrantaServerApiDataExportPropertiesRecordTypeProperty",
            "releasedDate": "#/components/schemas/GrantaServerApiDataExportPropertiesReleasedDateProperty",
            "shortName": "#/components/schemas/GrantaServerApiDataExportPropertiesShortNameProperty",
            "tableGuid": "#/components/schemas/GrantaServerApiDataExportPropertiesTableGuidProperty",
            "tableIdentity": "#/components/schemas/GrantaServerApiDataExportPropertiesTableIdentityProperty",
            "tableName": "#/components/schemas/GrantaServerApiDataExportPropertiesTableNameProperty",
            "versionNumber": "#/components/schemas/GrantaServerApiDataExportPropertiesVersionNumberProperty",
            "versionState": "#/components/schemas/GrantaServerApiDataExportPropertiesVersionStateProperty"
          }
        }
      },
      "GrantaServerApiDataExportRecordWithData": {
        "type": "object",
        "properties": {
          "databaseKey": {
            "type": "string",
            "nullable": true
          },
          "recordHistoryIdentity": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsDatum"
            },
            "nullable": true,
            "readOnly": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesProperty"
            },
            "nullable": true
          }
        }
      },
      "GrantaServerApiIntegrationDataExportRecordReference": {
        "type": "object",
        "properties": {
          "recordHistoryIdentity": {
            "type": "integer",
            "format": "int32"
          },
          "databaseKey": {
            "type": "string",
            "nullable": true
          }
        },
        "description": "The unique way to identify a record history (which may have multiple versions) in an MI system"
      },
      "GrantaServerApiDataExportExportFailure": {
        "type": "object",
        "properties": {
          "failureReason": {
            "type": "string",
            "nullable": true
          },
          "failedRecords": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiIntegrationDataExportRecordReference"
            },
            "nullable": true
          }
        }
      },
      "GrantaServerApiDataExportDataExportResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiDataExportRecordWithData"
            },
            "nullable": true
          },
          "failures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiDataExportExportFailure"
            },
            "description": "List the records that were requested, but that we failed to export any data for.",
            "nullable": true
          }
        }
      },
      "GrantaServerApiIntegrationDataExportIntegrationDataExportRequest": {
        "type": "object",
        "properties": {
          "recordReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiIntegrationDataExportRecordReference"
            },
            "description": "A list of records to export. These are references to the underlying records in the source database",
            "nullable": true,
            "readOnly": true
          },
          "attributeIdentities": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A list of attribute to export. These are the attribute identities from the integration schema.",
            "nullable": true
          }
        }
      },
      "GrantaServerApiIntegrationIndexRecordFailure": {
        "type": "object",
        "properties": {
          "recordHistoryIdentity": {
            "type": "integer",
            "format": "int32"
          },
          "recordName": {
            "type": "string",
            "nullable": true
          },
          "error": {
            "type": "string",
            "description": "This is the error message from the indexing exception. It may have been returned directly from Elasticsearch.",
            "nullable": true
          },
          "recordWasOversized": {
            "type": "boolean",
            "description": "Records that contain a large amount of data are intentionally not sent to the index. This size limit is configurable through\r\nMIServer.exe.config"
          }
        },
        "description": "Detail of a record that has failed to successfully index. A record that was not indexed will not be returned\r\nas a result in any searches."
      },
      "GrantaServerApiIntegrationIntegrationSchemaStatus": {
        "type": "object",
        "properties": {
          "loadedDatabases": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Loaded databases have been successfully indexed into the integration schema. Data from them will be available in searches.",
            "nullable": true
          },
          "loadingDatabases": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Databases which are in the process of loading.",
            "nullable": true
          },
          "notLoadedDatabases": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Databases that are referenced in the schema but that are not yet loaded. This could be because they are still queued for\r\nload in the MI system, or because they have not yet been added.",
            "nullable": true
          },
          "outOfSyncDatabases": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GrantaServerApiIntegrationIndexRecordFailure"
              }
            },
            "description": "These databases have been loaded, but some data has not made it to Elasticsearch. They are available for searching, but results\r\nmay not be accurate.",
            "nullable": true
          },
          "erroredDatabases": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Databases that encountered an error while loading. These databases will not be available for searches.",
            "nullable": true
          }
        }
      },
      "GrantaServerApiListsDtoListItem": {
        "type": "object",
        "properties": {
          "databaseGuid": {
            "type": "string",
            "format": "uuid"
          },
          "recordHistoryGuid": {
            "type": "string",
            "format": "uuid"
          },
          "recordGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "recordVersion": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "tableGuid": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "GrantaServerApiListsDtoRecordListItems": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiListsDtoListItem"
            },
            "nullable": true
          }
        }
      },
      "GrantaServerApiListsDtoRecordListCreate": {
        "type": "object",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListItems"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "published": {
            "type": "boolean"
          },
          "awaitingApproval": {
            "type": "boolean"
          },
          "internalUse": {
            "type": "boolean"
          }
        }
      },
      "GrantaServerApiListsDtoListCriterion": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiListsDtoListBooleanCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListSearchCriterion"
          }
        ],
        "description": "The criterion to be used in a search for record lists.\r\n            \r\nMultiple criterion can be provided. These should be wrapped with a boolean criterion that specifies whether the search should return results that match \"any\" or \"all\" of the criteria.\r\nThese criteria can be nested to created complex search queries.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "listBoolean": "#/components/schemas/GrantaServerApiListsDtoListBooleanCriterion",
            "recordList": "#/components/schemas/GrantaServerApiListsDtoRecordListSearchCriterion"
          }
        }
      },
      "GrantaServerApiListsDtoPagingOptions": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "description": "The index of the first list in the collection to be returned. If not provided it will start at index 0.",
            "format": "int32",
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "description": "The number of lists to be returned per page. If not provided the number of returned lists will be unlimited.",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "GrantaServerApiListsDtoResponseOptions": {
        "type": "object",
        "properties": {
          "includeUserActions": {
            "type": "boolean"
          },
          "includeUserPermissions": {
            "type": "boolean"
          },
          "includeRecordListItems": {
            "type": "boolean"
          }
        }
      },
      "GrantaServerApiListsDtoRecordListSearchRequest": {
        "type": "object",
        "properties": {
          "searchCriterion": {
            "$ref": "#/components/schemas/GrantaServerApiListsDtoListCriterion"
          },
          "pagingOptions": {
            "$ref": "#/components/schemas/GrantaServerApiListsDtoPagingOptions"
          },
          "responseOptions": {
            "$ref": "#/components/schemas/GrantaServerApiListsDtoResponseOptions"
          }
        }
      },
      "GrantaServerApiListsDtoRecordListProperties": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "published": {
            "type": "boolean"
          },
          "awaitingApproval": {
            "type": "boolean"
          },
          "internalUse": {
            "type": "boolean"
          }
        }
      },
      "MicrosoftAspNetCoreJsonPatchOperationsOperation": {
        "type": "object",
        "properties": {
          "value": {
            "type": "object",
            "nullable": true
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "GrantaServerApiListsDtoRecordListPermissionFlagsDto": {
        "type": "object",
        "properties": {
          "isOwner": {
            "type": "boolean",
            "description": "Flag indicating if the user or group is an owner of this list.\r\nNull means: do not change this flag's value when inserting into database.",
            "nullable": true
          },
          "isSubscribed": {
            "type": "boolean",
            "description": "Flag indicating if the user or group is subscribed to this list.\r\nNull means: do not change this flag's value when inserting into database.",
            "nullable": true
          },
          "isCurator": {
            "type": "boolean",
            "description": "Flag indicating if the user or group is a curator of this list.\r\nNull means: do not change this flag's value when inserting into database.",
            "nullable": true
          },
          "isAdministrator": {
            "type": "boolean",
            "description": "Flag indicating if the user or group is an administrator of this list.\r\nNull means: do not change this flag's value when inserting into database.",
            "nullable": true
          },
          "isPublisher": {
            "type": "boolean",
            "description": "Flag indicating if this user or group is a publisher of this list.\r\nNull means: do not change this flag's value when inserting into database.",
            "nullable": true
          }
        }
      },
      "GrantaServerApiListsDtoUserPermissionInputDto": {
        "type": "object",
        "properties": {
          "userOrGroupIdentifier": {
            "type": "string",
            "description": "The user or group identifier",
            "format": "uuid"
          },
          "flags": {
            "$ref": "#/components/schemas/GrantaServerApiListsDtoRecordListPermissionFlagsDto"
          }
        }
      },
      "GrantaServerApiAdminMiVersion": {
        "type": "object",
        "properties": {
          "binaryCompatibilityVersion": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "majorMinorVersion": {
            "type": "string"
          }
        }
      },
      "GrantaServerApiSchemaAttributesAttributeThresholdType": {
        "enum": [
          "exists",
          "doesNotExist",
          "atLeast",
          "atMost",
          "equal",
          "between",
          "isOneOf",
          "contains",
          "isNot",
          "isAllOf",
          "none"
        ],
        "type": "string"
      },
      "GrantaServerApiSchemaSlimEntitiesSlimNamedEntity": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "GrantaServerApiSchemaAttributesAttribute+AttributeInfo": {
        "type": "object",
        "properties": {
          "typeCode": {
            "type": "string",
            "nullable": true
          },
          "chartable": {
            "type": "boolean"
          },
          "expressionable": {
            "type": "boolean"
          },
          "linkable": {
            "type": "boolean"
          },
          "extendedName": {
            "type": "string",
            "nullable": true
          },
          "isMetaAttribute": {
            "type": "boolean"
          },
          "orderedMetaAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimNamedEntity"
            },
            "nullable": true
          },
          "standardNames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimNamedEntity"
            },
            "nullable": true
          },
          "primaryDataLinkGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimNamedEntity"
            },
            "nullable": true
          },
          "foreignDataLinkGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimNamedEntity"
            },
            "nullable": true
          },
          "primaryDynamicLinkGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimNamedEntity"
            },
            "nullable": true
          },
          "foreignDynamicLinkGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimNamedEntity"
            },
            "nullable": true
          }
        }
      },
      "GrantaServerApiSchemaAttributesAttribute": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesPointAttribute"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesIntegerAttribute"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesRangeAttribute"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesLogicalAttribute"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesShortTextAttribute"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesLongTextAttribute"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesDateTimeAttribute"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesDiscreteAttribute"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesHyperlinkAttribute"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesFileAttribute"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesPictureAttribute"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesTabularAttribute"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesFloatFunctionalAttribute"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesDiscreteFunctionalAttribute"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesMathsFunctionalAttribute"
          }
        ],
        "properties": {
          "defaultThresholdType": {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttributeThresholdType"
          },
          "axisName": {
            "type": "string",
            "nullable": true
          },
          "aboutAttribute": {
            "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimNamedEntity"
          },
          "info": {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute+AttributeInfo"
          },
          "displayNames": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "point": "#/components/schemas/GrantaServerApiSchemaAttributesPointAttribute",
            "integer": "#/components/schemas/GrantaServerApiSchemaAttributesIntegerAttribute",
            "range": "#/components/schemas/GrantaServerApiSchemaAttributesRangeAttribute",
            "logical": "#/components/schemas/GrantaServerApiSchemaAttributesLogicalAttribute",
            "shortText": "#/components/schemas/GrantaServerApiSchemaAttributesShortTextAttribute",
            "longText": "#/components/schemas/GrantaServerApiSchemaAttributesLongTextAttribute",
            "dateTime": "#/components/schemas/GrantaServerApiSchemaAttributesDateTimeAttribute",
            "discrete": "#/components/schemas/GrantaServerApiSchemaAttributesDiscreteAttribute",
            "hyperlink": "#/components/schemas/GrantaServerApiSchemaAttributesHyperlinkAttribute",
            "file": "#/components/schemas/GrantaServerApiSchemaAttributesFileAttribute",
            "picture": "#/components/schemas/GrantaServerApiSchemaAttributesPictureAttribute",
            "link": "#/components/schemas/GrantaServerApiSchemaAttributesTabularAttribute",
            "floatFunctional": "#/components/schemas/GrantaServerApiSchemaAttributesFloatFunctionalAttribute",
            "discreteFunctional": "#/components/schemas/GrantaServerApiSchemaAttributesDiscreteFunctionalAttribute",
            "mathsFunctional": "#/components/schemas/GrantaServerApiSchemaAttributesMathsFunctionalAttribute"
          }
        }
      },
      "SystemNetHttpStatusCode": {
        "enum": [
          "Continue",
          "SwitchingProtocols",
          "OK",
          "Created",
          "Accepted",
          "NonAuthoritativeInformation",
          "NoContent",
          "ResetContent",
          "PartialContent",
          "MultipleChoices",
          "Ambiguous",
          "MovedPermanently",
          "Moved",
          "Found",
          "Redirect",
          "SeeOther",
          "RedirectMethod",
          "NotModified",
          "UseProxy",
          "Unused",
          "TemporaryRedirect",
          "RedirectKeepVerb",
          "BadRequest",
          "Unauthorized",
          "PaymentRequired",
          "Forbidden",
          "NotFound",
          "MethodNotAllowed",
          "NotAcceptable",
          "ProxyAuthenticationRequired",
          "RequestTimeout",
          "Conflict",
          "Gone",
          "LengthRequired",
          "PreconditionFailed",
          "RequestEntityTooLarge",
          "RequestUriTooLong",
          "UnsupportedMediaType",
          "RequestedRangeNotSatisfiable",
          "ExpectationFailed",
          "UpgradeRequired",
          "InternalServerError",
          "NotImplemented",
          "BadGateway",
          "ServiceUnavailable",
          "GatewayTimeout",
          "HttpVersionNotSupported"
        ],
        "type": "string"
      },
      "GrantaServerApiExceptionsErrorDetail": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "GrantaServerApiExceptionsAttributeDeletionException": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "$ref": "#/components/schemas/SystemNetHttpStatusCode"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiExceptionsErrorDetail"
            },
            "nullable": true
          }
        }
      },
      "GrantaServerApiSchemaSlimEntitiesSlimConstant": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "description": "Constant base data (name and guid)"
      },
      "GrantaServerApiSchemaSlimEntitiesSlimUnit": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "GrantaServerApiSchemaConstant": {
        "type": "object",
        "properties": {
          "unit": {
            "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimUnit"
          },
          "value": {
            "type": "number",
            "format": "double"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "description": "Constant used in equations"
      },
      "GrantaServerApiSchemaDatabaseStatus": {
        "enum": [
          "Unknown",
          "OK",
          "Unloaded",
          "Loading",
          "Unloading",
          "FailedToLoad",
          "FailedToUnload",
          "Disabled"
        ],
        "type": "string"
      },
      "GrantaServerApiSchemaSlimEntitiesSlimDatabase": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "versionGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/GrantaServerApiSchemaDatabaseStatus"
          },
          "isReadOnly": {
            "type": "boolean"
          },
          "isLocked": {
            "type": "boolean"
          },
          "indexInSync": {
            "type": "boolean",
            "nullable": true
          },
          "schemaVersion": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "GrantaServerApiSchemaDatabase": {
        "type": "object",
        "properties": {
          "author": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "type": "string",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "isAccessControlled": {
            "type": "boolean",
            "nullable": true
          },
          "key": {
            "type": "string",
            "nullable": true
          },
          "versionGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/GrantaServerApiSchemaDatabaseStatus"
          },
          "isReadOnly": {
            "type": "boolean"
          },
          "isLocked": {
            "type": "boolean"
          },
          "indexInSync": {
            "type": "boolean",
            "nullable": true
          },
          "schemaVersion": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "GrantaServerApiSchemaDiscreteType": {
        "type": "object",
        "properties": {
          "isOrdered": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "GrantaServerApiSchemaSlimEntitiesSlimObjects": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimNamedEntity"
            },
            "nullable": true
          }
        }
      },
      "GrantaServerApiSchemaDiscreteValue": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "GrantaServerApiSchemaLayoutsLayoutSectionDetailType": {
        "enum": [
          "slim",
          "full"
        ],
        "type": "string",
        "description": "The types of detail returned for a layout section."
      },
      "GrantaServerApiSchemaLayoutsLayoutSection": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimLayoutSection"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsFullLayoutSection"
          }
        ],
        "properties": {
          "displayNames": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "discriminator": {
          "propertyName": "sectionDetailType",
          "mapping": {
            "slim": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimLayoutSection",
            "full": "#/components/schemas/GrantaServerApiSchemaLayoutsFullLayoutSection"
          }
        }
      },
      "GrantaServerApiSchemaSlimEntitiesSlimLayoutSection": {
        "required": [
          "sectionDetailType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsLayoutSection"
          },
          {
            "type": "object",
            "properties": {
              "sectionDetailType": {
                "type": "string",
                "default": "slim"
              }
            }
          }
        ],
        "x-discriminator-value": "slim"
      },
      "GrantaServerApiSchemaSlimEntitiesSlimEntity": {
        "type": "object",
        "properties": {
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "GrantaServerApiSchemaLayoutsNewLayoutItemType": {
        "enum": [
          "attribute",
          "recordLink",
          "smartLink",
          "crossDatabaseLink",
          "associationChain"
        ],
        "type": "string",
        "description": "The types of new layout item that are supported by the API."
      },
      "GrantaServerApiSchemaLayoutsNewLayoutItem": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsNewLayoutAttributeItem"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsNewLayoutRecordLinkItem"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsNewLayoutSmartLinkItem"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsNewLayoutCrossDatabaseLinkItem"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsNewLayoutAssociationChainItem"
          }
        ],
        "properties": {
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "discriminator": {
          "propertyName": "itemType",
          "mapping": {
            "attribute": "#/components/schemas/GrantaServerApiSchemaLayoutsNewLayoutAttributeItem",
            "recordLink": "#/components/schemas/GrantaServerApiSchemaLayoutsNewLayoutRecordLinkItem",
            "smartLink": "#/components/schemas/GrantaServerApiSchemaLayoutsNewLayoutSmartLinkItem",
            "crossDatabaseLink": "#/components/schemas/GrantaServerApiSchemaLayoutsNewLayoutCrossDatabaseLinkItem",
            "associationChain": "#/components/schemas/GrantaServerApiSchemaLayoutsNewLayoutAssociationChainItem"
          }
        }
      },
      "GrantaServerApiSchemaSlimEntitiesSlimLayout": {
        "type": "object",
        "properties": {
          "displayNames": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "GrantaServerApiSchemaLayoutsLayout": {
        "type": "object",
        "properties": {
          "sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsLayoutSection"
            },
            "nullable": true
          },
          "displayNames": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "GrantaServerApiSchemaParametersParameterType": {
        "enum": [
          "discrete",
          "numeric"
        ],
        "type": "string"
      },
      "GrantaServerApiSchemaParametersParameter": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaParametersDiscreteParameter"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaParametersNumericParameter"
          }
        ],
        "properties": {
          "helpPath": {
            "type": "string",
            "nullable": true
          },
          "displayNames": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "discrete": "#/components/schemas/GrantaServerApiSchemaParametersDiscreteParameter",
            "numeric": "#/components/schemas/GrantaServerApiSchemaParametersNumericParameter"
          }
        }
      },
      "GrantaServerApiSchemaParametersParameterValueType": {
        "enum": [
          "discrete",
          "numeric"
        ],
        "type": "string"
      },
      "GrantaServerApiSchemaParametersParameterValue": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaParametersDiscreteParameterValue"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaParametersNumericParameterValue"
          }
        ],
        "properties": {
          "isDefault": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "discrete": "#/components/schemas/GrantaServerApiSchemaParametersDiscreteParameterValue",
            "numeric": "#/components/schemas/GrantaServerApiSchemaParametersNumericParameterValue"
          }
        }
      },
      "GrantaServerApiSchemaSlimEntitiesSlimProfile": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key is a unique identifier of a profile. Separate from guid.",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "description": "Guid is a unique identifier of a profile. Separate from key.",
            "format": "uuid",
            "nullable": true
          },
          "groupName": {
            "type": "string",
            "nullable": true
          },
          "isImplicit": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "description": "Profile stripped down to only the basic fields"
      },
      "GrantaServerApiSchemaAllProfilesInfo": {
        "type": "object",
        "properties": {
          "profiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimProfile"
            },
            "nullable": true
          },
          "defaultProfile": {
            "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimProfile"
          }
        },
        "description": "Object containing list of all profiles as well as default profile if it is set and can be found within the list."
      },
      "GrantaServerApiSchemaSlimEntitiesSlimProfileTable": {
        "type": "object",
        "properties": {
          "databaseGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "databaseFallbackHint": {
            "type": "string",
            "nullable": true
          },
          "tableGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "tableFallbackHint": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "description": "Profile table stripped to just the basic fields"
      },
      "GrantaServerApiSchemaProfile": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "nullable": true
          },
          "homepageUrl": {
            "type": "string",
            "nullable": true
          },
          "profileTables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimProfileTable"
            },
            "nullable": true
          },
          "key": {
            "type": "string",
            "description": "Key is a unique identifier of a profile. Separate from guid.",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "description": "Guid is a unique identifier of a profile. Separate from key.",
            "format": "uuid",
            "nullable": true
          },
          "groupName": {
            "type": "string",
            "nullable": true
          },
          "isImplicit": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "description": "A profile, consisting of a set of tables from one or more databases."
      },
      "GrantaServerApiSchemaProfileTable": {
        "type": "object",
        "properties": {
          "subsetGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "subsetFallbackHint": {
            "type": "string",
            "nullable": true
          },
          "layoutGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "layoutFallbackHint": {
            "type": "string",
            "nullable": true
          },
          "databaseGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "databaseFallbackHint": {
            "type": "string",
            "nullable": true
          },
          "tableGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "tableFallbackHint": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "description": "A table within a profile. Contains display customization."
      },
      "GrantaServerApiSchemaStandardName": {
        "type": "object",
        "properties": {
          "mappedAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimNamedEntity"
            },
            "nullable": true
          },
          "mappedParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimNamedEntity"
            },
            "nullable": true
          },
          "mappedRecordLinkGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimNamedEntity"
            },
            "nullable": true
          },
          "mappedCrossDatabaseRecordLinkGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimNamedEntity"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "GrantaServerApiSchemaSlimEntitiesSlimSubset": {
        "type": "object",
        "properties": {
          "displayNames": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "GrantaServerApiSchemaSubset": {
        "type": "object",
        "properties": {
          "associatedLayout": {
            "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimLayout"
          },
          "displayNames": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "GrantaServerApiSchemaSlimEntitiesSlimTable": {
        "type": "object",
        "properties": {
          "isHiddenFromBrowse": {
            "type": "boolean"
          },
          "isHiddenFromSearch": {
            "type": "boolean"
          },
          "isVersioned": {
            "type": "boolean"
          },
          "displayNames": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "GrantaServerApiSchemaTable": {
        "type": "object",
        "properties": {
          "defaultSubset": {
            "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimSubset"
          },
          "subsets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimSubset"
            },
            "nullable": true
          },
          "defaultLayout": {
            "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimLayout"
          },
          "layouts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimLayout"
            },
            "nullable": true
          },
          "isHiddenFromBrowse": {
            "type": "boolean"
          },
          "isHiddenFromSearch": {
            "type": "boolean"
          },
          "isVersioned": {
            "type": "boolean"
          },
          "displayNames": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "GrantaServerApiSchemaUnitsUnit": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "equation": {
            "type": "string",
            "nullable": true
          },
          "symbol": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "GrantaServerApiSchemaUnitsUnitMapping": {
        "type": "object",
        "properties": {
          "unit": {
            "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimUnit"
          },
          "equivalentUnit": {
            "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimUnit"
          }
        }
      },
      "GrantaServerApiSchemaUnitsUnitSystem": {
        "type": "object",
        "properties": {
          "unitMappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnitMapping"
            },
            "nullable": true
          },
          "displayNames": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "description": "Unit system contains mappings from any unit to equivalent unit within this unit system.\r\nIf some unit comes from particular unit system it will be mapped to itself."
      },
      "GrantaServerApiSchemaUnitsUnitEquivalent": {
        "type": "object",
        "properties": {
          "unit": {
            "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnit"
          },
          "unitSystem": {
            "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnitSystem"
          },
          "equivalentUnit": {
            "$ref": "#/components/schemas/GrantaServerApiSchemaUnitsUnit"
          }
        }
      },
      "GrantaServerApiSchemaUnitsUnitUsage": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimNamedEntity"
            },
            "nullable": true
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimNamedEntity"
            },
            "nullable": true
          },
          "constants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimNamedEntity"
            },
            "nullable": true
          },
          "expressions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimNamedEntity"
            },
            "nullable": true
          },
          "units": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimUnit"
            },
            "nullable": true
          }
        }
      },
      "GrantaServerApiSchemaSlimEntitiesSlimUnitSystem": {
        "type": "object",
        "properties": {
          "displayNames": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "description": "Unit system stripped down to its basic fields (mappings excluded)."
      },
      "GrantaServerApiSearchSortDirection": {
        "enum": [
          "ascending",
          "descending"
        ],
        "type": "string"
      },
      "GrantaServerApiSearchSortCriterion": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchAttributeSortCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchRecordPropertySortCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchRelevanceSortCriterion"
          }
        ],
        "properties": {
          "sortDirection": {
            "$ref": "#/components/schemas/GrantaServerApiSearchSortDirection"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "attribute": "#/components/schemas/GrantaServerApiSearchAttributeSortCriterion",
            "recordProperty": "#/components/schemas/GrantaServerApiSearchRecordPropertySortCriterion",
            "relevance": "#/components/schemas/GrantaServerApiSearchRelevanceSortCriterion"
          }
        }
      },
      "GrantaServerApiSearchSearchRequest": {
        "type": "object",
        "properties": {
          "criterion": {
            "$ref": "#/components/schemas/GrantaServerApiSearchCriterion"
          },
          "sortCriteria": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiSearchSortCriterion"
            },
            "description": "An optional set of attribute based sort criteria. If none are provided, the results will be sorted in descending relevance order.",
            "nullable": true
          }
        }
      },
      "GrantaServerApiSearchSortingValue": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDoubleSortingValue"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchLongSortingValue"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchStringSortingValue"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "double": "#/components/schemas/GrantaServerApiSearchDoubleSortingValue",
            "long": "#/components/schemas/GrantaServerApiSearchLongSortingValue",
            "text": "#/components/schemas/GrantaServerApiSearchStringSortingValue"
          }
        }
      },
      "GrantaServerApiSearchSearchResult": {
        "type": "object",
        "properties": {
          "databaseKey": {
            "type": "string",
            "nullable": true
          },
          "recordHistoryIdentity": {
            "type": "integer",
            "format": "int64"
          },
          "recordIdentity": {
            "type": "integer",
            "format": "int64"
          },
          "recordHistoryGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "recordGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "recordName": {
            "type": "string",
            "nullable": true
          },
          "recordColor": {
            "type": "string",
            "nullable": true
          },
          "tableIdentity": {
            "type": "integer",
            "format": "int32"
          },
          "cubicSplineStatus": {
            "type": "string",
            "nullable": true
          },
          "versionControlState": {
            "type": "string",
            "nullable": true
          },
          "versionNumber": {
            "type": "integer",
            "format": "int64"
          },
          "score": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "sortingValue": {
            "$ref": "#/components/schemas/GrantaServerApiSearchSortingValue"
          }
        }
      },
      "GrantaServerApiSearchSearchResponse": {
        "type": "object",
        "properties": {
          "totalResultCount": {
            "type": "integer",
            "format": "int64"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiSearchSearchResult"
            },
            "nullable": true
          }
        }
      },
      "GrantaServerApiAggregationsAggregationAttribute": {
        "type": "object",
        "properties": {
          "identity": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "isMetaAttribute": {
            "type": "boolean"
          },
          "attributeType": {
            "$ref": "#/components/schemas/GrantaServerApiAttributeType"
          },
          "tabularAttributeIdentity": {
            "type": "integer",
            "description": "The identity of the owning tabular attribute.",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "GrantaServerApiAggregationsTableFilter": {
        "type": "object",
        "properties": {
          "identity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "subsetIdentity": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationAttribute"
            },
            "nullable": true
          }
        }
      },
      "GrantaServerApiAggregationsDatabaseFilter": {
        "type": "object",
        "properties": {
          "databaseKey": {
            "type": "string",
            "nullable": true
          },
          "tables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiAggregationsTableFilter"
            },
            "description": "Results are only returned from the table and attributes specified in the filters.",
            "nullable": true
          }
        }
      },
      "GrantaServerApiAggregationsSuggestionsRequest": {
        "type": "object",
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiAggregationsDatabaseFilter"
            },
            "description": "Results are only returned from the table and attributes specified in the filters.",
            "nullable": true
          },
          "numberOfTerms": {
            "type": "integer",
            "description": "The response contains at most this number of terms.",
            "format": "int32"
          },
          "prefix": {
            "type": "string",
            "description": "All results in the response will start with this prefix.",
            "nullable": true
          }
        },
        "description": "Request a list of suggested search terms."
      },
      "GrantaServerApiSearchAttributeCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchCriterion"
          }
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchAttributeMatchesCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchAttributeExistsCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchAttributeNotApplicableCriterion"
          }
        ],
        "properties": {
          "identity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "isMetaAttribute": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "default": "attribute"
          }
        },
        "description": "Base class for attribute criterions. Either the attribute identity or its name must be provided.",
        "discriminator": {
          "propertyName": "attributeCriterionType",
          "mapping": {
            "matches": "#/components/schemas/GrantaServerApiSearchAttributeMatchesCriterion",
            "exists": "#/components/schemas/GrantaServerApiSearchAttributeExistsCriterion",
            "notApplicable": "#/components/schemas/GrantaServerApiSearchAttributeNotApplicableCriterion"
          }
        },
        "x-discriminator-value": "attribute"
      },
      "GrantaServerApiSearchDatumCriterion": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDateTimeDatumCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDiscreteFunctionalRangeDatumCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDiscreteFunctionalValuesDatumCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDiscreteIdentityValuesDatumCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDiscreteRangeDatumCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDiscreteTextDatumCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDiscreteTextValuesDatumCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchFileDatumCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchFloatFunctionalDatumCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchHyperlinkDatumCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchIntegerDatumCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchLinkDatumCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchLogicalDatumCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchLongTextDatumCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchMathsFunctionalDatumCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchPictureDatumCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchPointDatumCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchRangeDatumCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchShortTextDatumCriterion"
          }
        ],
        "description": "Inner criterion of an attribute search criterion. The specific criterion used should match the type of the attribute specified on the outer criterion (Note that there are multiple types that can be used with a discrete attribute, depending on the type of search.)",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "dateTime": "#/components/schemas/GrantaServerApiSearchDateTimeDatumCriterion",
            "discreteFunctionalRange": "#/components/schemas/GrantaServerApiSearchDiscreteFunctionalRangeDatumCriterion",
            "discreteFunctionalValues": "#/components/schemas/GrantaServerApiSearchDiscreteFunctionalValuesDatumCriterion",
            "discreteIdentityValues": "#/components/schemas/GrantaServerApiSearchDiscreteIdentityValuesDatumCriterion",
            "discreteRange": "#/components/schemas/GrantaServerApiSearchDiscreteRangeDatumCriterion",
            "discreteText": "#/components/schemas/GrantaServerApiSearchDiscreteTextDatumCriterion",
            "discreteTextValues": "#/components/schemas/GrantaServerApiSearchDiscreteTextValuesDatumCriterion",
            "file": "#/components/schemas/GrantaServerApiSearchFileDatumCriterion",
            "floatFunctional": "#/components/schemas/GrantaServerApiSearchFloatFunctionalDatumCriterion",
            "hyperlink": "#/components/schemas/GrantaServerApiSearchHyperlinkDatumCriterion",
            "integer": "#/components/schemas/GrantaServerApiSearchIntegerDatumCriterion",
            "link": "#/components/schemas/GrantaServerApiSearchLinkDatumCriterion",
            "logical": "#/components/schemas/GrantaServerApiSearchLogicalDatumCriterion",
            "longText": "#/components/schemas/GrantaServerApiSearchLongTextDatumCriterion",
            "mathsFunctional": "#/components/schemas/GrantaServerApiSearchMathsFunctionalDatumCriterion",
            "picture": "#/components/schemas/GrantaServerApiSearchPictureDatumCriterion",
            "point": "#/components/schemas/GrantaServerApiSearchPointDatumCriterion",
            "range": "#/components/schemas/GrantaServerApiSearchRangeDatumCriterion",
            "shortText": "#/components/schemas/GrantaServerApiSearchShortTextDatumCriterion"
          }
        }
      },
      "GrantaServerApiSearchAttributeMatchesCriterion": {
        "required": [
          "attributeCriterionType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchAttributeCriterion"
          },
          {
            "type": "object",
            "properties": {
              "innerCriterion": {
                "$ref": "#/components/schemas/GrantaServerApiSearchDatumCriterion"
              },
              "attributeCriterionType": {
                "type": "string",
                "default": "matches"
              }
            }
          }
        ],
        "description": "Criterion for a search matching values in a given attribute. Either the attribute identity or its name must be provided.",
        "x-discriminator-value": "matches"
      },
      "GrantaServerApiSearchDatumExistsCriterion": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          }
        },
        "description": "Inner criterion of an attribute search criterion for when the only bit of information about the datum that we want to convey is its type"
      },
      "GrantaServerApiSearchAttributeExistsCriterion": {
        "required": [
          "attributeCriterionType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchAttributeCriterion"
          },
          {
            "type": "object",
            "properties": {
              "innerCriterion": {
                "$ref": "#/components/schemas/GrantaServerApiSearchDatumExistsCriterion"
              },
              "attributeCriterionType": {
                "type": "string",
                "default": "exists"
              }
            }
          }
        ],
        "description": "Criterion for matching record where there is data on the attribute specified. Either the attribute identity or its name must be provided.",
        "x-discriminator-value": "exists"
      },
      "GrantaServerApiSearchAttributeNotApplicableCriterion": {
        "required": [
          "attributeCriterionType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchAttributeCriterion"
          },
          {
            "type": "object",
            "properties": {
              "attributeCriterionType": {
                "type": "string",
                "default": "notApplicable"
              }
            }
          }
        ],
        "description": "Criterion for matching record where there is not applicable data on the attribute specified. Either the attribute identity or its name must be provided.",
        "x-discriminator-value": "notApplicable"
      },
      "GrantaServerApiSearchBooleanCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchCriterion"
          },
          {
            "type": "object",
            "properties": {
              "all": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSearchCriterion"
                },
                "description": "Only records that match all of these criteria are returned.",
                "nullable": true
              },
              "any": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSearchCriterion"
                },
                "description": "Only results that match any of these criteria are returned.",
                "nullable": true
              },
              "none": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSearchCriterion"
                },
                "description": "Only results that match none of these criteria are returned.",
                "nullable": true
              },
              "type": {
                "type": "string",
                "default": "boolean"
              }
            }
          }
        ],
        "description": "boolean: Criterion that wraps other criteria in order to specify how the results should be joined together.",
        "x-discriminator-value": "boolean"
      },
      "GrantaServerApiSearchBoost": {
        "type": "object",
        "properties": {
          "attributeIdentity": {
            "type": "integer",
            "format": "int32"
          },
          "boostFactor": {
            "type": "number",
            "format": "double",
            "readOnly": true
          }
        }
      },
      "GrantaServerApiSearchFreeTextCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchCriterion"
          },
          {
            "type": "object",
            "properties": {
              "identities": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "nullable": true
              },
              "value": {
                "type": "string",
                "nullable": true
              },
              "identitiesToBoost": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSearchBoost"
                },
                "nullable": true
              },
              "type": {
                "type": "string",
                "default": "text"
              }
            }
          }
        ],
        "description": "Runs a query for the specified term. An optional list of attribute identities is provided - if this is missing (null), we search everything; if it's empty, we'll return nothing.",
        "x-discriminator-value": "text"
      },
      "GrantaServerApiSearchRecordListMemberCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchCriterion"
          },
          {
            "type": "object",
            "properties": {
              "recordListIdentifiers": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                },
                "nullable": true
              },
              "type": {
                "type": "string",
                "default": "recordListMember"
              }
            }
          }
        ],
        "description": "Criterion that returns records contained within at least one of the referenced record lists.",
        "x-discriminator-value": "recordListMember"
      },
      "GrantaServerApiSearchSearchableRecordProperty": {
        "enum": [
          "createdDate",
          "creator",
          "lastModifiedDate",
          "lastModifier",
          "recordType",
          "colour",
          "versionState",
          "versionNumber",
          "recordName",
          "treeName",
          "databaseKey",
          "tableName",
          "tableIdentity"
        ],
        "type": "string",
        "description": "Properties of a record that can be used to in searches"
      },
      "GrantaServerApiSearchRecordPropertyCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchCriterion"
          },
          {
            "type": "object",
            "properties": {
              "property": {
                "$ref": "#/components/schemas/GrantaServerApiSearchSearchableRecordProperty"
              },
              "innerCriterion": {
                "$ref": "#/components/schemas/GrantaServerApiSearchDatumCriterion"
              },
              "type": {
                "type": "string",
                "default": "recordProperty"
              }
            }
          }
        ],
        "description": "Criterion for a search matching values in a given record property.",
        "x-discriminator-value": "recordProperty"
      },
      "GrantaServerApiSearchRecordReferenceCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchCriterion"
          },
          {
            "type": "object",
            "properties": {
              "databaseKey": {
                "type": "string",
                "nullable": true
              },
              "recordIdentity": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "recordGuid": {
                "type": "string",
                "format": "uuid",
                "nullable": true
              },
              "type": {
                "type": "string",
                "default": "reference"
              }
            }
          }
        ],
        "description": "Criterion that returns records matching a specific reference. The database key must be provided, along with either the record GUID or the record identity.",
        "x-discriminator-value": "reference"
      },
      "GrantaServerApiSearchRecordSubsetCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchCriterion"
          },
          {
            "type": "object",
            "properties": {
              "subsetIdentity": {
                "type": "integer",
                "format": "int32"
              },
              "type": {
                "type": "string",
                "default": "subset"
              }
            }
          }
        ],
        "description": "Criterion that returns records matching a specific reference. The database key must be provided, along with either the record GUID or the record identity.",
        "x-discriminator-value": "subset"
      },
      "GrantaServerApiSearchLinkingValueMatchBehaviour": {
        "enum": [
          "AllRows",
          "VisibleRows",
          "ExactMatchMatchingRows",
          "FreeTextMatchingRows"
        ],
        "type": "string",
        "description": "Enum for use in the Granta.Server.Api.Search.TabularLinkingValueCriterion to control which tabular rows are returned"
      },
      "GrantaServerApiSearchTabularLinkingValueCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchCriterion"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "nullable": true
              },
              "linkingValueMatchBehaviour": {
                "$ref": "#/components/schemas/GrantaServerApiSearchLinkingValueMatchBehaviour"
              },
              "type": {
                "type": "string",
                "default": "tabularLinkingValue"
              }
            }
          }
        ],
        "x-discriminator-value": "tabularLinkingValue"
      },
      "GrantaServerApiSearchDateTimeDatumCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDatumCriterion"
          },
          {
            "type": "object",
            "properties": {
              "gte": {
                "type": "string",
                "description": "Greater than or equal to",
                "format": "date-time",
                "nullable": true,
                "readOnly": true
              },
              "lte": {
                "type": "string",
                "description": "Less than or equal to",
                "format": "date-time",
                "nullable": true,
                "readOnly": true
              },
              "type": {
                "type": "string",
                "default": "dateTime"
              }
            }
          }
        ],
        "description": "dateTime: Criterion for matching records where the datetime data is within the given bounds. If one of gte or lte is null, this will be an open ended search.",
        "x-discriminator-value": "dateTime"
      },
      "GrantaServerApiSearchParameterConstraint": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDiscreteParameterNameConstraint"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDiscreteParameterValueConstraint"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchNumericParameterConstraint"
          }
        ],
        "properties": {
          "parameter": {
            "$ref": "#/components/schemas/GrantaServerApiObjectIdentifier"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "discreteName": "#/components/schemas/GrantaServerApiSearchDiscreteParameterNameConstraint",
            "discreteValue": "#/components/schemas/GrantaServerApiSearchDiscreteParameterValueConstraint",
            "numeric": "#/components/schemas/GrantaServerApiSearchNumericParameterConstraint"
          }
        }
      },
      "GrantaServerApiSearchDiscreteFunctionalRangeDatumCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDatumCriterion"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "discreteFunctionalRange"
              },
              "gte": {
                "type": "integer",
                "description": "Greater than or equal to",
                "format": "int32",
                "nullable": true,
                "readOnly": true
              },
              "lte": {
                "type": "integer",
                "description": "Less than or equal to",
                "format": "int32",
                "nullable": true,
                "readOnly": true
              },
              "constraints": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSearchParameterConstraint"
                },
                "description": "Optional unit string. If not included, the gte and lte values are assumed to be in database units.",
                "nullable": true,
                "readOnly": true
              }
            }
          }
        ],
        "description": "discreteFunctionalRange: Criterion for matching records with discrete functional data where the discrete values are in the given range. If one of gte or lte is null, this will be an open ended search",
        "x-discriminator-value": "discreteFunctionalRange"
      },
      "GrantaServerApiSearchDiscreteFunctionalValuesDatumCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDatumCriterion"
          },
          {
            "type": "object",
            "properties": {
              "any": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "Match any of these discrete type identities",
                "nullable": true
              },
              "type": {
                "type": "string",
                "default": "discreteFunctionalValues"
              },
              "constraints": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSearchParameterConstraint"
                },
                "description": "Constraints on the parameters of the attribute. Unspecified parameters will be assumed to be unconstrained.",
                "nullable": true,
                "readOnly": true
              }
            }
          }
        ],
        "description": "discreteFunctionalValues: Criterion for matching records with discrete functional data where the discrete values are one of the given values",
        "x-discriminator-value": "discreteFunctionalValues"
      },
      "GrantaServerApiSearchDiscreteIdentityValuesDatumCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDatumCriterion"
          },
          {
            "type": "object",
            "properties": {
              "all": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "Match all of these discrete value identities",
                "nullable": true
              },
              "any": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "Match any of these discrete type identities",
                "nullable": true
              },
              "none": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "Match none of the discrete type identities",
                "nullable": true
              },
              "type": {
                "type": "string",
                "default": "discreteIdentityValues"
              }
            }
          }
        ],
        "description": "discreteIdentityValues: Criterion for matching records where the discrete data matches any, all and/or none of the provided discrete value identities. One or more field can be null.",
        "x-discriminator-value": "discreteIdentityValues"
      },
      "GrantaServerApiSearchDiscreteRangeDatumCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDatumCriterion"
          },
          {
            "type": "object",
            "properties": {
              "gte": {
                "type": "integer",
                "description": "Greater than or equal to",
                "format": "int32",
                "nullable": true,
                "readOnly": true
              },
              "lte": {
                "type": "integer",
                "description": "Less than or equal to",
                "format": "int32",
                "nullable": true,
                "readOnly": true
              },
              "type": {
                "type": "string",
                "default": "discreteRange"
              }
            }
          }
        ],
        "description": "discreteRange: Criterion for matching records for where the discrete values are in the given range. If one of gte or lte is null, this will be an open ended search",
        "x-discriminator-value": "discreteRange"
      },
      "GrantaServerApiSearchDiscreteTextDatumCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDatumCriterion"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "nullable": true
              },
              "type": {
                "type": "string",
                "default": "discreteText"
              }
            }
          }
        ],
        "description": "discreteText: Criterion for matching records where the text of the discrete data contains the specified value.",
        "x-discriminator-value": "discreteText"
      },
      "GrantaServerApiSearchDiscreteTextValuesDatumCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDatumCriterion"
          },
          {
            "type": "object",
            "properties": {
              "all": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "nullable": true
              },
              "any": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "nullable": true
              },
              "none": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "nullable": true
              },
              "type": {
                "type": "string",
                "default": "discreteTextValues"
              }
            }
          }
        ],
        "description": "discreteTextValues: Criterion for matching records where the text in the discrete data matches all, any and/or none of the specified text strings. One of more field can be null.",
        "x-discriminator-value": "discreteTextValues"
      },
      "GrantaServerApiSearchFileDatumCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDatumCriterion"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "nullable": true
              },
              "type": {
                "type": "string",
                "default": "file"
              }
            }
          }
        ],
        "x-discriminator-value": "file"
      },
      "GrantaServerApiSearchFloatFunctionalDatumCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDatumCriterion"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "floatFunctional"
              },
              "gte": {
                "type": "number",
                "description": "Greater than or equal to",
                "format": "double",
                "nullable": true,
                "readOnly": true
              },
              "lte": {
                "type": "number",
                "description": "Less than or equal to",
                "format": "double",
                "nullable": true,
                "readOnly": true
              },
              "unit": {
                "type": "string",
                "description": "Optional unit string. If not included, the gte and lte values are assumed to be in database units.",
                "nullable": true
              },
              "constraints": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSearchParameterConstraint"
                },
                "description": "Constraints on the parameters of the attribute. Unspecified parameters will be assumed to be unconstrained.",
                "nullable": true,
                "readOnly": true
              }
            }
          }
        ],
        "description": "floatFunctional: Criterion for matching records with float functional data",
        "x-discriminator-value": "floatFunctional"
      },
      "GrantaServerApiSearchHyperlinkDatumCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDatumCriterion"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "nullable": true
              },
              "type": {
                "type": "string",
                "default": "hyperlink"
              }
            }
          }
        ],
        "description": "hyperlink: Criterion for matching records where the hyperlink description contains the given value.",
        "x-discriminator-value": "hyperlink"
      },
      "GrantaServerApiSearchIntegerDatumCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDatumCriterion"
          },
          {
            "type": "object",
            "properties": {
              "gte": {
                "type": "integer",
                "description": "Greater than or equal to",
                "format": "int32",
                "nullable": true,
                "readOnly": true
              },
              "lte": {
                "type": "integer",
                "description": "Less than or equal to",
                "format": "int32",
                "nullable": true,
                "readOnly": true
              },
              "type": {
                "type": "string",
                "default": "integer"
              }
            }
          }
        ],
        "description": "integer: Criterion for matching records where the integer data is within the given bounds. If one of gte or lte is null, this will be an open ended search.",
        "x-discriminator-value": "integer"
      },
      "GrantaServerApiSearchLinkDatumType": {
        "enum": [
          "recordLink",
          "crossDatabaseLink",
          "reverseCrossDatabaseLink",
          "tabularAttribute"
        ],
        "type": "string"
      },
      "GrantaServerApiSearchLinkDatumCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDatumCriterion"
          },
          {
            "type": "object",
            "properties": {
              "targetTableIdentity": {
                "type": "integer",
                "description": "Table containing the linked records",
                "format": "int32",
                "nullable": true
              },
              "targetDatabaseKey": {
                "type": "string",
                "description": "Database containing the linked records. For reverse cross database links, this is the database where the link is defined",
                "nullable": true
              },
              "localCriterion": {
                "$ref": "#/components/schemas/GrantaServerApiSearchCriterion"
              },
              "linkDatumType": {
                "$ref": "#/components/schemas/GrantaServerApiSearchLinkDatumType"
              },
              "targetAttributeIdentity": {
                "type": "integer",
                "description": "For tabular searching: this is the identity of the short-text linking attribute.\r\nOtherwise null.",
                "format": "int32",
                "nullable": true
              },
              "innerCriterion": {
                "$ref": "#/components/schemas/GrantaServerApiSearchCriterion"
              },
              "type": {
                "type": "string",
                "default": "link"
              }
            }
          }
        ],
        "description": "link: Criterion for matching records that are linked to records that match the inner criterion. The target database and table specify the location of the linked records.\r\nThe inner criterion must be a criterion that applies to the records in the linked table. The link group followed will be the link group specified on the outer AttributeCriterion.",
        "x-discriminator-value": "link"
      },
      "GrantaServerApiSearchLogicalDatumCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDatumCriterion"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "boolean",
                "description": "Logical search value"
              },
              "type": {
                "type": "string",
                "default": "logical"
              }
            }
          }
        ],
        "x-discriminator-value": "logical"
      },
      "GrantaServerApiSearchLongTextDatumCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDatumCriterion"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "Long text search value",
                "nullable": true
              },
              "type": {
                "type": "string",
                "default": "longText"
              }
            }
          }
        ],
        "x-discriminator-value": "longText"
      },
      "GrantaServerApiSearchMathsFunctionalDatumCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDatumCriterion"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "mathsFunctional"
              },
              "gte": {
                "type": "number",
                "description": "Greater than or equal to",
                "format": "double",
                "nullable": true,
                "readOnly": true
              },
              "lte": {
                "type": "number",
                "description": "Less than or equal to",
                "format": "double",
                "nullable": true,
                "readOnly": true
              },
              "unit": {
                "type": "string",
                "description": "Optional unit string. If not included, the gte and lte values are assumed to be in database units.",
                "nullable": true
              },
              "constraints": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSearchParameterConstraint"
                },
                "description": "Constraints on the parameters of the attribute. Unspecified parameters will be assumed to be unconstrained.",
                "nullable": true,
                "readOnly": true
              }
            }
          }
        ],
        "description": "mathsFunctional: Criterion for matching records with maths functional data (EELs)",
        "x-discriminator-value": "mathsFunctional"
      },
      "GrantaServerApiSearchPictureDatumCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDatumCriterion"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "picture"
              }
            }
          }
        ],
        "description": "picture: Criterion for matching records where picture data exists.",
        "x-discriminator-value": "picture"
      },
      "GrantaServerApiSearchPointDatumCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDatumCriterion"
          },
          {
            "type": "object",
            "properties": {
              "gte": {
                "type": "number",
                "description": "Greater than or equal",
                "format": "double",
                "nullable": true,
                "readOnly": true
              },
              "lte": {
                "type": "number",
                "description": "Less than or equal",
                "format": "double",
                "nullable": true,
                "readOnly": true
              },
              "type": {
                "type": "string",
                "default": "point"
              }
            }
          }
        ],
        "description": "Criterion for matching records where the point data is within the given bounds. If one of gte or lte is null, this will be an open ended search.\r\nIf this is a unitted attribute, the search values should be given in terms of the units defined for the attribute in the database/integration schema.",
        "x-discriminator-value": "point"
      },
      "GrantaServerApiSearchRangeDatumCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDatumCriterion"
          },
          {
            "type": "object",
            "properties": {
              "gte": {
                "type": "number",
                "description": "Greater than or equal to",
                "format": "double",
                "nullable": true,
                "readOnly": true
              },
              "lte": {
                "type": "number",
                "description": "Less than or equal to",
                "format": "double",
                "nullable": true,
                "readOnly": true
              },
              "type": {
                "type": "string",
                "default": "range"
              }
            }
          }
        ],
        "description": "Criterion for matching records where the range data is within the given bounds. If one of gte or lte is null, this will be an open ended search.\r\nIf this is a unitted attribute, the search values should be given in terms of the units defined for the attribute in the database/integration schema.",
        "x-discriminator-value": "range"
      },
      "GrantaServerApiSearchShortTextDatumCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchDatumCriterion"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "nullable": true
              },
              "exactMatch": {
                "type": "boolean"
              },
              "type": {
                "type": "string",
                "default": "shortText"
              }
            }
          }
        ],
        "x-discriminator-value": "shortText"
      },
      "GrantaServerApiSearchDiscreteParameterNameConstraint": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchParameterConstraint"
          },
          {
            "type": "object",
            "properties": {
              "any": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "nullable": true,
                "readOnly": true
              },
              "none": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "nullable": true,
                "readOnly": true
              },
              "type": {
                "type": "string",
                "default": "discreteName"
              }
            }
          }
        ],
        "x-discriminator-value": "discreteName"
      },
      "GrantaServerApiSearchDiscreteParameterValueConstraint": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchParameterConstraint"
          },
          {
            "type": "object",
            "properties": {
              "any": {
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                },
                "nullable": true,
                "readOnly": true
              },
              "none": {
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                },
                "nullable": true,
                "readOnly": true
              },
              "type": {
                "type": "string",
                "default": "discreteValue"
              }
            }
          }
        ],
        "x-discriminator-value": "discreteValue"
      },
      "GrantaServerApiSearchNumericParameterConstraint": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchParameterConstraint"
          },
          {
            "type": "object",
            "properties": {
              "gte": {
                "type": "number",
                "format": "double",
                "nullable": true,
                "readOnly": true
              },
              "lte": {
                "type": "number",
                "format": "double",
                "nullable": true,
                "readOnly": true
              },
              "unit": {
                "type": "string",
                "nullable": true
              },
              "scaleType": {
                "type": "string",
                "description": "Optionally, override the scale type of the parameter. Can be Linear or Log",
                "nullable": true
              },
              "interpolationType": {
                "type": "string",
                "description": "Optionally, override the interpolation type of the parameter. Can be Auto, None, Linear or CubicSpline",
                "nullable": true
              },
              "significantFigures": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "type": {
                "type": "string",
                "default": "numeric"
              }
            }
          }
        ],
        "x-discriminator-value": "numeric"
      },
      "GrantaServerApiSearchAttributeSortCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchSortCriterion"
          },
          {
            "type": "object",
            "properties": {
              "identity": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "name": {
                "type": "string",
                "nullable": true
              },
              "attributeType": {
                "$ref": "#/components/schemas/GrantaServerApiAttributeType"
              },
              "type": {
                "type": "string",
                "default": "attribute"
              }
            }
          }
        ],
        "description": "Specifies an attribute based sort criterion for a search query. Either the name or identity of the sorting attribute must be provided.",
        "x-discriminator-value": "attribute"
      },
      "GrantaServerApiSearchRecordPropertySortCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchSortCriterion"
          },
          {
            "type": "object",
            "properties": {
              "property": {
                "$ref": "#/components/schemas/GrantaServerApiSearchSearchableRecordProperty"
              },
              "type": {
                "type": "string",
                "default": "recordProperty"
              }
            }
          }
        ],
        "description": "Specifies a record property based sort criterion for a search query.",
        "x-discriminator-value": "recordProperty"
      },
      "GrantaServerApiSearchRelevanceSortCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchSortCriterion"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "relevance"
              }
            }
          }
        ],
        "description": "Specifies a relevance based sort criterion for a search query",
        "x-discriminator-value": "relevance"
      },
      "GrantaServerApiSearchDoubleSortingValue": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchSortingValue"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "format": "double"
              },
              "type": {
                "type": "string",
                "default": "double"
              }
            }
          }
        ],
        "x-discriminator-value": "double"
      },
      "GrantaServerApiSearchLongSortingValue": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchSortingValue"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string",
                "default": "long"
              }
            }
          }
        ],
        "x-discriminator-value": "long"
      },
      "GrantaServerApiSearchStringSortingValue": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSearchSortingValue"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "nullable": true
              },
              "type": {
                "type": "string",
                "default": "text"
              }
            }
          }
        ],
        "x-discriminator-value": "text"
      },
      "GrantaServerApiSchemaParametersDiscreteParameterValue": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameterValue"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "discrete"
              }
            }
          }
        ],
        "x-discriminator-value": "discrete"
      },
      "GrantaServerApiSchemaParametersDiscreteParameter": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameter"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaParametersDiscreteParameterValue"
                },
                "nullable": true
              },
              "type": {
                "type": "string",
                "default": "discrete"
              }
            }
          }
        ],
        "x-discriminator-value": "discrete"
      },
      "GrantaServerApiSchemaParametersNumericParameterValue": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameterValue"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "format": "double"
              },
              "type": {
                "type": "string",
                "default": "numeric"
              }
            }
          }
        ],
        "x-discriminator-value": "numeric"
      },
      "GrantaServerApiSchemaParametersParameterInterpolationType": {
        "enum": [
          "none",
          "linear",
          "cubicSpline"
        ],
        "type": "string"
      },
      "GrantaServerApiSchemaParametersParameterScaleType": {
        "enum": [
          "linear",
          "logarithmic"
        ],
        "type": "string"
      },
      "GrantaServerApiSchemaParametersNumericParameter": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameter"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "numeric"
              },
              "isRestricted": {
                "type": "boolean"
              },
              "unit": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimUnit"
              },
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaParametersNumericParameterValue"
                },
                "nullable": true
              },
              "interpolationType": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameterInterpolationType"
              },
              "scaleType": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaParametersParameterScaleType"
              }
            }
          }
        ],
        "x-discriminator-value": "numeric"
      },
      "GrantaServerApiSchemaLayoutsLayoutItemType": {
        "enum": [
          "attribute",
          "link"
        ],
        "type": "string",
        "description": "The types of layout item that are supported by the API."
      },
      "GrantaServerApiSchemaLayoutsLayoutItem": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsLayoutAttributeItem"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsLayoutLinkItem"
          }
        ],
        "properties": {
          "underlyingEntityGuid": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "discriminator": {
          "propertyName": "itemType",
          "mapping": {
            "attribute": "#/components/schemas/GrantaServerApiSchemaLayoutsLayoutAttributeItem",
            "link": "#/components/schemas/GrantaServerApiSchemaLayoutsLayoutLinkItem"
          }
        }
      },
      "GrantaServerApiSchemaLayoutsLayoutTabularColumnType": {
        "enum": [
          "local",
          "linkedAttribute",
          "linkedRecord",
          "linkedColumn",
          "unavailable"
        ],
        "type": "string",
        "description": "The types of layout tabular column items."
      },
      "GrantaServerApiSchemaLayoutsLayoutTabularColumn": {
        "type": "object",
        "properties": {
          "columnType": {
            "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsLayoutTabularColumnType"
          },
          "tabularColumnGuid": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "GrantaServerApiSchemaLayoutsLayoutAttributeItem": {
        "required": [
          "itemType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsLayoutItem"
          },
          {
            "type": "object",
            "properties": {
              "itemType": {
                "type": "string",
                "default": "attribute"
              },
              "attributeType": {
                "$ref": "#/components/schemas/GrantaServerApiAttributeType"
              },
              "required": {
                "type": "boolean"
              },
              "readOnly": {
                "type": "boolean"
              },
              "metaAttributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsLayoutAttributeItem"
                },
                "nullable": true
              },
              "tabularColumns": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsLayoutTabularColumn"
                },
                "nullable": true
              },
              "targetDatabase": {
                "type": "string",
                "format": "uuid",
                "nullable": true
              },
              "targetTable": {
                "type": "string",
                "format": "uuid",
                "nullable": true
              }
            }
          }
        ],
        "x-discriminator-value": "attribute"
      },
      "GrantaServerApiSchemaLayoutsLayoutItemLinkType": {
        "enum": [
          "recordLink",
          "smartLink",
          "crossDatabaseLink",
          "associationChain"
        ],
        "type": "string",
        "description": "The types of layout items that represent links to another table."
      },
      "GrantaServerApiSchemaLayoutsLayoutLinkItem": {
        "required": [
          "itemType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsLayoutItem"
          },
          {
            "type": "object",
            "properties": {
              "itemType": {
                "type": "string",
                "default": "link"
              },
              "linkType": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsLayoutItemLinkType"
              },
              "targetDatabase": {
                "type": "string",
                "format": "uuid",
                "nullable": true
              },
              "targetTable": {
                "type": "string",
                "format": "uuid",
                "nullable": true
              },
              "forwards": {
                "type": "boolean"
              },
              "nextLink": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsLayoutLinkItem"
              }
            }
          }
        ],
        "x-discriminator-value": "link"
      },
      "GrantaServerApiSchemaLayoutsFullLayoutSection": {
        "required": [
          "sectionDetailType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsLayoutSection"
          },
          {
            "type": "object",
            "properties": {
              "sectionDetailType": {
                "type": "string",
                "default": "full"
              },
              "sectionItems": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsLayoutItem"
                },
                "nullable": true
              }
            }
          }
        ],
        "x-discriminator-value": "full"
      },
      "GrantaServerApiSchemaLayoutsNewLayoutAttributeItem": {
        "required": [
          "itemType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsNewLayoutItem"
          },
          {
            "type": "object",
            "properties": {
              "itemType": {
                "type": "string",
                "default": "attribute"
              },
              "attributeGuid": {
                "type": "string",
                "format": "uuid"
              },
              "required": {
                "type": "boolean"
              },
              "readOnly": {
                "type": "boolean"
              },
              "metaAttributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsNewLayoutAttributeItem"
                },
                "nullable": true
              },
              "tabularColumnGuids": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                },
                "nullable": true
              }
            }
          }
        ],
        "x-discriminator-value": "attribute"
      },
      "GrantaServerApiSchemaLayoutsNewLayoutRecordLinkItem": {
        "required": [
          "itemType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsNewLayoutItem"
          },
          {
            "type": "object",
            "properties": {
              "itemType": {
                "type": "string",
                "default": "recordLink"
              },
              "linkGroupGuid": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "x-discriminator-value": "recordLink"
      },
      "GrantaServerApiSchemaLayoutsNewLayoutSmartLinkItem": {
        "required": [
          "itemType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsNewLayoutItem"
          },
          {
            "type": "object",
            "properties": {
              "itemType": {
                "type": "string",
                "default": "smartLink"
              },
              "forwards": {
                "type": "boolean"
              },
              "linkGroupGuid": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "x-discriminator-value": "smartLink"
      },
      "GrantaServerApiSchemaLayoutsNewLayoutCrossDatabaseLinkItem": {
        "required": [
          "itemType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsNewLayoutItem"
          },
          {
            "type": "object",
            "properties": {
              "itemType": {
                "type": "string",
                "default": "crossDatabaseLink"
              },
              "sourceDatabaseGuid": {
                "type": "string",
                "format": "uuid"
              },
              "sourceTableGuid": {
                "type": "string",
                "format": "uuid"
              },
              "linkGroupGuid": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "x-discriminator-value": "crossDatabaseLink"
      },
      "GrantaServerApiSchemaLayoutsNewLayoutAssociationChainLink": {
        "type": "object",
        "properties": {
          "forwards": {
            "type": "boolean"
          },
          "tabularAttributeGuid": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "GrantaServerApiSchemaLayoutsNewLayoutAssociationChainItem": {
        "required": [
          "itemType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsNewLayoutItem"
          },
          {
            "type": "object",
            "properties": {
              "itemType": {
                "type": "string",
                "default": "associationChain"
              },
              "associationChainName": {
                "type": "string",
                "nullable": true
              },
              "associationChainLinks": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaLayoutsNewLayoutAssociationChainLink"
                },
                "nullable": true
              }
            }
          }
        ],
        "x-discriminator-value": "associationChain"
      },
      "GrantaServerApiSchemaAttributesPointAttribute": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "point"
              },
              "unit": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimUnit"
              },
              "isMultiValued": {
                "type": "boolean"
              },
              "parameters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimNamedEntity"
                },
                "nullable": true
              }
            }
          }
        ],
        "x-discriminator-value": "point"
      },
      "GrantaServerApiSchemaAttributesIntegerAttribute": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "integer"
              },
              "isUnique": {
                "type": "boolean"
              }
            }
          }
        ],
        "x-discriminator-value": "integer"
      },
      "GrantaServerApiSchemaAttributesRangeAttribute": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "range"
              },
              "unit": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimUnit"
              }
            }
          }
        ],
        "x-discriminator-value": "range"
      },
      "GrantaServerApiSchemaAttributesLogicalAttribute": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "logical"
              }
            }
          }
        ],
        "x-discriminator-value": "logical"
      },
      "GrantaServerApiSchemaAttributesShortTextAttribute": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "shortText"
              },
              "isUnique": {
                "type": "boolean"
              }
            }
          }
        ],
        "x-discriminator-value": "shortText"
      },
      "GrantaServerApiSchemaAttributesLongTextAttribute": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "longText"
              }
            }
          }
        ],
        "x-discriminator-value": "longText"
      },
      "GrantaServerApiSchemaAttributesDateTimeAttribute": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "dateTime"
              }
            }
          }
        ],
        "x-discriminator-value": "dateTime"
      },
      "GrantaServerApiSchemaAttributesDiscreteAttribute": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "discrete"
              },
              "discreteType": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimNamedEntity"
              },
              "isMultiValued": {
                "type": "boolean"
              }
            }
          }
        ],
        "x-discriminator-value": "discrete"
      },
      "GrantaServerApiSchemaAttributesHyperlinkAttribute": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "hyperlink"
              }
            }
          }
        ],
        "x-discriminator-value": "hyperlink"
      },
      "GrantaServerApiSchemaAttributesFileAttribute": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "file"
              }
            }
          }
        ],
        "x-discriminator-value": "file"
      },
      "GrantaServerApiSchemaAttributesPictureAttribute": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "picture"
              }
            }
          }
        ],
        "x-discriminator-value": "picture"
      },
      "GrantaServerApiSchemaAttributesTabularAttribute": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "link"
              }
            }
          }
        ],
        "x-discriminator-value": "link"
      },
      "GrantaServerApiSchemaAttributesFloatFunctionalAttribute": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "floatFunctional"
              },
              "unit": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimUnit"
              },
              "parameters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimNamedEntity"
                },
                "nullable": true
              }
            }
          }
        ],
        "x-discriminator-value": "floatFunctional"
      },
      "GrantaServerApiSchemaAttributesDiscreteFunctionalAttribute": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "discreteFunctional"
              },
              "discreteType": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimNamedEntity"
              },
              "parameters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimNamedEntity"
                },
                "nullable": true
              }
            }
          }
        ],
        "x-discriminator-value": "discreteFunctional"
      },
      "GrantaServerApiSchemaAttributesMathsFunctionalAttribute": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiSchemaAttributesAttribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "mathsFunctional"
              },
              "unit": {
                "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimUnit"
              },
              "parameters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiSchemaSlimEntitiesSlimNamedEntity"
                },
                "nullable": true
              }
            }
          }
        ],
        "x-discriminator-value": "mathsFunctional"
      },
      "GrantaServerApiListsDtoListBooleanCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiListsDtoListCriterion"
          },
          {
            "type": "object",
            "properties": {
              "matchAny": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiListsDtoListCriterion"
                },
                "nullable": true
              },
              "matchAll": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiListsDtoListCriterion"
                },
                "nullable": true
              },
              "type": {
                "type": "string",
                "default": "listBoolean"
              }
            }
          }
        ],
        "description": "listBoolean: Criterion that wraps other criteria in order to specify how the results should be joined together. Used in searches for record lists.",
        "x-discriminator-value": "listBoolean"
      },
      "GrantaServerApiListsDtoUserRole": {
        "enum": [
          "None",
          "Owner",
          "Subscriber",
          "Curator",
          "Administrator",
          "Publisher"
        ],
        "type": "string",
        "description": "A set of flags that can be used to describe the role or roles that a user has on a particular record list"
      },
      "GrantaServerApiListsDtoRecordListSearchCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiListsDtoListCriterion"
          },
          {
            "type": "object",
            "properties": {
              "nameContains": {
                "type": "string",
                "nullable": true
              },
              "userRole": {
                "$ref": "#/components/schemas/GrantaServerApiListsDtoUserRole"
              },
              "isPublished": {
                "type": "boolean",
                "nullable": true
              },
              "isAwaitingApproval": {
                "type": "boolean",
                "nullable": true
              },
              "isInternalUse": {
                "type": "boolean",
                "nullable": true
              },
              "isRevision": {
                "type": "boolean",
                "description": "Restrict to record lists that are (non discarded) revisions.",
                "nullable": true
              },
              "containsRecordsInDatabases": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                },
                "description": "Limits results to lists containing records in any of of the specified databases",
                "nullable": true
              },
              "containsRecordsInIntegrationSchemas": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Limits results to lists containing records in any of the specified integration schemas",
                "nullable": true
              },
              "containsRecordsInTables": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                },
                "description": "Limits results to lists containing records in any of the specified tables",
                "nullable": true
              },
              "containsRecords": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                },
                "description": "Limits results to lists containing any of the given records",
                "nullable": true
              },
              "userCanAddOrRemoveItems": {
                "type": "boolean",
                "description": "Limits results to lists where the current user can add or remove items.",
                "nullable": true
              },
              "type": {
                "type": "string",
                "default": "recordList"
              }
            }
          }
        ],
        "description": "recordList: Search criterion for a set of record lists.\r\n            \r\nThe properties in the this class represent an AND search - only lists that match all of the non-null properties will be returned",
        "x-discriminator-value": "recordList"
      },
      "GrantaServerApiDataExportPropertiesCreatedByUserProperty": {
        "required": [
          "propertyName"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesProperty"
          },
          {
            "type": "object",
            "properties": {
              "propertyName": {
                "type": "string",
                "default": "createdByUser"
              },
              "createdByUser": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ],
        "x-discriminator-value": "createdByUser"
      },
      "GrantaServerApiDataExportPropertiesCreatedDateProperty": {
        "required": [
          "propertyName"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesProperty"
          },
          {
            "type": "object",
            "properties": {
              "propertyName": {
                "type": "string",
                "default": "createdDate"
              },
              "createdDate": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ],
        "x-discriminator-value": "createdDate"
      },
      "GrantaServerApiDataExportPropertiesDatabaseKeyProperty": {
        "required": [
          "propertyName"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesProperty"
          },
          {
            "type": "object",
            "properties": {
              "propertyName": {
                "type": "string",
                "default": "databaseKey"
              },
              "databaseKey": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ],
        "x-discriminator-value": "databaseKey"
      },
      "GrantaServerApiDataExportPropertiesFullNameProperty": {
        "required": [
          "propertyName"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesProperty"
          },
          {
            "type": "object",
            "properties": {
              "propertyName": {
                "type": "string",
                "default": "fullName"
              },
              "fullName": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ],
        "x-discriminator-value": "fullName"
      },
      "GrantaServerApiDataExportPropertiesLastModifiedDateProperty": {
        "required": [
          "propertyName"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesProperty"
          },
          {
            "type": "object",
            "properties": {
              "propertyName": {
                "type": "string",
                "default": "lastModifiedDate"
              },
              "lastModifiedDate": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ],
        "x-discriminator-value": "lastModifiedDate"
      },
      "GrantaServerApiDataExportPropertiesLastModifiedByUserProperty": {
        "required": [
          "propertyName"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesProperty"
          },
          {
            "type": "object",
            "properties": {
              "propertyName": {
                "type": "string",
                "default": "lastModifiedByUser"
              },
              "lastModifiedByUser": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ],
        "x-discriminator-value": "lastModifiedByUser"
      },
      "GrantaServerApiRecordColor": {
        "enum": [
          "red",
          "lime",
          "blue",
          "yellow",
          "fuchsia",
          "aqua",
          "maroon",
          "green",
          "navy",
          "olive",
          "purple",
          "teal",
          "gray",
          "black",
          "white",
          "silver"
        ],
        "type": "string",
        "description": "An API-level enum for the supported record colors."
      },
      "GrantaServerApiDataExportPropertiesRecordColorProperty": {
        "required": [
          "propertyName"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesProperty"
          },
          {
            "type": "object",
            "properties": {
              "propertyName": {
                "type": "string",
                "default": "recordColor"
              },
              "recordColor": {
                "$ref": "#/components/schemas/GrantaServerApiRecordColor"
              }
            }
          }
        ],
        "x-discriminator-value": "recordColor"
      },
      "GrantaServerApiDataExportPropertiesRecordGuidProperty": {
        "required": [
          "propertyName"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesProperty"
          },
          {
            "type": "object",
            "properties": {
              "propertyName": {
                "type": "string",
                "default": "recordGuid"
              },
              "recordGuid": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "x-discriminator-value": "recordGuid"
      },
      "GrantaServerApiDataExportPropertiesRecordIdentityProperty": {
        "required": [
          "propertyName"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesProperty"
          },
          {
            "type": "object",
            "properties": {
              "propertyName": {
                "type": "string",
                "default": "recordIdentity"
              },
              "recordIdentity": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "recordIdentity"
      },
      "GrantaServerApiDataExportPropertiesRecordHistoryGuidProperty": {
        "required": [
          "propertyName"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesProperty"
          },
          {
            "type": "object",
            "properties": {
              "propertyName": {
                "type": "string",
                "default": "recordHistoryGuid"
              },
              "recordHistoryGuid": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "x-discriminator-value": "recordHistoryGuid"
      },
      "GrantaServerApiDataExportPropertiesRecordHistoryIdentityProperty": {
        "required": [
          "propertyName"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesProperty"
          },
          {
            "type": "object",
            "properties": {
              "propertyName": {
                "type": "string",
                "default": "recordHistoryIdentity"
              },
              "recordHistoryIdentity": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "recordHistoryIdentity"
      },
      "GrantaServerApiRecordType": {
        "enum": [
          "record",
          "generic",
          "folder"
        ],
        "type": "string",
        "description": "An API-level enum for the supported record types."
      },
      "GrantaServerApiDataExportPropertiesRecordTypeProperty": {
        "required": [
          "propertyName"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesProperty"
          },
          {
            "type": "object",
            "properties": {
              "propertyName": {
                "type": "string",
                "default": "recordType"
              },
              "recordType": {
                "$ref": "#/components/schemas/GrantaServerApiRecordType"
              }
            }
          }
        ],
        "x-discriminator-value": "recordType"
      },
      "GrantaServerApiDataExportPropertiesReleasedDateProperty": {
        "required": [
          "propertyName"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesProperty"
          },
          {
            "type": "object",
            "properties": {
              "propertyName": {
                "type": "string",
                "default": "releasedDate"
              },
              "releasedDate": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ],
        "x-discriminator-value": "releasedDate"
      },
      "GrantaServerApiDataExportPropertiesShortNameProperty": {
        "required": [
          "propertyName"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesProperty"
          },
          {
            "type": "object",
            "properties": {
              "propertyName": {
                "type": "string",
                "default": "shortName"
              },
              "shortName": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ],
        "x-discriminator-value": "shortName"
      },
      "GrantaServerApiDataExportPropertiesTableGuidProperty": {
        "required": [
          "propertyName"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesProperty"
          },
          {
            "type": "object",
            "properties": {
              "propertyName": {
                "type": "string",
                "default": "tableGuid"
              },
              "tableGuid": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "x-discriminator-value": "tableGuid"
      },
      "GrantaServerApiDataExportPropertiesTableIdentityProperty": {
        "required": [
          "propertyName"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesProperty"
          },
          {
            "type": "object",
            "properties": {
              "propertyName": {
                "type": "string",
                "default": "tableIdentity"
              },
              "tableIdentity": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "tableIdentity"
      },
      "GrantaServerApiDataExportPropertiesTableNameProperty": {
        "required": [
          "propertyName"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesProperty"
          },
          {
            "type": "object",
            "properties": {
              "propertyName": {
                "type": "string",
                "default": "tableName"
              },
              "tableName": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ],
        "x-discriminator-value": "tableName"
      },
      "GrantaServerApiDataExportPropertiesVersionNumberProperty": {
        "required": [
          "propertyName"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesProperty"
          },
          {
            "type": "object",
            "properties": {
              "propertyName": {
                "type": "string",
                "default": "versionNumber"
              },
              "versionNumber": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "versionNumber"
      },
      "GrantaServerApiVersionState": {
        "enum": [
          "unversioned",
          "unreleased",
          "released",
          "superseded",
          "withdrawn"
        ],
        "type": "string",
        "description": "API-level enum for version control state."
      },
      "GrantaServerApiDataExportPropertiesVersionStateProperty": {
        "required": [
          "propertyName"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportPropertiesProperty"
          },
          {
            "type": "object",
            "properties": {
              "propertyName": {
                "type": "string",
                "default": "versionState"
              },
              "versionState": {
                "$ref": "#/components/schemas/GrantaServerApiVersionState"
              }
            }
          }
        ],
        "x-discriminator-value": "versionState"
      },
      "GrantaServerApiDataExportDatumsApplicableDatum": {
        "required": [
          "notApplicable"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsDatum"
          }
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsBooleanDatum"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsDateTimeDatum"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsDiscreteDatum"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsFileDatum"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsFunctionalDatum"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsHyperlinkDatum"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsLinkedRecordsDatum"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsLongTextDatum"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsNumericDatum"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsPictureDatum"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsPointDatum"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsRangeDatum"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsShortTextDatum"
          }
        ],
        "properties": {
          "notApplicable": {
            "type": "boolean",
            "default": false
          }
        },
        "discriminator": {
          "propertyName": "datumType",
          "mapping": {
            "logical": "#/components/schemas/GrantaServerApiDataExportDatumsBooleanDatum",
            "dateTime": "#/components/schemas/GrantaServerApiDataExportDatumsDateTimeDatum",
            "discrete": "#/components/schemas/GrantaServerApiDataExportDatumsDiscreteDatum",
            "file": "#/components/schemas/GrantaServerApiDataExportDatumsFileDatum",
            "floatFunctional": "#/components/schemas/GrantaServerApiDataExportDatumsFunctionalDatum",
            "hyperlink": "#/components/schemas/GrantaServerApiDataExportDatumsHyperlinkDatum",
            "link": "#/components/schemas/GrantaServerApiDataExportDatumsLinkedRecordsDatum",
            "longText": "#/components/schemas/GrantaServerApiDataExportDatumsLongTextDatum",
            "integer": "#/components/schemas/GrantaServerApiDataExportDatumsNumericDatum",
            "picture": "#/components/schemas/GrantaServerApiDataExportDatumsPictureDatum",
            "point": "#/components/schemas/GrantaServerApiDataExportDatumsPointDatum",
            "range": "#/components/schemas/GrantaServerApiDataExportDatumsRangeDatum",
            "shortText": "#/components/schemas/GrantaServerApiDataExportDatumsShortTextDatum"
          }
        },
        "x-discriminator-value": false
      },
      "GrantaServerApiDataExportDatumsBooleanDatum": {
        "required": [
          "datumType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsApplicableDatum"
          },
          {
            "type": "object",
            "properties": {
              "datumType": {
                "type": "string",
                "default": "logical"
              },
              "datumValue": {
                "type": "boolean"
              }
            }
          }
        ],
        "x-discriminator-value": "logical"
      },
      "GrantaServerApiDataExportDatumsDateTimeDatum": {
        "required": [
          "datumType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsApplicableDatum"
          },
          {
            "type": "object",
            "properties": {
              "datumType": {
                "type": "string",
                "default": "dateTime"
              },
              "datumValue": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ],
        "x-discriminator-value": "dateTime"
      },
      "GrantaServerApiDiscreteValue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "GrantaServerApiDataExportDatumsDiscreteDatum": {
        "required": [
          "datumType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsApplicableDatum"
          },
          {
            "type": "object",
            "properties": {
              "datumType": {
                "type": "string",
                "default": "discrete"
              },
              "datumValue": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiDiscreteValue"
                },
                "nullable": true
              }
            }
          }
        ],
        "x-discriminator-value": "discrete"
      },
      "GrantaServerApiDataExportDatumsBinaryData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "string",
            "format": "byte",
            "nullable": true
          }
        }
      },
      "GrantaServerApiDataExportDatumsFileDatum": {
        "required": [
          "datumType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsApplicableDatum"
          },
          {
            "type": "object",
            "properties": {
              "datumType": {
                "type": "string",
                "default": "file"
              },
              "datumValue": {
                "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsBinaryData"
              }
            }
          }
        ],
        "x-discriminator-value": "file"
      },
      "GrantaServerApiDataExportParameterSettingDefinedAt": {
        "enum": [
          "parameter",
          "attribute",
          "datum"
        ],
        "type": "string"
      },
      "GrantaServerApiFunctionalDatumParameterInfo": {
        "type": "object",
        "properties": {
          "scaleTypeDefinedAt": {
            "$ref": "#/components/schemas/GrantaServerApiDataExportParameterSettingDefinedAt"
          },
          "interpolationMethodDefinedAT": {
            "$ref": "#/components/schemas/GrantaServerApiDataExportParameterSettingDefinedAt"
          },
          "defaultValueDefinedAt": {
            "$ref": "#/components/schemas/GrantaServerApiDataExportParameterSettingDefinedAt"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "identity": {
            "type": "integer",
            "format": "int32"
          },
          "unitSymbol": {
            "type": "string",
            "nullable": true
          },
          "scaleType": {
            "type": "string",
            "description": "Linear or Log",
            "nullable": true
          },
          "interpolationType": {
            "type": "string",
            "description": "Auto, None, Linear or CubicSpline",
            "nullable": true
          },
          "parameterType": {
            "type": "string",
            "nullable": true
          },
          "defaultValue": {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsParameterValue"
          }
        }
      },
      "GrantaServerApiDataExportDatumsFunctionalDatum": {
        "required": [
          "datumType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsApplicableDatum"
          }
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsFunctionalGridDatum"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsFunctionalSeriesDatum"
          }
        ],
        "properties": {
          "datumType": {
            "type": "string",
            "default": "floatFunctional"
          },
          "unitSymbol": {
            "type": "string",
            "nullable": true
          },
          "xAxisParameter": {
            "$ref": "#/components/schemas/GrantaServerApiFunctionalDatumParameterInfo"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiFunctionalDatumParameterInfo"
            },
            "nullable": true
          }
        },
        "discriminator": {
          "propertyName": "graphType",
          "mapping": {
            "grid": "#/components/schemas/GrantaServerApiDataExportDatumsFunctionalGridDatum",
            "series": "#/components/schemas/GrantaServerApiDataExportDatumsFunctionalSeriesDatum"
          }
        },
        "x-discriminator-value": "floatFunctional"
      },
      "GrantaServerApiDataExportDatumsHyperlink": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "nullable": true
          },
          "formattedAddress": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "GrantaServerApiDataExportDatumsHyperlinkDatum": {
        "required": [
          "datumType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsApplicableDatum"
          },
          {
            "type": "object",
            "properties": {
              "datumType": {
                "type": "string",
                "default": "hyperlink"
              },
              "datumValue": {
                "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsHyperlink"
              }
            }
          }
        ],
        "x-discriminator-value": "hyperlink"
      },
      "GrantaServerApiDataExportDatumsLinkedRecordsDatum": {
        "required": [
          "datumType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsApplicableDatum"
          },
          {
            "type": "object",
            "properties": {
              "linkGroupName": {
                "type": "string",
                "nullable": true
              },
              "linkedRecords": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiIntegrationDataExportRecordReference"
                },
                "nullable": true
              },
              "datumType": {
                "type": "string",
                "default": "link"
              }
            }
          }
        ],
        "x-discriminator-value": "link"
      },
      "GrantaServerApiDataExportDatumsLongTextDatum": {
        "required": [
          "datumType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsApplicableDatum"
          },
          {
            "type": "object",
            "properties": {
              "datumType": {
                "type": "string",
                "default": "longText"
              },
              "datumValue": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ],
        "x-discriminator-value": "longText"
      },
      "GrantaServerApiDataExportDatumsNumericDatum": {
        "required": [
          "datumType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsApplicableDatum"
          },
          {
            "type": "object",
            "properties": {
              "datumType": {
                "type": "string",
                "default": "integer"
              },
              "datumValue": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "x-discriminator-value": "integer"
      },
      "GrantaServerApiDataExportDatumsPictureDatum": {
        "required": [
          "datumType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsApplicableDatum"
          },
          {
            "type": "object",
            "properties": {
              "datumType": {
                "type": "string",
                "default": "picture"
              },
              "datumValue": {
                "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsBinaryData"
              }
            }
          }
        ],
        "x-discriminator-value": "picture"
      },
      "GrantaServerApiDataExportDatumsPointDatum": {
        "required": [
          "datumType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsApplicableDatum"
          },
          {
            "type": "object",
            "properties": {
              "datumType": {
                "type": "string",
                "default": "point"
              },
              "datumValue": {
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                },
                "nullable": true
              },
              "unit": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ],
        "x-discriminator-value": "point"
      },
      "GrantaServerApiDataExportDatumsRange": {
        "type": "object",
        "properties": {
          "highValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "lowValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "highValueIsInclusive": {
            "type": "boolean"
          },
          "lowValueIsInclusive": {
            "type": "boolean"
          }
        }
      },
      "GrantaServerApiDataExportDatumsRangeDatum": {
        "required": [
          "datumType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsApplicableDatum"
          },
          {
            "type": "object",
            "properties": {
              "datumType": {
                "type": "string",
                "default": "range"
              },
              "datumValue": {
                "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsRange"
              },
              "unit": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ],
        "x-discriminator-value": "range"
      },
      "GrantaServerApiDataExportDatumsShortTextDatum": {
        "required": [
          "datumType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsApplicableDatum"
          },
          {
            "type": "object",
            "properties": {
              "datumType": {
                "type": "string",
                "default": "shortText"
              },
              "datumValue": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ],
        "x-discriminator-value": "shortText"
      },
      "GrantaServerApiDataExportDatumsNotApplicableDatum": {
        "required": [
          "notApplicable"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsDatum"
          },
          {
            "type": "object",
            "properties": {
              "datumType": {
                "$ref": "#/components/schemas/GrantaServerApiAttributeType"
              },
              "notApplicable": {
                "type": "boolean",
                "default": true
              }
            }
          }
        ],
        "x-discriminator-value": true
      },
      "GrantaServerApiDataExportDatumsGridPoint": {
        "type": "object",
        "properties": {
          "parameterValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsParameterValue"
            },
            "nullable": true
          },
          "low": {
            "type": "number",
            "format": "double"
          },
          "high": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "GrantaServerApiDataExportDatumsFunctionalGridDatum": {
        "required": [
          "graphType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsFunctionalDatum"
          },
          {
            "type": "object",
            "properties": {
              "graphType": {
                "type": "string",
                "default": "grid"
              },
              "points": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsGridPoint"
                },
                "nullable": true
              }
            }
          }
        ],
        "x-discriminator-value": "grid"
      },
      "GrantaServerApiDataExportDatumsSeriesPoint": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number",
            "format": "double"
          },
          "xName": {
            "type": "string",
            "nullable": true
          },
          "yLow": {
            "type": "number",
            "format": "double"
          },
          "yHigh": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "GrantaServerApiDataExportDatumsSeries": {
        "type": "object",
        "properties": {
          "parameterValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsParameterValue"
            },
            "nullable": true
          },
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsSeriesPoint"
            },
            "nullable": true
          }
        }
      },
      "GrantaServerApiDataExportDatumsFunctionalSeriesDatum": {
        "required": [
          "graphType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsFunctionalDatum"
          },
          {
            "type": "object",
            "properties": {
              "graphType": {
                "type": "string",
                "default": "series"
              },
              "series": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiDataExportDatumsSeries"
                },
                "nullable": true
              },
              "isLogarithmic": {
                "type": "boolean",
                "readOnly": true
              }
            }
          }
        ],
        "x-discriminator-value": "series"
      },
      "GrantaServerApiAggregationsAttributeAggregation": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregation"
          }
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAttributeValueAggregation"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAttributeExistsAggregation"
          }
        ],
        "properties": {
          "attributeIdentity": {
            "type": "integer",
            "description": "The identity of the attribute that was aggregated over.",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "default": "attribute"
          },
          "count": {
            "type": "integer",
            "description": "The number of records that have a populated (applicable) value for this attribute.\r\n(For multi-valued attributes: the number of records that have one or more populated\r\n(applicable) values for this attribute.)\r\n            \r\nFor a tabular attribute, this will be the number of records that have at least one\r\ntabular row in this attribute, even if those rows might be filtered out from users'\r\nviews in some clients.",
            "format": "int32"
          }
        },
        "description": "The results of aggregation over an attribute. In all cases this will report the number of records in\r\nthe aggregation scope that have a value for the attribute. In some cases, depending on the attribute\r\ntype, we may be able to report more information. For example, aggregating over a numeric attribute will\r\nalso provide the minimum and maximum values that attribute takes across records in the aggregation\r\nscope.",
        "discriminator": {
          "propertyName": "attributeAggregationType",
          "mapping": {
            "value": "#/components/schemas/GrantaServerApiAggregationsAttributeValueAggregation",
            "exists": "#/components/schemas/GrantaServerApiAggregationsAttributeExistsAggregation"
          }
        },
        "x-discriminator-value": "attribute"
      },
      "GrantaServerApiAggregationsFreeTextAggregation": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregation"
          },
          {
            "type": "object",
            "properties": {
              "guid": {
                "type": "string",
                "description": "The GUID of the input aggregation criterion.",
                "format": "uuid",
                "readOnly": true
              },
              "terms": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The topmost terms in the specified attributes, across all relevant records. Due to how\r\nmatches in multiple attributes are reconciled, we cannot easily provide a document count,\r\nnor can we guarantee that the terms are perfectly correctly ordered.",
                "nullable": true
              },
              "type": {
                "type": "string",
                "default": "text"
              }
            }
          }
        ],
        "description": "The results of aggregation over an attribute.",
        "x-discriminator-value": "text"
      },
      "GrantaServerApiAggregationsAttributeAggregationCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationCriterion"
          }
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAttributeAggregationValueCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAttributeAggregationExistsCriterion"
          }
        ],
        "properties": {
          "identity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "isMetaAttribute": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "default": "attribute"
          }
        },
        "description": "A criterion for requesting aggregations for a single specific attribute or meta-attribute.",
        "discriminator": {
          "propertyName": "attributeAggregationCriterionType",
          "mapping": {
            "value": "#/components/schemas/GrantaServerApiAggregationsAttributeAggregationValueCriterion",
            "exists": "#/components/schemas/GrantaServerApiAggregationsAttributeAggregationExistsCriterion"
          }
        },
        "x-discriminator-value": "attribute"
      },
      "GrantaServerApiAggregationsFreeTextAggregationCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationCriterion"
          },
          {
            "type": "object",
            "properties": {
              "criterionGuid": {
                "type": "string",
                "description": "A GUID to identify this free-text criterion, so that its results can be determined in the output.\r\nFor each input free-text aggregation criterion, there will be a free-text aggregation in the output\r\nwith a matching GUID.",
                "format": "uuid"
              },
              "identities": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "nullable": true
              },
              "numberOfTerms": {
                "type": "integer",
                "format": "int32"
              },
              "prefix": {
                "type": "string",
                "nullable": true
              },
              "type": {
                "type": "string",
                "default": "text"
              }
            }
          }
        ],
        "description": "A criterion for requesting aggregations for a single specific attribute or meta-attribute.",
        "x-discriminator-value": "text"
      },
      "GrantaServerApiAggregationsAggregationDatumCriterion": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsDateTimeAggregationDatumCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsDiscreteTextAggregationDatumCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsIntegerAggregationDatumCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsPointAggregationDatumCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsRangeAggregationDatumCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsShortTextAggregationDatumCriterion"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsLinkAggregationDatumCriterion"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "dateTime": "#/components/schemas/GrantaServerApiAggregationsDateTimeAggregationDatumCriterion",
            "discreteText": "#/components/schemas/GrantaServerApiAggregationsDiscreteTextAggregationDatumCriterion",
            "integer": "#/components/schemas/GrantaServerApiAggregationsIntegerAggregationDatumCriterion",
            "point": "#/components/schemas/GrantaServerApiAggregationsPointAggregationDatumCriterion",
            "range": "#/components/schemas/GrantaServerApiAggregationsRangeAggregationDatumCriterion",
            "shortText": "#/components/schemas/GrantaServerApiAggregationsShortTextAggregationDatumCriterion",
            "link": "#/components/schemas/GrantaServerApiAggregationsLinkAggregationDatumCriterion"
          }
        }
      },
      "GrantaServerApiAggregationsDateTimeAggregationDatumCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationDatumCriterion"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "dateTime"
              }
            }
          }
        ],
        "description": "Criterion for aggregating data within a datetime attribute. The returned aggregation will contain the minimum and maximum\r\nvalues, and a count of records with a value for the attribute.",
        "x-discriminator-value": "dateTime"
      },
      "GrantaServerApiAggregationsDiscreteTextAggregationDatumCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationDatumCriterion"
          },
          {
            "type": "object",
            "properties": {
              "numberOfTerms": {
                "type": "integer",
                "description": "The maximum number of terms to return in this aggregation. If this is not provided,\r\nor if an invalid value is provided, then a default value of 10 will be assumed.",
                "format": "int32"
              },
              "prefix": {
                "type": "string",
                "description": "An optional textual prefix. If provided, only terms that start with this prefix will be\r\nconsidered in the aggregation.",
                "nullable": true
              },
              "type": {
                "type": "string",
                "default": "discreteText"
              }
            }
          }
        ],
        "description": "Criterion for aggregating textual data within a discrete attribute. The returned aggregation will contain the most common\r\nterms for the attribute across records in the aggregation scope, with a count of records for each term.",
        "x-discriminator-value": "discreteText"
      },
      "GrantaServerApiAggregationsIntegerAggregationDatumCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationDatumCriterion"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "integer"
              }
            }
          }
        ],
        "description": "Criterion for aggregating data within an integer attribute. The returned aggregation will contain the minimum and maximum\r\nvalues, and a count of records with a value for the attribute.",
        "x-discriminator-value": "integer"
      },
      "GrantaServerApiAggregationsPointAggregationDatumCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationDatumCriterion"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "point"
              }
            }
          }
        ],
        "description": "Criterion for aggregating data within a point attribute. The returned aggregation will contain the minimum and maximum\r\nvalues (in database units), and a count of records with at least one value for the attribute.",
        "x-discriminator-value": "point"
      },
      "GrantaServerApiAggregationsRangeAggregationDatumCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationDatumCriterion"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "range"
              }
            }
          }
        ],
        "description": "Criterion for aggregating data within a range attribute. The returned aggregation will contain the minimum and maximum\r\nvalues (in database units), and a count of records with a value for the attribute.\r\n            \r\nAs in MI elsewhere, a range with only one boundary specified is treated like a point, rather than an infinitely large range.",
        "x-discriminator-value": "range"
      },
      "GrantaServerApiAggregationsShortTextAggregationDatumCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationDatumCriterion"
          },
          {
            "type": "object",
            "properties": {
              "numberOfTerms": {
                "type": "integer",
                "description": "The maximum number of terms to return in this aggregation. If this is not provided,\r\nor if an invalid value is provided, then a default value of 10 will be assumed.",
                "format": "int32"
              },
              "prefix": {
                "type": "string",
                "description": "An optional textual prefix. If provided, only terms that start with this prefix will be\r\nconsidered in the aggregation.",
                "nullable": true
              },
              "type": {
                "type": "string",
                "default": "shortText"
              }
            }
          }
        ],
        "description": "Criterion for aggregating data within a short-text attribute. The returned aggregation will contain the most common\r\nterms for the attribute across records in the aggregation scope, with a count of records for each term.",
        "x-discriminator-value": "shortText"
      },
      "GrantaServerApiAggregationsLinkAggregationDatumCriterion": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationDatumCriterion"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "link"
              },
              "localAggregationCriteria": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationCriterion"
                },
                "nullable": true
              }
            }
          }
        ],
        "description": "Criterion for aggregating data within a tabular attribute. The local columns specified will be individually aggregated\r\nacross all rows (including rows without linked records, which may be hidden in clients).\r\n            \r\nThe returned aggregation will contain a list of the individual column aggregations that have been performed. Within these\r\ncolumn aggregations, the 'record count' instead denotes the number of relevant tabular rows across all records in the\r\naggregation scope, rather than the number of records. This row count will include rows that may be hidden from the user's\r\nview in certain clients.",
        "x-discriminator-value": "link"
      },
      "GrantaServerApiAggregationsAttributeValueAggregation": {
        "required": [
          "attributeAggregationType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAttributeAggregation"
          }
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsIntegerAttributeAggregation"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsPointAttributeAggregation"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsRangeAttributeAggregation"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsDateTimeAttributeAggregation"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsShortTextAttributeAggregation"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsDiscreteTextAttributeAggregation"
          },
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsLinkAttributeAggregation"
          }
        ],
        "properties": {
          "attributeAggregationType": {
            "type": "string",
            "default": "value"
          }
        },
        "description": "The results of aggregation over an attribute, reporting the number of records that have a value for\r\nthe attribute, plus additional aggregation information about the attribute values. The exact type of\r\nadditional information will depend on the type of attribute.",
        "discriminator": {
          "propertyName": "datumType",
          "mapping": {
            "integer": "#/components/schemas/GrantaServerApiAggregationsIntegerAttributeAggregation",
            "point": "#/components/schemas/GrantaServerApiAggregationsPointAttributeAggregation",
            "range": "#/components/schemas/GrantaServerApiAggregationsRangeAttributeAggregation",
            "dateTime": "#/components/schemas/GrantaServerApiAggregationsDateTimeAttributeAggregation",
            "shortText": "#/components/schemas/GrantaServerApiAggregationsShortTextAttributeAggregation",
            "discreteText": "#/components/schemas/GrantaServerApiAggregationsDiscreteTextAttributeAggregation",
            "link": "#/components/schemas/GrantaServerApiAggregationsLinkAttributeAggregation"
          }
        },
        "x-discriminator-value": "value"
      },
      "GrantaServerApiAggregationsAttributeExistsAggregation": {
        "required": [
          "attributeAggregationType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAttributeAggregation"
          },
          {
            "type": "object",
            "properties": {
              "attributeAggregationType": {
                "type": "string",
                "default": "exists"
              }
            }
          }
        ],
        "description": "The results of aggregation over an attribute, reporting only the number of records with a value\r\nfor the attribute.",
        "x-discriminator-value": "exists"
      },
      "GrantaServerApiAggregationsAttributeAggregationValueCriterion": {
        "required": [
          "attributeAggregationCriterionType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAttributeAggregationCriterion"
          },
          {
            "type": "object",
            "properties": {
              "attributeAggregationCriterionType": {
                "type": "string",
                "default": "value"
              },
              "innerCriterion": {
                "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationDatumCriterion"
              }
            }
          }
        ],
        "description": "A criterion for requesting aggregations for a single specific attribute or meta-attribute,\r\nincluding summary information about the values assumed by the attribute.\r\n            \r\nFor a numeric attribute (integer, point, range, or date-time), the summary information will\r\nbe the minimum and maximum values assumed by the attribute on some record.\r\n            \r\nFor a simple text attribute (discrete, short-text), the summary information will be the most\r\ncommon terms in the search index for that attribute.\r\n            \r\nThis can also be used within the inner criteria of a 'link' attribute aggregation, to request\r\nan aggregation over a local tabular column.",
        "x-discriminator-value": "value"
      },
      "GrantaServerApiAggregationsAggregationDatumExistsCriterion": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/GrantaServerApiAttributeType"
          }
        },
        "description": "Inner criterion of an attribute search criterion for when the only bit of information about the datum that we want to convey is its type"
      },
      "GrantaServerApiAggregationsAttributeAggregationExistsCriterion": {
        "required": [
          "attributeAggregationCriterionType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAttributeAggregationCriterion"
          },
          {
            "type": "object",
            "properties": {
              "attributeAggregationCriterionType": {
                "type": "string",
                "default": "exists"
              },
              "innerCriterion": {
                "$ref": "#/components/schemas/GrantaServerApiAggregationsAggregationDatumExistsCriterion"
              }
            }
          }
        ],
        "description": "A criterion for requesting aggregations for a single specific attribute or meta-attribute.",
        "x-discriminator-value": "exists"
      },
      "GrantaServerApiAggregationsIntegerAttributeAggregation": {
        "required": [
          "datumType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAttributeValueAggregation"
          },
          {
            "type": "object",
            "properties": {
              "minimum": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "maximum": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "datumType": {
                "type": "string",
                "default": "integer"
              }
            }
          }
        ],
        "x-discriminator-value": "integer"
      },
      "GrantaServerApiAggregationsPointAttributeAggregation": {
        "required": [
          "datumType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAttributeValueAggregation"
          },
          {
            "type": "object",
            "properties": {
              "minimum": {
                "type": "number",
                "format": "double",
                "nullable": true
              },
              "maximum": {
                "type": "number",
                "format": "double",
                "nullable": true
              },
              "datumType": {
                "type": "string",
                "default": "point"
              }
            }
          }
        ],
        "x-discriminator-value": "point"
      },
      "GrantaServerApiAggregationsRangeAttributeAggregation": {
        "required": [
          "datumType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAttributeValueAggregation"
          },
          {
            "type": "object",
            "properties": {
              "minimum": {
                "type": "number",
                "format": "double",
                "nullable": true
              },
              "maximum": {
                "type": "number",
                "format": "double",
                "nullable": true
              },
              "datumType": {
                "type": "string",
                "default": "range"
              }
            }
          }
        ],
        "x-discriminator-value": "range"
      },
      "GrantaServerApiAggregationsDateTimeAttributeAggregation": {
        "required": [
          "datumType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAttributeValueAggregation"
          },
          {
            "type": "object",
            "properties": {
              "minimum": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "maximum": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "datumType": {
                "type": "string",
                "default": "dateTime"
              }
            }
          }
        ],
        "x-discriminator-value": "dateTime"
      },
      "GrantaServerApiAggregationsTermWithCount": {
        "type": "object",
        "properties": {
          "term": {
            "type": "string",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "A term from the search index, along with a count of how many times it occurs in some scope."
      },
      "GrantaServerApiAggregationsShortTextAttributeAggregation": {
        "required": [
          "datumType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAttributeValueAggregation"
          },
          {
            "type": "object",
            "properties": {
              "terms": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiAggregationsTermWithCount"
                },
                "nullable": true
              },
              "datumType": {
                "type": "string",
                "default": "shortText"
              }
            }
          }
        ],
        "x-discriminator-value": "shortText"
      },
      "GrantaServerApiAggregationsDiscreteTextAttributeAggregation": {
        "required": [
          "datumType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAttributeValueAggregation"
          },
          {
            "type": "object",
            "properties": {
              "terms": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiAggregationsTermWithCount"
                },
                "nullable": true
              },
              "datumType": {
                "type": "string",
                "default": "discreteText"
              }
            }
          }
        ],
        "x-discriminator-value": "discreteText"
      },
      "GrantaServerApiAggregationsLinkAttributeAggregation": {
        "required": [
          "datumType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GrantaServerApiAggregationsAttributeValueAggregation"
          },
          {
            "type": "object",
            "properties": {
              "localAggregations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GrantaServerApiAggregationsAttributeAggregation"
                },
                "nullable": true
              },
              "datumType": {
                "type": "string",
                "default": "link"
              }
            }
          }
        ],
        "x-discriminator-value": "link"
      }
    }
  }
}