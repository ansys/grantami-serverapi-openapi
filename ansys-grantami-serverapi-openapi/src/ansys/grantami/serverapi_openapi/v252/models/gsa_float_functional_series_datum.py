"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional, Union  # noqa: F401

from . import ModelBase, Unset, Unset_Type
from ansys.grantami.serverapi_openapi.v252.models.gsa_float_functional_datum import GsaFloatFunctionalDatum  # noqa: F401
from ansys.grantami.serverapi_openapi.v252.models.gsa_graph_type import GsaGraphType
from ansys.grantami.serverapi_openapi.v252.models.gsa_datum_type import GsaDatumType


if TYPE_CHECKING:
    from datetime import datetime
    import pathlib
    from . import *


class GsaFloatFunctionalSeriesDatum(GsaFloatFunctionalDatum):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "datum_type": "GsaDatumType",
        "estimated": "bool",
        "graph": "GsaFloatSeriesGraph",
        "graph_type": "GsaGraphType",
        "is_range": "bool",
        "log_scale_on_y_axis": "bool",
        "not_applicable": "str",
        "parameter_settings": "list[GsaFunctionalParameterSetting]",
        "show_as_table": "bool",
        "unit": "GsaSlimUnit",
    }

    attribute_map: dict[str, str] = {
        "datum_type": "datumType",
        "estimated": "estimated",
        "graph": "graph",
        "graph_type": "graphType",
        "is_range": "isRange",
        "log_scale_on_y_axis": "logScaleOnYAxis",
        "not_applicable": "notApplicable",
        "parameter_settings": "parameterSettings",
        "show_as_table": "showAsTable",
        "unit": "unit",
    }

    subtype_mapping: dict[str, str] = {
        "graph": "GsaFloatSeriesGraph",
    }

    discriminator: Optional[str] = None

    def __init__(self, *, datum_type: "GsaDatumType" = GsaDatumType.FLOATFUNCTIONAL, estimated: "bool", graph: "GsaFloatSeriesGraph", graph_type: "GsaGraphType" = GsaGraphType.SERIES, is_range: "bool", log_scale_on_y_axis: "bool", not_applicable: "str" = "applicable", parameter_settings: "list[GsaFunctionalParameterSetting]", show_as_table: "bool", unit: "Union[GsaSlimUnit, Unset_Type]" = Unset,) -> None:
        """GsaFloatFunctionalSeriesDatum - a model defined in Swagger

        Parameters
        ----------
        datum_type: GsaDatumType
        estimated: bool
        graph: GsaFloatSeriesGraph
        graph_type: GsaGraphType
        is_range: bool
        log_scale_on_y_axis: bool
        not_applicable: str
        parameter_settings: list[GsaFunctionalParameterSetting]
        show_as_table: bool
        unit: GsaSlimUnit, optional
        """
        super().__init__(datum_type=datum_type, estimated=estimated, graph_type=graph_type, is_range=is_range, log_scale_on_y_axis=log_scale_on_y_axis, not_applicable=not_applicable, parameter_settings=parameter_settings, show_as_table=show_as_table, unit=unit)
        self._graph: GsaFloatSeriesGraph

        self.graph = graph

    @property
    def graph(self) -> "GsaFloatSeriesGraph":
        """Gets the graph of this GsaFloatFunctionalSeriesDatum.

        Returns
        -------
        GsaFloatSeriesGraph
            The graph of this GsaFloatFunctionalSeriesDatum.
        """
        return self._graph

    @graph.setter
    def graph(self, graph: "GsaFloatSeriesGraph") -> None:
        """Sets the graph of this GsaFloatFunctionalSeriesDatum.

        Parameters
        ----------
        graph: GsaFloatSeriesGraph
            The graph of this GsaFloatFunctionalSeriesDatum.
        """
        # Field is not nullable
        if graph is None:
            raise ValueError("Invalid value for 'graph', must not be 'None'")
        # Field is required
        if graph is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'graph', must not be 'Unset'")
        self._graph = graph

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaFloatFunctionalSeriesDatum):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other

