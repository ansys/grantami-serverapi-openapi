# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
MI Server API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional, Union  # noqa: F401

from . import ModelBase, Unset, Unset_Type

if TYPE_CHECKING:
    from datetime import datetime
    import pathlib

    from . import *


class GsaPermissionCategory(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "guid": "str",
        "name": "str",
        "permissions": "list[GsaSlimNamedEntity]",
    }

    attribute_map: dict[str, str] = {
        "guid": "guid",
        "name": "name",
        "permissions": "permissions",
    }

    subtype_mapping: dict[str, str] = {
        "permissions": "GsaSlimNamedEntity",
    }

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        guid: "str",
        name: "str",
        permissions: "list[GsaSlimNamedEntity]",
    ) -> None:
        """GsaPermissionCategory - a model defined in Swagger

        Parameters
        ----------
        guid: str
        name: str
        permissions: list[GsaSlimNamedEntity]
        """
        self._permissions: list[GsaSlimNamedEntity]
        self._name: str
        self._guid: str

        self.permissions = permissions
        self.name = name
        self.guid = guid

    @property
    def permissions(self) -> "list[GsaSlimNamedEntity]":
        """Gets the permissions of this GsaPermissionCategory.

        Returns
        -------
        list[GsaSlimNamedEntity]
            The permissions of this GsaPermissionCategory.
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions: "list[GsaSlimNamedEntity]") -> None:
        """Sets the permissions of this GsaPermissionCategory.

        Parameters
        ----------
        permissions: list[GsaSlimNamedEntity]
            The permissions of this GsaPermissionCategory.
        """
        # Field is not nullable
        if permissions is None:
            raise ValueError("Invalid value for 'permissions', must not be 'None'")
        # Field is required
        if permissions is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'permissions', must not be 'Unset'")
        self._permissions = permissions

    @property
    def name(self) -> "str":
        """Gets the name of this GsaPermissionCategory.

        Returns
        -------
        str
            The name of this GsaPermissionCategory.
        """
        return self._name

    @name.setter
    def name(self, name: "str") -> None:
        """Sets the name of this GsaPermissionCategory.

        Parameters
        ----------
        name: str
            The name of this GsaPermissionCategory.
        """
        # Field is not nullable
        if name is None:
            raise ValueError("Invalid value for 'name', must not be 'None'")
        # Field is required
        if name is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'name', must not be 'Unset'")
        self._name = name

    @property
    def guid(self) -> "str":
        """Gets the guid of this GsaPermissionCategory.

        Returns
        -------
        str
            The guid of this GsaPermissionCategory.
        """
        return self._guid

    @guid.setter
    def guid(self, guid: "str") -> None:
        """Sets the guid of this GsaPermissionCategory.

        Parameters
        ----------
        guid: str
            The guid of this GsaPermissionCategory.
        """
        # Field is not nullable
        if guid is None:
            raise ValueError("Invalid value for 'guid', must not be 'None'")
        # Field is required
        if guid is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'guid', must not be 'Unset'")
        self._guid = guid

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaPermissionCategory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
