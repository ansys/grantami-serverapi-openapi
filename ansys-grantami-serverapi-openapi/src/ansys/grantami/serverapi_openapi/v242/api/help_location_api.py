# Copyright (C) 2023 - 2024 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Dict, List, Optional, Union  # noqa: F401

from . import ApiBase

if TYPE_CHECKING:
    import pathlib

    from ..models import *


class HelpLocationApi(ApiBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def get_help_url(self, *, help_key: "str") -> "None":
        """Returns the URL that the given helpKey maps to.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        help_key: str
            The help key.

        Returns
        -------
        None
        """
        data = self._get_help_url_with_http_info(help_key, _return_http_data_only=True)
        return data  # type: ignore[no-any-return]

    def _get_help_url_with_http_info(self, help_key: "str", **kwargs: Any) -> Any:
        all_params = ["help_key", "_return_http_data_only", "_preload_content", "_request_timeout"]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method get_help_url"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "help_key" is set
        if "help_key" not in params or params["help_key"] is None:
            raise ValueError(
                "Missing the required parameter 'help_key' when calling 'get_help_url'"
            )

        collection_formats: Dict[str, Any] = {}

        path_params: Dict[str, Any] = {}
        if "help_key" in params and help_key is not None:
            path_params["help-key"] = params["help_key"]

        query_params: List[Any] = []

        header_params: Dict[str, Any] = {}

        form_params: List[Any] = []
        local_var_files: Dict[str, Any] = {}

        body_params = None

        response_type_map: Dict[int, Optional[str]] = {
            200: None,
        }

        return self.api_client.call_api(
            "/v1alpha/help-location/url/{help-key}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def get_help_url_redirect(self, *, help_key: "str") -> "None":
        """Redirects client to the URL that the given helpKey maps to.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        help_key: str
            The help key.

        Returns
        -------
        None
        """
        data = self._get_help_url_redirect_with_http_info(help_key, _return_http_data_only=True)
        return data  # type: ignore[no-any-return]

    def _get_help_url_redirect_with_http_info(self, help_key: "str", **kwargs: Any) -> Any:
        all_params = ["help_key", "_return_http_data_only", "_preload_content", "_request_timeout"]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method get_help_url_redirect"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "help_key" is set
        if "help_key" not in params or params["help_key"] is None:
            raise ValueError(
                "Missing the required parameter 'help_key' when calling 'get_help_url_redirect'"
            )

        collection_formats: Dict[str, Any] = {}

        path_params: Dict[str, Any] = {}
        if "help_key" in params and help_key is not None:
            path_params["help-key"] = params["help_key"]

        query_params: List[Any] = []

        header_params: Dict[str, Any] = {}

        form_params: List[Any] = []
        local_var_files: Dict[str, Any] = {}

        body_params = None

        response_type_map: Dict[int, Optional[str]] = {
            200: None,
            302: None,
        }

        return self.api_client.call_api(
            "/v1alpha/help-location/redirect/{help-key}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )
