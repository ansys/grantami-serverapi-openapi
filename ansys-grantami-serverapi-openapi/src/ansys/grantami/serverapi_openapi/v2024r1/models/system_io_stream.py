# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
MI Server API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional, Union  # noqa: F401

from . import ModelBase, Unset, Unset_Type

if TYPE_CHECKING:
    from datetime import datetime
    import pathlib

    from . import *


class SystemIOStream(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "can_read": "bool",
        "can_seek": "bool",
        "can_timeout": "bool",
        "can_write": "bool",
        "length": "int",
        "position": "int",
        "read_timeout": "int",
        "write_timeout": "int",
    }

    attribute_map: dict[str, str] = {
        "can_read": "canRead",
        "can_seek": "canSeek",
        "can_timeout": "canTimeout",
        "can_write": "canWrite",
        "length": "length",
        "position": "position",
        "read_timeout": "readTimeout",
        "write_timeout": "writeTimeout",
    }

    subtype_mapping: dict[str, str] = {}

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        can_read: "Union[bool, Unset_Type]" = Unset,
        can_seek: "Union[bool, Unset_Type]" = Unset,
        can_timeout: "Union[bool, Unset_Type]" = Unset,
        can_write: "Union[bool, Unset_Type]" = Unset,
        length: "Union[int, Unset_Type]" = Unset,
        position: "Union[int, Unset_Type]" = Unset,
        read_timeout: "Union[int, Unset_Type]" = Unset,
        write_timeout: "Union[int, Unset_Type]" = Unset,
    ) -> None:
        """SystemIOStream - a model defined in Swagger

        Parameters
        ----------
        can_read: bool, optional
        can_seek: bool, optional
        can_timeout: bool, optional
        can_write: bool, optional
        length: int, optional
        position: int, optional
        read_timeout: int, optional
        write_timeout: int, optional
        """
        self._can_read: Union[bool, Unset_Type] = Unset
        self._can_seek: Union[bool, Unset_Type] = Unset
        self._can_timeout: Union[bool, Unset_Type] = Unset
        self._can_write: Union[bool, Unset_Type] = Unset
        self._length: Union[int, Unset_Type] = Unset
        self._position: Union[int, Unset_Type] = Unset
        self._read_timeout: Union[int, Unset_Type] = Unset
        self._write_timeout: Union[int, Unset_Type] = Unset

        if can_read is not Unset:
            self.can_read = can_read
        if can_seek is not Unset:
            self.can_seek = can_seek
        if can_timeout is not Unset:
            self.can_timeout = can_timeout
        if can_write is not Unset:
            self.can_write = can_write
        if length is not Unset:
            self.length = length
        if position is not Unset:
            self.position = position
        if read_timeout is not Unset:
            self.read_timeout = read_timeout
        if write_timeout is not Unset:
            self.write_timeout = write_timeout

    @property
    def can_read(self) -> "Union[bool, Unset_Type]":
        """Gets the can_read of this SystemIOStream.

        Returns
        -------
        Union[bool, Unset_Type]
            The can_read of this SystemIOStream.
        """
        return self._can_read

    @can_read.setter
    def can_read(self, can_read: "Union[bool, Unset_Type]") -> None:
        """Sets the can_read of this SystemIOStream.

        Parameters
        ----------
        can_read: Union[bool, Unset_Type]
            The can_read of this SystemIOStream.
        """
        # Field is not nullable
        if can_read is None:
            raise ValueError("Invalid value for 'can_read', must not be 'None'")
        self._can_read = can_read

    @property
    def can_seek(self) -> "Union[bool, Unset_Type]":
        """Gets the can_seek of this SystemIOStream.

        Returns
        -------
        Union[bool, Unset_Type]
            The can_seek of this SystemIOStream.
        """
        return self._can_seek

    @can_seek.setter
    def can_seek(self, can_seek: "Union[bool, Unset_Type]") -> None:
        """Sets the can_seek of this SystemIOStream.

        Parameters
        ----------
        can_seek: Union[bool, Unset_Type]
            The can_seek of this SystemIOStream.
        """
        # Field is not nullable
        if can_seek is None:
            raise ValueError("Invalid value for 'can_seek', must not be 'None'")
        self._can_seek = can_seek

    @property
    def can_timeout(self) -> "Union[bool, Unset_Type]":
        """Gets the can_timeout of this SystemIOStream.

        Returns
        -------
        Union[bool, Unset_Type]
            The can_timeout of this SystemIOStream.
        """
        return self._can_timeout

    @can_timeout.setter
    def can_timeout(self, can_timeout: "Union[bool, Unset_Type]") -> None:
        """Sets the can_timeout of this SystemIOStream.

        Parameters
        ----------
        can_timeout: Union[bool, Unset_Type]
            The can_timeout of this SystemIOStream.
        """
        # Field is not nullable
        if can_timeout is None:
            raise ValueError("Invalid value for 'can_timeout', must not be 'None'")
        self._can_timeout = can_timeout

    @property
    def can_write(self) -> "Union[bool, Unset_Type]":
        """Gets the can_write of this SystemIOStream.

        Returns
        -------
        Union[bool, Unset_Type]
            The can_write of this SystemIOStream.
        """
        return self._can_write

    @can_write.setter
    def can_write(self, can_write: "Union[bool, Unset_Type]") -> None:
        """Sets the can_write of this SystemIOStream.

        Parameters
        ----------
        can_write: Union[bool, Unset_Type]
            The can_write of this SystemIOStream.
        """
        # Field is not nullable
        if can_write is None:
            raise ValueError("Invalid value for 'can_write', must not be 'None'")
        self._can_write = can_write

    @property
    def length(self) -> "Union[int, Unset_Type]":
        """Gets the length of this SystemIOStream.

        Returns
        -------
        Union[int, Unset_Type]
            The length of this SystemIOStream.
        """
        return self._length

    @length.setter
    def length(self, length: "Union[int, Unset_Type]") -> None:
        """Sets the length of this SystemIOStream.

        Parameters
        ----------
        length: Union[int, Unset_Type]
            The length of this SystemIOStream.
        """
        # Field is not nullable
        if length is None:
            raise ValueError("Invalid value for 'length', must not be 'None'")
        self._length = length

    @property
    def position(self) -> "Union[int, Unset_Type]":
        """Gets the position of this SystemIOStream.

        Returns
        -------
        Union[int, Unset_Type]
            The position of this SystemIOStream.
        """
        return self._position

    @position.setter
    def position(self, position: "Union[int, Unset_Type]") -> None:
        """Sets the position of this SystemIOStream.

        Parameters
        ----------
        position: Union[int, Unset_Type]
            The position of this SystemIOStream.
        """
        # Field is not nullable
        if position is None:
            raise ValueError("Invalid value for 'position', must not be 'None'")
        self._position = position

    @property
    def read_timeout(self) -> "Union[int, Unset_Type]":
        """Gets the read_timeout of this SystemIOStream.

        Returns
        -------
        Union[int, Unset_Type]
            The read_timeout of this SystemIOStream.
        """
        return self._read_timeout

    @read_timeout.setter
    def read_timeout(self, read_timeout: "Union[int, Unset_Type]") -> None:
        """Sets the read_timeout of this SystemIOStream.

        Parameters
        ----------
        read_timeout: Union[int, Unset_Type]
            The read_timeout of this SystemIOStream.
        """
        # Field is not nullable
        if read_timeout is None:
            raise ValueError("Invalid value for 'read_timeout', must not be 'None'")
        self._read_timeout = read_timeout

    @property
    def write_timeout(self) -> "Union[int, Unset_Type]":
        """Gets the write_timeout of this SystemIOStream.

        Returns
        -------
        Union[int, Unset_Type]
            The write_timeout of this SystemIOStream.
        """
        return self._write_timeout

    @write_timeout.setter
    def write_timeout(self, write_timeout: "Union[int, Unset_Type]") -> None:
        """Sets the write_timeout of this SystemIOStream.

        Parameters
        ----------
        write_timeout: Union[int, Unset_Type]
            The write_timeout of this SystemIOStream.
        """
        # Field is not nullable
        if write_timeout is None:
            raise ValueError("Invalid value for 'write_timeout', must not be 'None'")
        self._write_timeout = write_timeout

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemIOStream):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
