# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
MI Server API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional  # noqa: F401

from . import ApiBase

if TYPE_CHECKING:
    import pathlib

    from ..models import *


class DataUpdaterApi(ApiBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def apply_update(self, *, database_key: "str", update_token_guid: "str") -> "str":
        """Start an apply job for a given update

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
            See [Schema - Databases/GetAllDatabases](#/Schema%20-%20Databases/GetAllDatabases)
        update_token_guid: str

        Returns
        -------
        str
        """
        data = self._apply_update_with_http_info(
            database_key, update_token_guid, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _apply_update_with_http_info(
        self, database_key: "str", update_token_guid: "str", **kwargs: Any
    ) -> Any:
        all_params = [
            "database_key",
            "update_token_guid",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method apply_update"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'apply_update'"
            )
        # verify the required parameter "update_token_guid" is set
        if "update_token_guid" not in params or params["update_token_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'update_token_guid' when calling 'apply_update'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "update_token_guid" in params and update_token_guid is not None:
            path_params["update-token-guid"] = params["update_token_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "str",
        }

        return self.api_client.call_api(
            "/v1alpha/dataupdater/updates/{database-key}/{update-token-guid}:apply",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def delete_completed_data_updater_job(self, *, job_id: "str") -> "None":
        """Delete a specific job.  Only valid if job is in one of the completed states.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        job_id: str

        Returns
        -------
        None
        """
        data = self._delete_completed_data_updater_job_with_http_info(
            job_id, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _delete_completed_data_updater_job_with_http_info(
        self, job_id: "str", **kwargs: Any
    ) -> Any:
        all_params = ["job_id", "_return_http_data_only", "_preload_content", "_request_timeout"]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method delete_completed_data_updater_job"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "job_id" is set
        if "job_id" not in params or params["job_id"] is None:
            raise ValueError(
                "Missing the required parameter 'job_id' when calling 'delete_completed_data_updater_job'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "job_id" in params and job_id is not None:
            path_params["job-id"] = params["job_id"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None

        response_type_map: dict[int, Optional[str]] = {
            200: None,
        }

        return self.api_client.call_api(
            "/v1alpha/dataupdater/jobs/{job-id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def delete_update(self, *, database_key: "str", update_token_guid: "str") -> "None":
        """delete_update

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
            See [Schema - Databases/GetAllDatabases](#/Schema%20-%20Databases/GetAllDatabases)
        update_token_guid: str

        Returns
        -------
        None
        """
        data = self._delete_update_with_http_info(
            database_key, update_token_guid, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _delete_update_with_http_info(
        self, database_key: "str", update_token_guid: "str", **kwargs: Any
    ) -> Any:
        all_params = [
            "database_key",
            "update_token_guid",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method delete_update"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'delete_update'"
            )
        # verify the required parameter "update_token_guid" is set
        if "update_token_guid" not in params or params["update_token_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'update_token_guid' when calling 'delete_update'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "update_token_guid" in params and update_token_guid is not None:
            path_params["update-token-guid"] = params["update_token_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None

        response_type_map: dict[int, Optional[str]] = {
            200: None,
        }

        return self.api_client.call_api(
            "/v1alpha/dataupdater/updates/{database-key}/{update-token-guid}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def dry_run_update(self, *, database_key: "str", update_token_guid: "str") -> "str":
        """Start a dry run job for a given update

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
            See [Schema - Databases/GetAllDatabases](#/Schema%20-%20Databases/GetAllDatabases)
        update_token_guid: str

        Returns
        -------
        str
        """
        data = self._dry_run_update_with_http_info(
            database_key, update_token_guid, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _dry_run_update_with_http_info(
        self, database_key: "str", update_token_guid: "str", **kwargs: Any
    ) -> Any:
        all_params = [
            "database_key",
            "update_token_guid",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method dry_run_update"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'dry_run_update'"
            )
        # verify the required parameter "update_token_guid" is set
        if "update_token_guid" not in params or params["update_token_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'update_token_guid' when calling 'dry_run_update'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "update_token_guid" in params and update_token_guid is not None:
            path_params["update-token-guid"] = params["update_token_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "str",
        }

        return self.api_client.call_api(
            "/v1alpha/dataupdater/updates/{database-key}/{update-token-guid}:dry-run",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def get_all_updates(self) -> "list[GsaDataUpdate]":
        """get_all_updates

        This method makes a synchronous HTTP request.

        Returns
        -------
        list[GsaDataUpdate]
        """
        data = self._get_all_updates_with_http_info(_return_http_data_only=True)
        return data  # type: ignore[no-any-return]

    def _get_all_updates_with_http_info(self, **kwargs: Any) -> Any:
        all_params = ["_return_http_data_only", "_preload_content", "_request_timeout"]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method get_all_updates"
                )
            params[key] = val
        del params["kwargs"]

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "list[GsaDataUpdate]",
        }

        return self.api_client.call_api(
            "/v1alpha/dataupdater/updates",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def get_data_updater_job(self, *, job_id: "str") -> "GsaDataUpdaterJob":
        """Get a specific job.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        job_id: str

        Returns
        -------
        GsaDataUpdaterJob
        """
        data = self._get_data_updater_job_with_http_info(job_id, _return_http_data_only=True)
        return data  # type: ignore[no-any-return]

    def _get_data_updater_job_with_http_info(self, job_id: "str", **kwargs: Any) -> Any:
        all_params = ["job_id", "_return_http_data_only", "_preload_content", "_request_timeout"]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method get_data_updater_job"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "job_id" is set
        if "job_id" not in params or params["job_id"] is None:
            raise ValueError(
                "Missing the required parameter 'job_id' when calling 'get_data_updater_job'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "job_id" in params and job_id is not None:
            path_params["job-id"] = params["job_id"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaDataUpdaterJob",
        }

        return self.api_client.call_api(
            "/v1alpha/dataupdater/jobs/{job-id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def get_data_updater_jobs(self) -> "list[GsaDataUpdaterJob]":
        """Get all jobs.  (pertaining to databases that the user is administrator of)

        This method makes a synchronous HTTP request.

        Returns
        -------
        list[GsaDataUpdaterJob]
        """
        data = self._get_data_updater_jobs_with_http_info(_return_http_data_only=True)
        return data  # type: ignore[no-any-return]

    def _get_data_updater_jobs_with_http_info(self, **kwargs: Any) -> Any:
        all_params = ["_return_http_data_only", "_preload_content", "_request_timeout"]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method get_data_updater_jobs"
                )
            params[key] = val
        del params["kwargs"]

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "list[GsaDataUpdaterJob]",
        }

        return self.api_client.call_api(
            "/v1alpha/dataupdater/jobs",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def get_update(self, *, database_key: "str", update_token_guid: "str") -> "GsaDataUpdate":
        """get_update

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
            See [Schema - Databases/GetAllDatabases](#/Schema%20-%20Databases/GetAllDatabases)
        update_token_guid: str

        Returns
        -------
        GsaDataUpdate
        """
        data = self._get_update_with_http_info(
            database_key, update_token_guid, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _get_update_with_http_info(
        self, database_key: "str", update_token_guid: "str", **kwargs: Any
    ) -> Any:
        all_params = [
            "database_key",
            "update_token_guid",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(f"Got an unexpected keyword argument '{key}' to method get_update")
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'get_update'"
            )
        # verify the required parameter "update_token_guid" is set
        if "update_token_guid" not in params or params["update_token_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'update_token_guid' when calling 'get_update'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "update_token_guid" in params and update_token_guid is not None:
            path_params["update-token-guid"] = params["update_token_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaDataUpdate",
        }

        return self.api_client.call_api(
            "/v1alpha/dataupdater/updates/{database-key}/{update-token-guid}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def get_updates_for_database(self, *, database_key: "str") -> "list[GsaDataUpdate]":
        """get_updates_for_database

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
            See [Schema - Databases/GetAllDatabases](#/Schema%20-%20Databases/GetAllDatabases)

        Returns
        -------
        list[GsaDataUpdate]
        """
        data = self._get_updates_for_database_with_http_info(
            database_key, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _get_updates_for_database_with_http_info(self, database_key: "str", **kwargs: Any) -> Any:
        all_params = [
            "database_key",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method get_updates_for_database"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'get_updates_for_database'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "list[GsaDataUpdate]",
        }

        return self.api_client.call_api(
            "/v1alpha/dataupdater/updates/{database-key}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def register_update(
        self, *, database_key: "str", body: "Optional[GsaRegisterUpdateRequest]" = None
    ) -> "GsaDataUpdateToken":
        """Register an update

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
            See [Schema - Databases/GetAllDatabases](#/Schema%20-%20Databases/GetAllDatabases)
        body: GsaRegisterUpdateRequest

        Returns
        -------
        GsaDataUpdateToken
        """
        data = self._register_update_with_http_info(database_key, body, _return_http_data_only=True)
        return data  # type: ignore[no-any-return]

    def _register_update_with_http_info(
        self, database_key: "str", body: "Optional[GsaRegisterUpdateRequest]" = None, **kwargs: Any
    ) -> Any:
        all_params = [
            "database_key",
            "body",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method register_update"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'register_update'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        if "body" in params and body is not None:
            body_params = params["body"]
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        # HTTP header 'Content-Type'
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            ["application/json-patch+json", "application/json", "text/json", "application/*+json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaDataUpdateToken",
        }

        return self.api_client.call_api(
            "/v1alpha/dataupdater/updates/{database-key}",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )
