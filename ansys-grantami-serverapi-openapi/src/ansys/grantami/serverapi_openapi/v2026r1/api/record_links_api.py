# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
MI Server API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional  # noqa: F401

from . import ApiBase

if TYPE_CHECKING:
    import pathlib

    from ..models import *


class RecordLinksApi(ApiBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def get_link_results_for_group_for_history(
        self,
        *,
        database_key: "str",
        record_history_guid: "str",
        record_link_group_guid: "str",
        record_link_group_type: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
    ) -> "GsaRecordLinkResults | None":
        """Get record link results for the latest version of a given record history for a given record link group  Note that this is currently only implemented for static record link groups. If called for a smart or cross database record link group an error response will be returned.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
            See [Schema - Databases/GetAllDatabases](#/Schema%20-%20Databases/GetAllDatabases)
        record_history_guid: str
        record_link_group_guid: str
        record_link_group_type: str
            The record link group type as entered.
        mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.
        x_ansys_vc_mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.

        Returns
        -------
        GsaRecordLinkResults | None
        """
        data = self._get_link_results_for_group_for_history_with_http_info(
            database_key,
            record_history_guid,
            record_link_group_guid,
            record_link_group_type,
            mode,
            x_ansys_vc_mode,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _get_link_results_for_group_for_history_with_http_info(
        self,
        database_key: "str",
        record_history_guid: "str",
        record_link_group_guid: "str",
        record_link_group_type: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "record_history_guid",
            "record_link_group_guid",
            "record_link_group_type",
            "mode",
            "x_ansys_vc_mode",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method get_link_results_for_group_for_history"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'get_link_results_for_group_for_history'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'get_link_results_for_group_for_history'"
            )
        # verify the required parameter "record_link_group_guid" is set
        if "record_link_group_guid" not in params or params["record_link_group_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_link_group_guid' when calling 'get_link_results_for_group_for_history'"
            )
        # verify the required parameter "record_link_group_type" is set
        if "record_link_group_type" not in params or params["record_link_group_type"] is None:
            raise ValueError(
                "Missing the required parameter 'record_link_group_type' when calling 'get_link_results_for_group_for_history'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "record_link_group_guid" in params and record_link_group_guid is not None:
            path_params["record-link-group-guid"] = params["record_link_group_guid"]
        if "record_link_group_type" in params and record_link_group_type is not None:
            path_params["record-link-group-type"] = params["record_link_group_type"]

        query_params: list[Any] = []
        if "mode" in params and mode is not None:
            query_params.append(("mode", params["mode"]))

        header_params: dict[str, Any] = {}
        if "x_ansys_vc_mode" in params and x_ansys_vc_mode is not None:
            header_params["X-Ansys-VC-Mode"] = params["x_ansys_vc_mode"]

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaRecordLinkResults",
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/record-histories/{record-history-guid}/record-link-results/{record-link-group-guid}/{record-link-group-type}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def get_link_results_for_group_for_history_from_table(
        self,
        *,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        record_link_group_guid: "str",
        record_link_group_type: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
    ) -> "GsaRecordLinkResults | None":
        """Get record link results for the latest version of a given record history in a given table for a given record link group.  Note that this is currently only implemented for static record link groups. If called for a smart or cross database record link group an error response will be returned.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
            See [Schema - Databases/GetAllDatabases](#/Schema%20-%20Databases/GetAllDatabases)
        table_guid: str
            See [Schema - Tables/GetTables](#/Schema%20-%20Tables/GetTables) or [Schema - Tables/QueryTables](#/Schema%20-%20Tables/QueryTables)
        record_history_guid: str
        record_link_group_guid: str
        record_link_group_type: str
            The record link group type as entered.
        mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.
        x_ansys_vc_mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.

        Returns
        -------
        GsaRecordLinkResults | None
        """
        data = self._get_link_results_for_group_for_history_from_table_with_http_info(
            database_key,
            table_guid,
            record_history_guid,
            record_link_group_guid,
            record_link_group_type,
            mode,
            x_ansys_vc_mode,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _get_link_results_for_group_for_history_from_table_with_http_info(
        self,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        record_link_group_guid: "str",
        record_link_group_type: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "table_guid",
            "record_history_guid",
            "record_link_group_guid",
            "record_link_group_type",
            "mode",
            "x_ansys_vc_mode",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method get_link_results_for_group_for_history_from_table"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'get_link_results_for_group_for_history_from_table'"
            )
        # verify the required parameter "table_guid" is set
        if "table_guid" not in params or params["table_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'table_guid' when calling 'get_link_results_for_group_for_history_from_table'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'get_link_results_for_group_for_history_from_table'"
            )
        # verify the required parameter "record_link_group_guid" is set
        if "record_link_group_guid" not in params or params["record_link_group_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_link_group_guid' when calling 'get_link_results_for_group_for_history_from_table'"
            )
        # verify the required parameter "record_link_group_type" is set
        if "record_link_group_type" not in params or params["record_link_group_type"] is None:
            raise ValueError(
                "Missing the required parameter 'record_link_group_type' when calling 'get_link_results_for_group_for_history_from_table'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "table_guid" in params and table_guid is not None:
            path_params["table-guid"] = params["table_guid"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "record_link_group_guid" in params and record_link_group_guid is not None:
            path_params["record-link-group-guid"] = params["record_link_group_guid"]
        if "record_link_group_type" in params and record_link_group_type is not None:
            path_params["record-link-group-type"] = params["record_link_group_type"]

        query_params: list[Any] = []
        if "mode" in params and mode is not None:
            query_params.append(("mode", params["mode"]))

        header_params: dict[str, Any] = {}
        if "x_ansys_vc_mode" in params and x_ansys_vc_mode is not None:
            header_params["X-Ansys-VC-Mode"] = params["x_ansys_vc_mode"]

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaRecordLinkResults",
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/tables/{table-guid}/record-histories/{record-history-guid}/record-link-results/{record-link-group-guid}/{record-link-group-type}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def get_link_results_for_group_for_version(
        self,
        *,
        database_key: "str",
        record_history_guid: "str",
        record_version_guid: "str",
        record_link_group_guid: "str",
        record_link_group_type: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
    ) -> "GsaRecordLinkResults | None":
        """Get record link results for a given record version of a given record history for a given record link group  Note that this is currently only implemented for static record link groups. If called for a smart or cross database record link group an error response will be returned.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
            See [Schema - Databases/GetAllDatabases](#/Schema%20-%20Databases/GetAllDatabases)
        record_history_guid: str
        record_version_guid: str
        record_link_group_guid: str
        record_link_group_type: str
            The record link group type as entered.
        mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.
        x_ansys_vc_mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.

        Returns
        -------
        GsaRecordLinkResults | None
        """
        data = self._get_link_results_for_group_for_version_with_http_info(
            database_key,
            record_history_guid,
            record_version_guid,
            record_link_group_guid,
            record_link_group_type,
            mode,
            x_ansys_vc_mode,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _get_link_results_for_group_for_version_with_http_info(
        self,
        database_key: "str",
        record_history_guid: "str",
        record_version_guid: "str",
        record_link_group_guid: "str",
        record_link_group_type: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "record_history_guid",
            "record_version_guid",
            "record_link_group_guid",
            "record_link_group_type",
            "mode",
            "x_ansys_vc_mode",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method get_link_results_for_group_for_version"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'get_link_results_for_group_for_version'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'get_link_results_for_group_for_version'"
            )
        # verify the required parameter "record_version_guid" is set
        if "record_version_guid" not in params or params["record_version_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_version_guid' when calling 'get_link_results_for_group_for_version'"
            )
        # verify the required parameter "record_link_group_guid" is set
        if "record_link_group_guid" not in params or params["record_link_group_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_link_group_guid' when calling 'get_link_results_for_group_for_version'"
            )
        # verify the required parameter "record_link_group_type" is set
        if "record_link_group_type" not in params or params["record_link_group_type"] is None:
            raise ValueError(
                "Missing the required parameter 'record_link_group_type' when calling 'get_link_results_for_group_for_version'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "record_version_guid" in params and record_version_guid is not None:
            path_params["record-version-guid"] = params["record_version_guid"]
        if "record_link_group_guid" in params and record_link_group_guid is not None:
            path_params["record-link-group-guid"] = params["record_link_group_guid"]
        if "record_link_group_type" in params and record_link_group_type is not None:
            path_params["record-link-group-type"] = params["record_link_group_type"]

        query_params: list[Any] = []
        if "mode" in params and mode is not None:
            query_params.append(("mode", params["mode"]))

        header_params: dict[str, Any] = {}
        if "x_ansys_vc_mode" in params and x_ansys_vc_mode is not None:
            header_params["X-Ansys-VC-Mode"] = params["x_ansys_vc_mode"]

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaRecordLinkResults",
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/record-histories/{record-history-guid}/record-versions/{record-version-guid}/record-link-results/{record-link-group-guid}/{record-link-group-type}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def get_link_results_for_group_for_version_from_table(
        self,
        *,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        record_version_guid: "str",
        record_link_group_guid: "str",
        record_link_group_type: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
    ) -> "GsaRecordLinkResults | None":
        """Get record link results for a given record version in a given table and record history for a given record link group  Note that this is currently only implemented for static record link groups. If called for a smart or cross database record link group an error response will be returned.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
            See [Schema - Databases/GetAllDatabases](#/Schema%20-%20Databases/GetAllDatabases)
        table_guid: str
            See [Schema - Tables/GetTables](#/Schema%20-%20Tables/GetTables) or [Schema - Tables/QueryTables](#/Schema%20-%20Tables/QueryTables)
        record_history_guid: str
        record_version_guid: str
        record_link_group_guid: str
        record_link_group_type: str
            The record link group type as entered.
        mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.
        x_ansys_vc_mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.

        Returns
        -------
        GsaRecordLinkResults | None
        """
        data = self._get_link_results_for_group_for_version_from_table_with_http_info(
            database_key,
            table_guid,
            record_history_guid,
            record_version_guid,
            record_link_group_guid,
            record_link_group_type,
            mode,
            x_ansys_vc_mode,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _get_link_results_for_group_for_version_from_table_with_http_info(
        self,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        record_version_guid: "str",
        record_link_group_guid: "str",
        record_link_group_type: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "table_guid",
            "record_history_guid",
            "record_version_guid",
            "record_link_group_guid",
            "record_link_group_type",
            "mode",
            "x_ansys_vc_mode",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method get_link_results_for_group_for_version_from_table"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'get_link_results_for_group_for_version_from_table'"
            )
        # verify the required parameter "table_guid" is set
        if "table_guid" not in params or params["table_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'table_guid' when calling 'get_link_results_for_group_for_version_from_table'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'get_link_results_for_group_for_version_from_table'"
            )
        # verify the required parameter "record_version_guid" is set
        if "record_version_guid" not in params or params["record_version_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_version_guid' when calling 'get_link_results_for_group_for_version_from_table'"
            )
        # verify the required parameter "record_link_group_guid" is set
        if "record_link_group_guid" not in params or params["record_link_group_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_link_group_guid' when calling 'get_link_results_for_group_for_version_from_table'"
            )
        # verify the required parameter "record_link_group_type" is set
        if "record_link_group_type" not in params or params["record_link_group_type"] is None:
            raise ValueError(
                "Missing the required parameter 'record_link_group_type' when calling 'get_link_results_for_group_for_version_from_table'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "table_guid" in params and table_guid is not None:
            path_params["table-guid"] = params["table_guid"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "record_version_guid" in params and record_version_guid is not None:
            path_params["record-version-guid"] = params["record_version_guid"]
        if "record_link_group_guid" in params and record_link_group_guid is not None:
            path_params["record-link-group-guid"] = params["record_link_group_guid"]
        if "record_link_group_type" in params and record_link_group_type is not None:
            path_params["record-link-group-type"] = params["record_link_group_type"]

        query_params: list[Any] = []
        if "mode" in params and mode is not None:
            query_params.append(("mode", params["mode"]))

        header_params: dict[str, Any] = {}
        if "x_ansys_vc_mode" in params and x_ansys_vc_mode is not None:
            header_params["X-Ansys-VC-Mode"] = params["x_ansys_vc_mode"]

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaRecordLinkResults",
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/tables/{table-guid}/record-histories/{record-history-guid}/record-versions/{record-version-guid}/record-link-results/{record-link-group-guid}/{record-link-group-type}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )
