# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
MI Server API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional  # noqa: F401

from . import ApiBase

if TYPE_CHECKING:
    import pathlib

    from ..models import *


class ServerManagerApi(ApiBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def delete_user(self, *, user_identity: "int") -> "GsaNotificationUser | None":
        """Given a user's identity, deletes the user.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        user_identity: int

        Returns
        -------
        GsaNotificationUser | None
        """
        data = self._delete_user_with_http_info(user_identity, _return_http_data_only=True)
        return data  # type: ignore[no-any-return]

    def _delete_user_with_http_info(self, user_identity: "int", **kwargs: Any) -> Any:
        all_params = [
            "user_identity",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(f"Got an unexpected keyword argument '{key}' to method delete_user")
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "user_identity" is set
        if "user_identity" not in params or params["user_identity"] is None:
            raise ValueError(
                "Missing the required parameter 'user_identity' when calling 'delete_user'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "user_identity" in params and user_identity is not None:
            path_params["userIdentity"] = params["user_identity"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaNotificationUser",
            204: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/serverManager/emailNotifications/users/{userIdentity}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def delete_watch(self, *, user_identity: "int", watch_identity: "int") -> "None":
        """Given a user identity and a watch identity, deletes the watch.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        user_identity: int
        watch_identity: int

        Returns
        -------
        None
        """
        data = self._delete_watch_with_http_info(
            user_identity, watch_identity, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _delete_watch_with_http_info(
        self, user_identity: "int", watch_identity: "int", **kwargs: Any
    ) -> Any:
        all_params = [
            "user_identity",
            "watch_identity",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method delete_watch"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "user_identity" is set
        if "user_identity" not in params or params["user_identity"] is None:
            raise ValueError(
                "Missing the required parameter 'user_identity' when calling 'delete_watch'"
            )
        # verify the required parameter "watch_identity" is set
        if "watch_identity" not in params or params["watch_identity"] is None:
            raise ValueError(
                "Missing the required parameter 'watch_identity' when calling 'delete_watch'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "user_identity" in params and user_identity is not None:
            path_params["userIdentity"] = params["user_identity"]
        if "watch_identity" in params and watch_identity is not None:
            path_params["watchIdentity"] = params["watch_identity"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None

        response_type_map: dict[int, Optional[str]] = {
            200: None,
            204: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/serverManager/emailNotifications/users/{userIdentity}/watches/{watchIdentity}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def get_all_email_generation_settings(self) -> "GsaEmailGenerationSettings | None":
        """Returns all the email generation settings for the server if the user is a system administrator.

        This method makes a synchronous HTTP request.

        Returns
        -------
        GsaEmailGenerationSettings | None
        """
        data = self._get_all_email_generation_settings_with_http_info(_return_http_data_only=True)
        return data  # type: ignore[no-any-return]

    def _get_all_email_generation_settings_with_http_info(self, **kwargs: Any) -> Any:
        all_params = ["_return_http_data_only", "_preload_content", "_request_timeout"]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method get_all_email_generation_settings"
                )
            params[key] = val
        del params["kwargs"]

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaEmailGenerationSettings",
            403: None,
        }

        return self.api_client.call_api(
            "/v1alpha/serverManager/emailNotifications/generationSettings",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def get_smtp_properties(self) -> "GsaSmtpProperties":
        """get_smtp_properties

        This method makes a synchronous HTTP request.

        Returns
        -------
        GsaSmtpProperties
        """
        data = self._get_smtp_properties_with_http_info(_return_http_data_only=True)
        return data  # type: ignore[no-any-return]

    def _get_smtp_properties_with_http_info(self, **kwargs: Any) -> Any:
        all_params = ["_return_http_data_only", "_preload_content", "_request_timeout"]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method get_smtp_properties"
                )
            params[key] = val
        del params["kwargs"]

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaSmtpProperties",
        }

        return self.api_client.call_api(
            "/v1alpha/serverManager/email",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def get_support_details(self) -> "GsaSupportProperties | None":
        """Returns the support details for the server, including support name, email, website, telephone, and licensing contact details.

        This method makes a synchronous HTTP request.

        Returns
        -------
        GsaSupportProperties | None
        """
        data = self._get_support_details_with_http_info(_return_http_data_only=True)
        return data  # type: ignore[no-any-return]

    def _get_support_details_with_http_info(self, **kwargs: Any) -> Any:
        all_params = ["_return_http_data_only", "_preload_content", "_request_timeout"]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method get_support_details"
                )
            params[key] = val
        del params["kwargs"]

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaSupportProperties",
            403: None,
        }

        return self.api_client.call_api(
            "/v1alpha/serverManager/supportDetails",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def get_users(self) -> "GsaNotificationUsers | None":
        """Returns all the notifications users, if the user is a system administrator.

        This method makes a synchronous HTTP request.

        Returns
        -------
        GsaNotificationUsers | None
        """
        data = self._get_users_with_http_info(_return_http_data_only=True)
        return data  # type: ignore[no-any-return]

    def _get_users_with_http_info(self, **kwargs: Any) -> Any:
        all_params = ["_return_http_data_only", "_preload_content", "_request_timeout"]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(f"Got an unexpected keyword argument '{key}' to method get_users")
            params[key] = val
        del params["kwargs"]

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaNotificationUsers",
            403: None,
        }

        return self.api_client.call_api(
            "/v1alpha/serverManager/emailNotifications/users",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def put(self, *, body: "Optional[GsaSmtpProperties]" = None) -> "None":
        """put

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        body: GsaSmtpProperties

        Returns
        -------
        None
        """
        data = self._put_with_http_info(body, _return_http_data_only=True)
        return data  # type: ignore[no-any-return]

    def _put_with_http_info(self, body: "Optional[GsaSmtpProperties]" = None, **kwargs: Any) -> Any:
        all_params = ["body", "_return_http_data_only", "_preload_content", "_request_timeout"]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(f"Got an unexpected keyword argument '{key}' to method put")
            params[key] = val
        del params["kwargs"]

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        if "body" in params and body is not None:
            body_params = params["body"]
        # HTTP header 'Content-Type'
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            ["application/json-patch+json", "application/json", "text/json", "application/*+json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: None,
        }

        return self.api_client.call_api(
            "/v1alpha/serverManager/email",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def set_email_generation_settings(
        self, *, body: "Optional[GsaEmailGenerationSettings]" = None
    ) -> "GsaEmailGenerationSettings | None":
        """Sets all the email generation settings for the server and returns the updated object.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        body: GsaEmailGenerationSettings

        Returns
        -------
        GsaEmailGenerationSettings | None
        """
        data = self._set_email_generation_settings_with_http_info(body, _return_http_data_only=True)
        return data  # type: ignore[no-any-return]

    def _set_email_generation_settings_with_http_info(
        self, body: "Optional[GsaEmailGenerationSettings]" = None, **kwargs: Any
    ) -> Any:
        all_params = ["body", "_return_http_data_only", "_preload_content", "_request_timeout"]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method set_email_generation_settings"
                )
            params[key] = val
        del params["kwargs"]

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        if "body" in params and body is not None:
            body_params = params["body"]
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        # HTTP header 'Content-Type'
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            ["application/json-patch+json", "application/json", "text/json", "application/*+json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaEmailGenerationSettings",
            403: None,
        }

        return self.api_client.call_api(
            "/v1alpha/serverManager/emailNotifications/generationSettings",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def set_user(
        self, *, user_identity: "int", body: "Optional[GsaUpdateNotificationUser]" = None
    ) -> "GsaNotificationUser | None":
        """Given an existing user's identity, updates their email address.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        user_identity: int
        body: GsaUpdateNotificationUser

        Returns
        -------
        GsaNotificationUser | None
        """
        data = self._set_user_with_http_info(user_identity, body, _return_http_data_only=True)
        return data  # type: ignore[no-any-return]

    def _set_user_with_http_info(
        self,
        user_identity: "int",
        body: "Optional[GsaUpdateNotificationUser]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "user_identity",
            "body",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(f"Got an unexpected keyword argument '{key}' to method set_user")
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "user_identity" is set
        if "user_identity" not in params or params["user_identity"] is None:
            raise ValueError(
                "Missing the required parameter 'user_identity' when calling 'set_user'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "user_identity" in params and user_identity is not None:
            path_params["userIdentity"] = params["user_identity"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        if "body" in params and body is not None:
            body_params = params["body"]
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        # HTTP header 'Content-Type'
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            ["application/json-patch+json", "application/json", "text/json", "application/*+json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaNotificationUser",
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/serverManager/emailNotifications/users/{userIdentity}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def update_support_details(
        self, *, body: "Optional[GsaUpdateSupportProperties]" = None
    ) -> "GsaSupportProperties | None":
        """Updates the support details. Explicitly setting a property to null will remove that property.  Properties not specified will not be changed.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        body: GsaUpdateSupportProperties

        Returns
        -------
        GsaSupportProperties | None
        """
        data = self._update_support_details_with_http_info(body, _return_http_data_only=True)
        return data  # type: ignore[no-any-return]

    def _update_support_details_with_http_info(
        self, body: "Optional[GsaUpdateSupportProperties]" = None, **kwargs: Any
    ) -> Any:
        all_params = ["body", "_return_http_data_only", "_preload_content", "_request_timeout"]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method update_support_details"
                )
            params[key] = val
        del params["kwargs"]

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        if "body" in params and body is not None:
            body_params = params["body"]
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        # HTTP header 'Content-Type'
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            ["application/json-patch+json", "application/json", "text/json", "application/*+json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaSupportProperties",
            400: None,
            403: None,
        }

        return self.api_client.call_api(
            "/v1alpha/serverManager/supportDetails",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )
