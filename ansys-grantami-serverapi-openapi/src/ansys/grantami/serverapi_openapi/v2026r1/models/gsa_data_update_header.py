# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
MI Server API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional  # noqa: F401

from . import ModelBase, Unset, Unset_Type

if TYPE_CHECKING:
    from datetime import datetime
    import pathlib

    from . import *


class GsaDataUpdateHeader(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "contains_fallback_identifiers": "bool",
        "create_date": "datetime",
        "name": "str",
        "project_guid": "str",
        "source_volume_guid": "str",
        "supported_objects_version": "int",
        "update_format_version": "int",
        "update_guid": "str",
        "description": "str",
        "mi_version": "str",
        "new_version_guid": "str",
        "prerequisite_update_guid": "str",
        "prerequisite_update_name": "str",
        "project_name": "str",
        "source_database_key": "str",
    }

    attribute_map: dict[str, str] = {
        "contains_fallback_identifiers": "containsFallbackIdentifiers",
        "create_date": "createDate",
        "name": "name",
        "project_guid": "projectGuid",
        "source_volume_guid": "sourceVolumeGuid",
        "supported_objects_version": "supportedObjectsVersion",
        "update_format_version": "updateFormatVersion",
        "update_guid": "updateGuid",
        "description": "description",
        "mi_version": "miVersion",
        "new_version_guid": "newVersionGuid",
        "prerequisite_update_guid": "prerequisiteUpdateGuid",
        "prerequisite_update_name": "prerequisiteUpdateName",
        "project_name": "projectName",
        "source_database_key": "sourceDatabaseKey",
    }

    subtype_mapping: dict[str, str] = {}

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        contains_fallback_identifiers: "bool",
        create_date: "datetime",
        name: "str",
        project_guid: "str",
        source_volume_guid: "str",
        supported_objects_version: "int",
        update_format_version: "int",
        update_guid: "str",
        description: "str | None | Unset_Type" = Unset,
        mi_version: "str | None | Unset_Type" = Unset,
        new_version_guid: "str | None | Unset_Type" = Unset,
        prerequisite_update_guid: "str | None | Unset_Type" = Unset,
        prerequisite_update_name: "str | None | Unset_Type" = Unset,
        project_name: "str | None | Unset_Type" = Unset,
        source_database_key: "str | None | Unset_Type" = Unset,
    ) -> None:
        """GsaDataUpdateHeader - a model defined in Swagger

        Parameters
        ----------
        contains_fallback_identifiers: bool
        create_date: datetime
        name: str
        project_guid: str
        source_volume_guid: str
        supported_objects_version: int
        update_format_version: int
        update_guid: str
        description: str | None, optional
        mi_version: str | None, optional
        new_version_guid: str | None, optional
        prerequisite_update_guid: str | None, optional
        prerequisite_update_name: str | None, optional
        project_name: str | None, optional
        source_database_key: str | None, optional
        """
        self._create_date: datetime
        self._update_guid: str
        self._prerequisite_update_guid: str | None | Unset_Type = Unset
        self._prerequisite_update_name: str | None | Unset_Type = Unset
        self._mi_version: str | None | Unset_Type = Unset
        self._supported_objects_version: int
        self._update_format_version: int
        self._source_database_key: str | None | Unset_Type = Unset
        self._source_volume_guid: str
        self._name: str
        self._description: str | None | Unset_Type = Unset
        self._project_name: str | None | Unset_Type = Unset
        self._project_guid: str
        self._contains_fallback_identifiers: bool
        self._new_version_guid: str | None | Unset_Type = Unset

        self.create_date = create_date
        self.update_guid = update_guid
        if prerequisite_update_guid is not Unset:
            self.prerequisite_update_guid = prerequisite_update_guid
        if prerequisite_update_name is not Unset:
            self.prerequisite_update_name = prerequisite_update_name
        if mi_version is not Unset:
            self.mi_version = mi_version
        self.supported_objects_version = supported_objects_version
        self.update_format_version = update_format_version
        if source_database_key is not Unset:
            self.source_database_key = source_database_key
        self.source_volume_guid = source_volume_guid
        self.name = name
        if description is not Unset:
            self.description = description
        if project_name is not Unset:
            self.project_name = project_name
        self.project_guid = project_guid
        self.contains_fallback_identifiers = contains_fallback_identifiers
        if new_version_guid is not Unset:
            self.new_version_guid = new_version_guid

    @property
    def create_date(self) -> "datetime":
        """Gets the create_date of this GsaDataUpdateHeader.
        The date and time that the update was created.

        Returns
        -------
        datetime
            The create_date of this GsaDataUpdateHeader.
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date: "datetime") -> None:
        """Sets the create_date of this GsaDataUpdateHeader.
        The date and time that the update was created.

        Parameters
        ----------
        create_date: datetime
            The create_date of this GsaDataUpdateHeader.
        """
        # Field is not nullable
        if create_date is None:
            raise ValueError("Invalid value for 'create_date', must not be 'None'")
        # Field is required
        if create_date is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'create_date', must not be 'Unset'")
        self._create_date = create_date

    @property
    def update_guid(self) -> "str":
        """Gets the update_guid of this GsaDataUpdateHeader.
        A unique identity to disambiguate this update from all other updates.

        Returns
        -------
        str
            The update_guid of this GsaDataUpdateHeader.
        """
        return self._update_guid

    @update_guid.setter
    def update_guid(self, update_guid: "str") -> None:
        """Sets the update_guid of this GsaDataUpdateHeader.
        A unique identity to disambiguate this update from all other updates.

        Parameters
        ----------
        update_guid: str
            The update_guid of this GsaDataUpdateHeader.
        """
        # Field is not nullable
        if update_guid is None:
            raise ValueError("Invalid value for 'update_guid', must not be 'None'")
        # Field is required
        if update_guid is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'update_guid', must not be 'Unset'")
        self._update_guid = update_guid

    @property
    def prerequisite_update_guid(self) -> "str | None | Unset_Type":
        """Gets the prerequisite_update_guid of this GsaDataUpdateHeader.
        GUID for the previous update that need to have been applied before this update can be applied.

        Returns
        -------
        str | None | Unset_Type
            The prerequisite_update_guid of this GsaDataUpdateHeader.
        """
        return self._prerequisite_update_guid

    @prerequisite_update_guid.setter
    def prerequisite_update_guid(self, prerequisite_update_guid: "str | None | Unset_Type") -> None:
        """Sets the prerequisite_update_guid of this GsaDataUpdateHeader.
        GUID for the previous update that need to have been applied before this update can be applied.

        Parameters
        ----------
        prerequisite_update_guid: str | None | Unset_Type
            The prerequisite_update_guid of this GsaDataUpdateHeader.
        """
        self._prerequisite_update_guid = prerequisite_update_guid

    @property
    def prerequisite_update_name(self) -> "str | None | Unset_Type":
        """Gets the prerequisite_update_name of this GsaDataUpdateHeader.
        Name of the previous update that need to have been applied before this update can be applied.  This is used only for display purposes.

        Returns
        -------
        str | None | Unset_Type
            The prerequisite_update_name of this GsaDataUpdateHeader.
        """
        return self._prerequisite_update_name

    @prerequisite_update_name.setter
    def prerequisite_update_name(self, prerequisite_update_name: "str | None | Unset_Type") -> None:
        """Sets the prerequisite_update_name of this GsaDataUpdateHeader.
        Name of the previous update that need to have been applied before this update can be applied.  This is used only for display purposes.

        Parameters
        ----------
        prerequisite_update_name: str | None | Unset_Type
            The prerequisite_update_name of this GsaDataUpdateHeader.
        """
        self._prerequisite_update_name = prerequisite_update_name

    @property
    def mi_version(self) -> "str | None | Unset_Type":
        """Gets the mi_version of this GsaDataUpdateHeader.
        Gets the version of MI that was used to create this update.

        Returns
        -------
        str | None | Unset_Type
            The mi_version of this GsaDataUpdateHeader.
        """
        return self._mi_version

    @mi_version.setter
    def mi_version(self, mi_version: "str | None | Unset_Type") -> None:
        """Sets the mi_version of this GsaDataUpdateHeader.
        Gets the version of MI that was used to create this update.

        Parameters
        ----------
        mi_version: str | None | Unset_Type
            The mi_version of this GsaDataUpdateHeader.
        """
        self._mi_version = mi_version

    @property
    def supported_objects_version(self) -> "int":
        """Gets the supported_objects_version of this GsaDataUpdateHeader.
        Gets or sets the version number indicating the kinds of object that this update supports. A client will be  able to process updates with an unrecognised SupportedObjectsVersion (although in doing so it will have to  ignore fields describing objects it does not recognise).

        Returns
        -------
        int
            The supported_objects_version of this GsaDataUpdateHeader.
        """
        return self._supported_objects_version

    @supported_objects_version.setter
    def supported_objects_version(self, supported_objects_version: "int") -> None:
        """Sets the supported_objects_version of this GsaDataUpdateHeader.
        Gets or sets the version number indicating the kinds of object that this update supports. A client will be  able to process updates with an unrecognised SupportedObjectsVersion (although in doing so it will have to  ignore fields describing objects it does not recognise).

        Parameters
        ----------
        supported_objects_version: int
            The supported_objects_version of this GsaDataUpdateHeader.
        """
        # Field is not nullable
        if supported_objects_version is None:
            raise ValueError("Invalid value for 'supported_objects_version', must not be 'None'")
        # Field is required
        if supported_objects_version is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'supported_objects_version', must not be 'Unset'")
        self._supported_objects_version = supported_objects_version

    @property
    def update_format_version(self) -> "int":
        """Gets the update_format_version of this GsaDataUpdateHeader.
        Gets or sets the version number of the format of the update. This will change if the meaning of any of the  fields in the update changes. A client must not process an update with an UpdateFormatVersion field that it  does not recognise, as it cannot be sure of the meaning of the fields it reads.

        Returns
        -------
        int
            The update_format_version of this GsaDataUpdateHeader.
        """
        return self._update_format_version

    @update_format_version.setter
    def update_format_version(self, update_format_version: "int") -> None:
        """Sets the update_format_version of this GsaDataUpdateHeader.
        Gets or sets the version number of the format of the update. This will change if the meaning of any of the  fields in the update changes. A client must not process an update with an UpdateFormatVersion field that it  does not recognise, as it cannot be sure of the meaning of the fields it reads.

        Parameters
        ----------
        update_format_version: int
            The update_format_version of this GsaDataUpdateHeader.
        """
        # Field is not nullable
        if update_format_version is None:
            raise ValueError("Invalid value for 'update_format_version', must not be 'None'")
        # Field is required
        if update_format_version is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'update_format_version', must not be 'Unset'")
        self._update_format_version = update_format_version

    @property
    def source_database_key(self) -> "str | None | Unset_Type":
        """Gets the source_database_key of this GsaDataUpdateHeader.
        Gets or sets the database key of the database from which this update was generated.

        Returns
        -------
        str | None | Unset_Type
            The source_database_key of this GsaDataUpdateHeader.
        """
        return self._source_database_key

    @source_database_key.setter
    def source_database_key(self, source_database_key: "str | None | Unset_Type") -> None:
        """Sets the source_database_key of this GsaDataUpdateHeader.
        Gets or sets the database key of the database from which this update was generated.

        Parameters
        ----------
        source_database_key: str | None | Unset_Type
            The source_database_key of this GsaDataUpdateHeader.
        """
        self._source_database_key = source_database_key

    @property
    def source_volume_guid(self) -> "str":
        """Gets the source_volume_guid of this GsaDataUpdateHeader.
        Gets or sets the guid of the volume from which the update was generated.

        Returns
        -------
        str
            The source_volume_guid of this GsaDataUpdateHeader.
        """
        return self._source_volume_guid

    @source_volume_guid.setter
    def source_volume_guid(self, source_volume_guid: "str") -> None:
        """Sets the source_volume_guid of this GsaDataUpdateHeader.
        Gets or sets the guid of the volume from which the update was generated.

        Parameters
        ----------
        source_volume_guid: str
            The source_volume_guid of this GsaDataUpdateHeader.
        """
        # Field is not nullable
        if source_volume_guid is None:
            raise ValueError("Invalid value for 'source_volume_guid', must not be 'None'")
        # Field is required
        if source_volume_guid is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'source_volume_guid', must not be 'Unset'")
        self._source_volume_guid = source_volume_guid

    @property
    def name(self) -> "str":
        """Gets the name of this GsaDataUpdateHeader.
        Gets or sets the name of the update.

        Returns
        -------
        str
            The name of this GsaDataUpdateHeader.
        """
        return self._name

    @name.setter
    def name(self, name: "str") -> None:
        """Sets the name of this GsaDataUpdateHeader.
        Gets or sets the name of the update.

        Parameters
        ----------
        name: str
            The name of this GsaDataUpdateHeader.
        """
        # Field is not nullable
        if name is None:
            raise ValueError("Invalid value for 'name', must not be 'None'")
        # Field is required
        if name is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'name', must not be 'Unset'")
        self._name = name

    @property
    def description(self) -> "str | None | Unset_Type":
        """Gets the description of this GsaDataUpdateHeader.
        Gets or sets the description of the update.

        Returns
        -------
        str | None | Unset_Type
            The description of this GsaDataUpdateHeader.
        """
        return self._description

    @description.setter
    def description(self, description: "str | None | Unset_Type") -> None:
        """Sets the description of this GsaDataUpdateHeader.
        Gets or sets the description of the update.

        Parameters
        ----------
        description: str | None | Unset_Type
            The description of this GsaDataUpdateHeader.
        """
        self._description = description

    @property
    def project_name(self) -> "str | None | Unset_Type":
        """Gets the project_name of this GsaDataUpdateHeader.
        Gets or sets the name of the project this update was created for.

        Returns
        -------
        str | None | Unset_Type
            The project_name of this GsaDataUpdateHeader.
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name: "str | None | Unset_Type") -> None:
        """Sets the project_name of this GsaDataUpdateHeader.
        Gets or sets the name of the project this update was created for.

        Parameters
        ----------
        project_name: str | None | Unset_Type
            The project_name of this GsaDataUpdateHeader.
        """
        self._project_name = project_name

    @property
    def project_guid(self) -> "str":
        """Gets the project_guid of this GsaDataUpdateHeader.
        Gets or sets the guid of the project this update was created for.

        Returns
        -------
        str
            The project_guid of this GsaDataUpdateHeader.
        """
        return self._project_guid

    @project_guid.setter
    def project_guid(self, project_guid: "str") -> None:
        """Sets the project_guid of this GsaDataUpdateHeader.
        Gets or sets the guid of the project this update was created for.

        Parameters
        ----------
        project_guid: str
            The project_guid of this GsaDataUpdateHeader.
        """
        # Field is not nullable
        if project_guid is None:
            raise ValueError("Invalid value for 'project_guid', must not be 'None'")
        # Field is required
        if project_guid is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'project_guid', must not be 'Unset'")
        self._project_guid = project_guid

    @property
    def contains_fallback_identifiers(self) -> "bool":
        """Gets the contains_fallback_identifiers of this GsaDataUpdateHeader.
        Gets or sets the flag informing whether or not this update contains fallback identifiers (mostly names).

        Returns
        -------
        bool
            The contains_fallback_identifiers of this GsaDataUpdateHeader.
        """
        return self._contains_fallback_identifiers

    @contains_fallback_identifiers.setter
    def contains_fallback_identifiers(self, contains_fallback_identifiers: "bool") -> None:
        """Sets the contains_fallback_identifiers of this GsaDataUpdateHeader.
        Gets or sets the flag informing whether or not this update contains fallback identifiers (mostly names).

        Parameters
        ----------
        contains_fallback_identifiers: bool
            The contains_fallback_identifiers of this GsaDataUpdateHeader.
        """
        # Field is not nullable
        if contains_fallback_identifiers is None:
            raise ValueError(
                "Invalid value for 'contains_fallback_identifiers', must not be 'None'"
            )
        # Field is required
        if contains_fallback_identifiers is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError(
                "Invalid value for 'contains_fallback_identifiers', must not be 'Unset'"
            )
        self._contains_fallback_identifiers = contains_fallback_identifiers

    @property
    def new_version_guid(self) -> "str | None | Unset_Type":
        """Gets the new_version_guid of this GsaDataUpdateHeader.
        Gets or sets the value Database Version GUID should be updated to.  If this field is set then we propose to retarget tabular attributes to link to new version of the database.

        Returns
        -------
        str | None | Unset_Type
            The new_version_guid of this GsaDataUpdateHeader.
        """
        return self._new_version_guid

    @new_version_guid.setter
    def new_version_guid(self, new_version_guid: "str | None | Unset_Type") -> None:
        """Sets the new_version_guid of this GsaDataUpdateHeader.
        Gets or sets the value Database Version GUID should be updated to.  If this field is set then we propose to retarget tabular attributes to link to new version of the database.

        Parameters
        ----------
        new_version_guid: str | None | Unset_Type
            The new_version_guid of this GsaDataUpdateHeader.
        """
        self._new_version_guid = new_version_guid

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaDataUpdateHeader):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
