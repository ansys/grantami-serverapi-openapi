# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
MI Server API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional  # noqa: F401

from . import ModelBase, Unset, Unset_Type

if TYPE_CHECKING:
    from datetime import datetime
    import pathlib

    from . import *


class GsaFileDatumInfo(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "attribute_guid": "str",
        "file_name": "str",
        "extra_error_info": "str",
    }

    attribute_map: dict[str, str] = {
        "attribute_guid": "attributeGuid",
        "file_name": "fileName",
        "extra_error_info": "extraErrorInfo",
    }

    subtype_mapping: dict[str, str] = {}

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        attribute_guid: "str",
        file_name: "str",
        extra_error_info: "str | None | Unset_Type" = Unset,
    ) -> None:
        """GsaFileDatumInfo - a model defined in Swagger

        Parameters
        ----------
        attribute_guid: str
        file_name: str
        extra_error_info: str | None, optional
        """
        self._file_name: str
        self._attribute_guid: str
        self._extra_error_info: str | None | Unset_Type = Unset

        self.file_name = file_name
        self.attribute_guid = attribute_guid
        if extra_error_info is not Unset:
            self.extra_error_info = extra_error_info

    @property
    def file_name(self) -> "str":
        """Gets the file_name of this GsaFileDatumInfo.

        Returns
        -------
        str
            The file_name of this GsaFileDatumInfo.
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name: "str") -> None:
        """Sets the file_name of this GsaFileDatumInfo.

        Parameters
        ----------
        file_name: str
            The file_name of this GsaFileDatumInfo.
        """
        # Field is not nullable
        if file_name is None:
            raise ValueError("Invalid value for 'file_name', must not be 'None'")
        # Field is required
        if file_name is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'file_name', must not be 'Unset'")
        self._file_name = file_name

    @property
    def attribute_guid(self) -> "str":
        """Gets the attribute_guid of this GsaFileDatumInfo.

        Returns
        -------
        str
            The attribute_guid of this GsaFileDatumInfo.
        """
        return self._attribute_guid

    @attribute_guid.setter
    def attribute_guid(self, attribute_guid: "str") -> None:
        """Sets the attribute_guid of this GsaFileDatumInfo.

        Parameters
        ----------
        attribute_guid: str
            The attribute_guid of this GsaFileDatumInfo.
        """
        # Field is not nullable
        if attribute_guid is None:
            raise ValueError("Invalid value for 'attribute_guid', must not be 'None'")
        # Field is required
        if attribute_guid is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'attribute_guid', must not be 'Unset'")
        self._attribute_guid = attribute_guid

    @property
    def extra_error_info(self) -> "str | None | Unset_Type":
        """Gets the extra_error_info of this GsaFileDatumInfo.

        Returns
        -------
        str | None | Unset_Type
            The extra_error_info of this GsaFileDatumInfo.
        """
        return self._extra_error_info

    @extra_error_info.setter
    def extra_error_info(self, extra_error_info: "str | None | Unset_Type") -> None:
        """Sets the extra_error_info of this GsaFileDatumInfo.

        Parameters
        ----------
        extra_error_info: str | None | Unset_Type
            The extra_error_info of this GsaFileDatumInfo.
        """
        self._extra_error_info = extra_error_info

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaFileDatumInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
