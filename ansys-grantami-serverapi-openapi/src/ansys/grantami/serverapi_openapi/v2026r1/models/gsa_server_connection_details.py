# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
MI Server API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional  # noqa: F401

from . import ModelBase, Unset, Unset_Type

if TYPE_CHECKING:
    from datetime import datetime
    import pathlib

    from . import *


class GsaServerConnectionDetails(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "data_source": "str",
        "existing_database_key": "str",
        "sql_password": "str",
        "sql_username": "str",
        "use_configuration_database_credentials": "bool",
        "use_integrated_security": "bool",
    }

    attribute_map: dict[str, str] = {
        "data_source": "dataSource",
        "existing_database_key": "existingDatabaseKey",
        "sql_password": "sqlPassword",
        "sql_username": "sqlUsername",
        "use_configuration_database_credentials": "useConfigurationDatabaseCredentials",
        "use_integrated_security": "useIntegratedSecurity",
    }

    subtype_mapping: dict[str, str] = {}

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        data_source: "str | None | Unset_Type" = Unset,
        existing_database_key: "str | None | Unset_Type" = Unset,
        sql_password: "str | None | Unset_Type" = Unset,
        sql_username: "str | None | Unset_Type" = Unset,
        use_configuration_database_credentials: "bool | Unset_Type" = Unset,
        use_integrated_security: "bool | Unset_Type" = Unset,
    ) -> None:
        """GsaServerConnectionDetails - a model defined in Swagger

        Parameters
        ----------
        data_source: str | None, optional
        existing_database_key: str | None, optional
        sql_password: str | None, optional
        sql_username: str | None, optional
        use_configuration_database_credentials: bool, optional
        use_integrated_security: bool, optional
        """
        self._data_source: str | None | Unset_Type = Unset
        self._use_configuration_database_credentials: bool | Unset_Type = Unset
        self._use_integrated_security: bool | Unset_Type = Unset
        self._sql_username: str | None | Unset_Type = Unset
        self._sql_password: str | None | Unset_Type = Unset
        self._existing_database_key: str | None | Unset_Type = Unset

        if data_source is not Unset:
            self.data_source = data_source
        if use_configuration_database_credentials is not Unset:
            self.use_configuration_database_credentials = use_configuration_database_credentials
        if use_integrated_security is not Unset:
            self.use_integrated_security = use_integrated_security
        if sql_username is not Unset:
            self.sql_username = sql_username
        if sql_password is not Unset:
            self.sql_password = sql_password
        if existing_database_key is not Unset:
            self.existing_database_key = existing_database_key

    @property
    def data_source(self) -> "str | None | Unset_Type":
        """Gets the data_source of this GsaServerConnectionDetails.
        The SQL server data source. If not provided, defaults to the Configuration database data source.

        Returns
        -------
        str | None | Unset_Type
            The data_source of this GsaServerConnectionDetails.
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source: "str | None | Unset_Type") -> None:
        """Sets the data_source of this GsaServerConnectionDetails.
        The SQL server data source. If not provided, defaults to the Configuration database data source.

        Parameters
        ----------
        data_source: str | None | Unset_Type
            The data_source of this GsaServerConnectionDetails.
        """
        self._data_source = data_source

    @property
    def use_configuration_database_credentials(self) -> "bool | Unset_Type":
        """Gets the use_configuration_database_credentials of this GsaServerConnectionDetails.
        Set to true if the SQL connection should use the credentials from the Configuration database.

        Returns
        -------
        bool | Unset_Type
            The use_configuration_database_credentials of this GsaServerConnectionDetails.
        """
        return self._use_configuration_database_credentials

    @use_configuration_database_credentials.setter
    def use_configuration_database_credentials(
        self, use_configuration_database_credentials: "bool | Unset_Type"
    ) -> None:
        """Sets the use_configuration_database_credentials of this GsaServerConnectionDetails.
        Set to true if the SQL connection should use the credentials from the Configuration database.

        Parameters
        ----------
        use_configuration_database_credentials: bool | Unset_Type
            The use_configuration_database_credentials of this GsaServerConnectionDetails.
        """
        # Field is not nullable
        if use_configuration_database_credentials is None:
            raise ValueError(
                "Invalid value for 'use_configuration_database_credentials', must not be 'None'"
            )
        self._use_configuration_database_credentials = use_configuration_database_credentials

    @property
    def use_integrated_security(self) -> "bool | Unset_Type":
        """Gets the use_integrated_security of this GsaServerConnectionDetails.
        Set to true if the SQL connection to the database should use Windows authentication

        Returns
        -------
        bool | Unset_Type
            The use_integrated_security of this GsaServerConnectionDetails.
        """
        return self._use_integrated_security

    @use_integrated_security.setter
    def use_integrated_security(self, use_integrated_security: "bool | Unset_Type") -> None:
        """Sets the use_integrated_security of this GsaServerConnectionDetails.
        Set to true if the SQL connection to the database should use Windows authentication

        Parameters
        ----------
        use_integrated_security: bool | Unset_Type
            The use_integrated_security of this GsaServerConnectionDetails.
        """
        # Field is not nullable
        if use_integrated_security is None:
            raise ValueError("Invalid value for 'use_integrated_security', must not be 'None'")
        self._use_integrated_security = use_integrated_security

    @property
    def sql_username(self) -> "str | None | Unset_Type":
        """Gets the sql_username of this GsaServerConnectionDetails.
        The username to use if the database should use SQL authentication.

        Returns
        -------
        str | None | Unset_Type
            The sql_username of this GsaServerConnectionDetails.
        """
        return self._sql_username

    @sql_username.setter
    def sql_username(self, sql_username: "str | None | Unset_Type") -> None:
        """Sets the sql_username of this GsaServerConnectionDetails.
        The username to use if the database should use SQL authentication.

        Parameters
        ----------
        sql_username: str | None | Unset_Type
            The sql_username of this GsaServerConnectionDetails.
        """
        self._sql_username = sql_username

    @property
    def sql_password(self) -> "str | None | Unset_Type":
        """Gets the sql_password of this GsaServerConnectionDetails.
        The password to use if the database should use SQL authentication. The username must also be provided.  If using SQL authentication without providing a password,  we will attempt to get the password from the existing database connection string.

        Returns
        -------
        str | None | Unset_Type
            The sql_password of this GsaServerConnectionDetails.
        """
        return self._sql_password

    @sql_password.setter
    def sql_password(self, sql_password: "str | None | Unset_Type") -> None:
        """Sets the sql_password of this GsaServerConnectionDetails.
        The password to use if the database should use SQL authentication. The username must also be provided.  If using SQL authentication without providing a password,  we will attempt to get the password from the existing database connection string.

        Parameters
        ----------
        sql_password: str | None | Unset_Type
            The sql_password of this GsaServerConnectionDetails.
        """
        self._sql_password = sql_password

    @property
    def existing_database_key(self) -> "str | None | Unset_Type":
        """Gets the existing_database_key of this GsaServerConnectionDetails.
        Database key of an existing database. Should be provided if we are in the process of editing an existing database.

        Returns
        -------
        str | None | Unset_Type
            The existing_database_key of this GsaServerConnectionDetails.
        """
        return self._existing_database_key

    @existing_database_key.setter
    def existing_database_key(self, existing_database_key: "str | None | Unset_Type") -> None:
        """Sets the existing_database_key of this GsaServerConnectionDetails.
        Database key of an existing database. Should be provided if we are in the process of editing an existing database.

        Parameters
        ----------
        existing_database_key: str | None | Unset_Type
            The existing_database_key of this GsaServerConnectionDetails.
        """
        self._existing_database_key = existing_database_key

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaServerConnectionDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
