# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
MI Server API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional  # noqa: F401

from . import ModelBase, Unset, Unset_Type

if TYPE_CHECKING:
    from datetime import datetime
    import pathlib

    from . import *


class GsaApplyOptions(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "apply_adds_as_state": "bool",
        "match_mode": "GsaMatchMode",
        "retarget_tabular_attributes": "bool",
    }

    attribute_map: dict[str, str] = {
        "apply_adds_as_state": "applyAddsAsState",
        "match_mode": "matchMode",
        "retarget_tabular_attributes": "retargetTabularAttributes",
    }

    subtype_mapping: dict[str, str] = {
        "matchMode": "GsaMatchMode",
    }

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        apply_adds_as_state: "bool | Unset_Type" = Unset,
        match_mode: "GsaMatchMode | Unset_Type" = Unset,
        retarget_tabular_attributes: "bool | Unset_Type" = Unset,
    ) -> None:
        """GsaApplyOptions - a model defined in Swagger

        Parameters
        ----------
        apply_adds_as_state: bool, optional
        match_mode: GsaMatchMode, optional
        retarget_tabular_attributes: bool, optional
        """
        self._match_mode: GsaMatchMode | Unset_Type = Unset
        self._apply_adds_as_state: bool | Unset_Type = Unset
        self._retarget_tabular_attributes: bool | Unset_Type = Unset

        if match_mode is not Unset:
            self.match_mode = match_mode
        if apply_adds_as_state is not Unset:
            self.apply_adds_as_state = apply_adds_as_state
        if retarget_tabular_attributes is not Unset:
            self.retarget_tabular_attributes = retarget_tabular_attributes

    @property
    def match_mode(self) -> "GsaMatchMode | Unset_Type":
        """Gets the match_mode of this GsaApplyOptions.

        Returns
        -------
        GsaMatchMode | Unset_Type
            The match_mode of this GsaApplyOptions.
        """
        return self._match_mode

    @match_mode.setter
    def match_mode(self, match_mode: "GsaMatchMode | Unset_Type") -> None:
        """Sets the match_mode of this GsaApplyOptions.

        Parameters
        ----------
        match_mode: GsaMatchMode | Unset_Type
            The match_mode of this GsaApplyOptions.
        """
        # Field is not nullable
        if match_mode is None:
            raise ValueError("Invalid value for 'match_mode', must not be 'None'")
        self._match_mode = match_mode

    @property
    def apply_adds_as_state(self) -> "bool | Unset_Type":
        """Gets the apply_adds_as_state of this GsaApplyOptions.

        Returns
        -------
        bool | Unset_Type
            The apply_adds_as_state of this GsaApplyOptions.
        """
        return self._apply_adds_as_state

    @apply_adds_as_state.setter
    def apply_adds_as_state(self, apply_adds_as_state: "bool | Unset_Type") -> None:
        """Sets the apply_adds_as_state of this GsaApplyOptions.

        Parameters
        ----------
        apply_adds_as_state: bool | Unset_Type
            The apply_adds_as_state of this GsaApplyOptions.
        """
        # Field is not nullable
        if apply_adds_as_state is None:
            raise ValueError("Invalid value for 'apply_adds_as_state', must not be 'None'")
        self._apply_adds_as_state = apply_adds_as_state

    @property
    def retarget_tabular_attributes(self) -> "bool | Unset_Type":
        """Gets the retarget_tabular_attributes of this GsaApplyOptions.

        Returns
        -------
        bool | Unset_Type
            The retarget_tabular_attributes of this GsaApplyOptions.
        """
        return self._retarget_tabular_attributes

    @retarget_tabular_attributes.setter
    def retarget_tabular_attributes(self, retarget_tabular_attributes: "bool | Unset_Type") -> None:
        """Sets the retarget_tabular_attributes of this GsaApplyOptions.

        Parameters
        ----------
        retarget_tabular_attributes: bool | Unset_Type
            The retarget_tabular_attributes of this GsaApplyOptions.
        """
        # Field is not nullable
        if retarget_tabular_attributes is None:
            raise ValueError("Invalid value for 'retarget_tabular_attributes', must not be 'None'")
        self._retarget_tabular_attributes = retarget_tabular_attributes

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaApplyOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
