# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
MI Server API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional, Union  # noqa: F401

from . import ModelBase, Unset, Unset_Type

if TYPE_CHECKING:
    from datetime import datetime
    import pathlib

    from . import *


class GsaAddDatabase(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "connection_details": "GsaConnectionDetails",
        "database_key": "str",
        "is_read_only": "bool",
        "language": "str",
        "loading_order": "int",
        "version_guid": "str",
    }

    attribute_map: dict[str, str] = {
        "connection_details": "connectionDetails",
        "database_key": "databaseKey",
        "is_read_only": "isReadOnly",
        "language": "language",
        "loading_order": "loadingOrder",
        "version_guid": "versionGuid",
    }

    subtype_mapping: dict[str, str] = {
        "connectionDetails": "GsaConnectionDetails",
    }

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        connection_details: "GsaConnectionDetails",
        database_key: "str",
        is_read_only: "Union[bool, None, Unset_Type]" = Unset,
        language: "Union[str, None, Unset_Type]" = Unset,
        loading_order: "Union[int, None, Unset_Type]" = Unset,
        version_guid: "Union[str, None, Unset_Type]" = Unset,
    ) -> None:
        """GsaAddDatabase - a model defined in Swagger

        Parameters
        ----------
        connection_details: GsaConnectionDetails
        database_key: str
        is_read_only: bool, optional
        language: str, optional
        loading_order: int, optional
        version_guid: str, optional
        """
        self._database_key: str
        self._connection_details: GsaConnectionDetails
        self._is_read_only: Union[bool, None, Unset_Type] = Unset
        self._loading_order: Union[int, None, Unset_Type] = Unset
        self._language: Union[str, None, Unset_Type] = Unset
        self._version_guid: Union[str, None, Unset_Type] = Unset

        self.database_key = database_key
        self.connection_details = connection_details
        if is_read_only is not Unset:
            self.is_read_only = is_read_only
        if loading_order is not Unset:
            self.loading_order = loading_order
        if language is not Unset:
            self.language = language
        if version_guid is not Unset:
            self.version_guid = version_guid

    @property
    def database_key(self) -> "str":
        """Gets the database_key of this GsaAddDatabase.

        Returns
        -------
        str
            The database_key of this GsaAddDatabase.
        """
        return self._database_key

    @database_key.setter
    def database_key(self, database_key: "str") -> None:
        """Sets the database_key of this GsaAddDatabase.

        Parameters
        ----------
        database_key: str
            The database_key of this GsaAddDatabase.
        """
        # Field is not nullable
        if database_key is None:
            raise ValueError("Invalid value for 'database_key', must not be 'None'")
        # Field is required
        if database_key is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'database_key', must not be 'Unset'")
        self._database_key = database_key

    @property
    def connection_details(self) -> "GsaConnectionDetails":
        """Gets the connection_details of this GsaAddDatabase.

        Returns
        -------
        GsaConnectionDetails
            The connection_details of this GsaAddDatabase.
        """
        return self._connection_details

    @connection_details.setter
    def connection_details(self, connection_details: "GsaConnectionDetails") -> None:
        """Sets the connection_details of this GsaAddDatabase.

        Parameters
        ----------
        connection_details: GsaConnectionDetails
            The connection_details of this GsaAddDatabase.
        """
        # Field is not nullable
        if connection_details is None:
            raise ValueError("Invalid value for 'connection_details', must not be 'None'")
        # Field is required
        if connection_details is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'connection_details', must not be 'Unset'")
        self._connection_details = connection_details

    @property
    def is_read_only(self) -> "Union[bool, None, Unset_Type]":
        """Gets the is_read_only of this GsaAddDatabase.
        (Optional) True if the database should be set to read only after adding

        Returns
        -------
        Union[bool, None, Unset_Type]
            The is_read_only of this GsaAddDatabase.
        """
        return self._is_read_only

    @is_read_only.setter
    def is_read_only(self, is_read_only: "Union[bool, None, Unset_Type]") -> None:
        """Sets the is_read_only of this GsaAddDatabase.
        (Optional) True if the database should be set to read only after adding

        Parameters
        ----------
        is_read_only: Union[bool, None, Unset_Type]
            The is_read_only of this GsaAddDatabase.
        """
        self._is_read_only = is_read_only

    @property
    def loading_order(self) -> "Union[int, None, Unset_Type]":
        """Gets the loading_order of this GsaAddDatabase.
        (Optional) The MI loading order for the database

        Returns
        -------
        Union[int, None, Unset_Type]
            The loading_order of this GsaAddDatabase.
        """
        return self._loading_order

    @loading_order.setter
    def loading_order(self, loading_order: "Union[int, None, Unset_Type]") -> None:
        """Sets the loading_order of this GsaAddDatabase.
        (Optional) The MI loading order for the database

        Parameters
        ----------
        loading_order: Union[int, None, Unset_Type]
            The loading_order of this GsaAddDatabase.
        """
        self._loading_order = loading_order

    @property
    def language(self) -> "Union[str, None, Unset_Type]":
        """Gets the language of this GsaAddDatabase.
        (Optional) The language of the database, used when indexing the database. Currently \"english\" is the only supported value.

        Returns
        -------
        Union[str, None, Unset_Type]
            The language of this GsaAddDatabase.
        """
        return self._language

    @language.setter
    def language(self, language: "Union[str, None, Unset_Type]") -> None:
        """Sets the language of this GsaAddDatabase.
        (Optional) The language of the database, used when indexing the database. Currently \"english\" is the only supported value.

        Parameters
        ----------
        language: Union[str, None, Unset_Type]
            The language of this GsaAddDatabase.
        """
        self._language = language

    @property
    def version_guid(self) -> "Union[str, None, Unset_Type]":
        """Gets the version_guid of this GsaAddDatabase.
        (Optional) Overrides the database version guid stored in the database. This must be unique across all the loaded databases.

        Returns
        -------
        Union[str, None, Unset_Type]
            The version_guid of this GsaAddDatabase.
        """
        return self._version_guid

    @version_guid.setter
    def version_guid(self, version_guid: "Union[str, None, Unset_Type]") -> None:
        """Sets the version_guid of this GsaAddDatabase.
        (Optional) Overrides the database version guid stored in the database. This must be unique across all the loaded databases.

        Parameters
        ----------
        version_guid: Union[str, None, Unset_Type]
            The version_guid of this GsaAddDatabase.
        """
        self._version_guid = version_guid

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaAddDatabase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
