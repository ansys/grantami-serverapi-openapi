# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
MI Server API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional  # noqa: F401

from . import ModelBase, Unset, Unset_Type

if TYPE_CHECKING:
    from datetime import datetime
    import pathlib

    from . import *


class GsaDataUpdateRunInfo(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "allow_overwrite": "bool",
        "applied_date": "datetime",
        "change_tabular": "bool",
        "match_mode": "str",
        "progress": "float",
        "status": "str",
    }

    attribute_map: dict[str, str] = {
        "allow_overwrite": "allowOverwrite",
        "applied_date": "appliedDate",
        "change_tabular": "changeTabular",
        "match_mode": "matchMode",
        "progress": "progress",
        "status": "status",
    }

    subtype_mapping: dict[str, str] = {}

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        allow_overwrite: "bool | None | Unset_Type" = Unset,
        applied_date: "datetime | None | Unset_Type" = Unset,
        change_tabular: "bool | None | Unset_Type" = Unset,
        match_mode: "str | None | Unset_Type" = Unset,
        progress: "float | None | Unset_Type" = Unset,
        status: "str | None | Unset_Type" = Unset,
    ) -> None:
        """GsaDataUpdateRunInfo - a model defined in Swagger

        Parameters
        ----------
        allow_overwrite: bool | None, optional
        applied_date: datetime | None, optional
        change_tabular: bool | None, optional
        match_mode: str | None, optional
        progress: float | None, optional
        status: str | None, optional
        """
        self._match_mode: str | None | Unset_Type = Unset
        self._allow_overwrite: bool | None | Unset_Type = Unset
        self._change_tabular: bool | None | Unset_Type = Unset
        self._status: str | None | Unset_Type = Unset
        self._progress: float | None | Unset_Type = Unset
        self._applied_date: datetime | None | Unset_Type = Unset

        if match_mode is not Unset:
            self.match_mode = match_mode
        if allow_overwrite is not Unset:
            self.allow_overwrite = allow_overwrite
        if change_tabular is not Unset:
            self.change_tabular = change_tabular
        if status is not Unset:
            self.status = status
        if progress is not Unset:
            self.progress = progress
        if applied_date is not Unset:
            self.applied_date = applied_date

    @property
    def match_mode(self) -> "str | None | Unset_Type":
        """Gets the match_mode of this GsaDataUpdateRunInfo.

        Returns
        -------
        str | None | Unset_Type
            The match_mode of this GsaDataUpdateRunInfo.
        """
        return self._match_mode

    @match_mode.setter
    def match_mode(self, match_mode: "str | None | Unset_Type") -> None:
        """Sets the match_mode of this GsaDataUpdateRunInfo.

        Parameters
        ----------
        match_mode: str | None | Unset_Type
            The match_mode of this GsaDataUpdateRunInfo.
        """
        self._match_mode = match_mode

    @property
    def allow_overwrite(self) -> "bool | None | Unset_Type":
        """Gets the allow_overwrite of this GsaDataUpdateRunInfo.

        Returns
        -------
        bool | None | Unset_Type
            The allow_overwrite of this GsaDataUpdateRunInfo.
        """
        return self._allow_overwrite

    @allow_overwrite.setter
    def allow_overwrite(self, allow_overwrite: "bool | None | Unset_Type") -> None:
        """Sets the allow_overwrite of this GsaDataUpdateRunInfo.

        Parameters
        ----------
        allow_overwrite: bool | None | Unset_Type
            The allow_overwrite of this GsaDataUpdateRunInfo.
        """
        self._allow_overwrite = allow_overwrite

    @property
    def change_tabular(self) -> "bool | None | Unset_Type":
        """Gets the change_tabular of this GsaDataUpdateRunInfo.

        Returns
        -------
        bool | None | Unset_Type
            The change_tabular of this GsaDataUpdateRunInfo.
        """
        return self._change_tabular

    @change_tabular.setter
    def change_tabular(self, change_tabular: "bool | None | Unset_Type") -> None:
        """Sets the change_tabular of this GsaDataUpdateRunInfo.

        Parameters
        ----------
        change_tabular: bool | None | Unset_Type
            The change_tabular of this GsaDataUpdateRunInfo.
        """
        self._change_tabular = change_tabular

    @property
    def status(self) -> "str | None | Unset_Type":
        """Gets the status of this GsaDataUpdateRunInfo.

        Returns
        -------
        str | None | Unset_Type
            The status of this GsaDataUpdateRunInfo.
        """
        return self._status

    @status.setter
    def status(self, status: "str | None | Unset_Type") -> None:
        """Sets the status of this GsaDataUpdateRunInfo.

        Parameters
        ----------
        status: str | None | Unset_Type
            The status of this GsaDataUpdateRunInfo.
        """
        self._status = status

    @property
    def progress(self) -> "float | None | Unset_Type":
        """Gets the progress of this GsaDataUpdateRunInfo.

        Returns
        -------
        float | None | Unset_Type
            The progress of this GsaDataUpdateRunInfo.
        """
        return self._progress

    @progress.setter
    def progress(self, progress: "float | None | Unset_Type") -> None:
        """Sets the progress of this GsaDataUpdateRunInfo.

        Parameters
        ----------
        progress: float | None | Unset_Type
            The progress of this GsaDataUpdateRunInfo.
        """
        self._progress = progress

    @property
    def applied_date(self) -> "datetime | None | Unset_Type":
        """Gets the applied_date of this GsaDataUpdateRunInfo.

        Returns
        -------
        datetime | None | Unset_Type
            The applied_date of this GsaDataUpdateRunInfo.
        """
        return self._applied_date

    @applied_date.setter
    def applied_date(self, applied_date: "datetime | None | Unset_Type") -> None:
        """Sets the applied_date of this GsaDataUpdateRunInfo.

        Parameters
        ----------
        applied_date: datetime | None | Unset_Type
            The applied_date of this GsaDataUpdateRunInfo.
        """
        self._applied_date = applied_date

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaDataUpdateRunInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
