# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
MI Server API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional, Union  # noqa: F401

from . import ModelBase, Unset, Unset_Type

if TYPE_CHECKING:
    from datetime import datetime
    import pathlib

    from . import *


class GsaQueryTable(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "default_layout": "GsaQuerySlimNamedEntity",
        "default_subset": "GsaQuerySlimNamedEntity",
        "display_names": "dict(str, str)",
        "guid": "str",
        "is_hidden_from_browse": "bool",
        "is_hidden_from_search": "bool",
        "is_versioned": "bool",
        "layouts": "list[GsaQuerySlimNamedEntity]",
        "name": "str",
        "subsets": "list[GsaQuerySlimNamedEntity]",
        "table_types": "list[str]",
        "version_state": "GsaVersionState",
    }

    attribute_map: dict[str, str] = {
        "default_layout": "defaultLayout",
        "default_subset": "defaultSubset",
        "display_names": "displayNames",
        "guid": "guid",
        "is_hidden_from_browse": "isHiddenFromBrowse",
        "is_hidden_from_search": "isHiddenFromSearch",
        "is_versioned": "isVersioned",
        "layouts": "layouts",
        "name": "name",
        "subsets": "subsets",
        "table_types": "tableTypes",
        "version_state": "versionState",
    }

    subtype_mapping: dict[str, str] = {
        "versionState": "GsaVersionState",
        "layouts": "GsaQuerySlimNamedEntity",
        "defaultLayout": "GsaQuerySlimNamedEntity",
        "subsets": "GsaQuerySlimNamedEntity",
        "defaultSubset": "GsaQuerySlimNamedEntity",
    }

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        default_layout: "Union[GsaQuerySlimNamedEntity, Unset_Type]" = Unset,
        default_subset: "Union[GsaQuerySlimNamedEntity, Unset_Type]" = Unset,
        display_names: "Union[dict[str, str], None, Unset_Type]" = Unset,
        guid: "Union[str, None, Unset_Type]" = Unset,
        is_hidden_from_browse: "Union[bool, None, Unset_Type]" = Unset,
        is_hidden_from_search: "Union[bool, None, Unset_Type]" = Unset,
        is_versioned: "Union[bool, None, Unset_Type]" = Unset,
        layouts: "Union[list[GsaQuerySlimNamedEntity], None, Unset_Type]" = Unset,
        name: "Union[str, None, Unset_Type]" = Unset,
        subsets: "Union[list[GsaQuerySlimNamedEntity], None, Unset_Type]" = Unset,
        table_types: "Union[list[str], None, Unset_Type]" = Unset,
        version_state: "Union[GsaVersionState, Unset_Type]" = Unset,
    ) -> None:
        """GsaQueryTable - a model defined in Swagger

        Parameters
        ----------
        default_layout: GsaQuerySlimNamedEntity, optional
        default_subset: GsaQuerySlimNamedEntity, optional
        display_names: dict[str, str], optional
        guid: str, optional
        is_hidden_from_browse: bool, optional
        is_hidden_from_search: bool, optional
        is_versioned: bool, optional
        layouts: list[GsaQuerySlimNamedEntity], optional
        name: str, optional
        subsets: list[GsaQuerySlimNamedEntity], optional
        table_types: list[str], optional
        version_state: GsaVersionState, optional
        """
        self._is_hidden_from_browse: Union[bool, None, Unset_Type] = Unset
        self._is_hidden_from_search: Union[bool, None, Unset_Type] = Unset
        self._is_versioned: Union[bool, None, Unset_Type] = Unset
        self._version_state: Union[GsaVersionState, Unset_Type] = Unset
        self._table_types: Union[list[str], None, Unset_Type] = Unset
        self._layouts: Union[list[GsaQuerySlimNamedEntity], None, Unset_Type] = Unset
        self._default_layout: Union[GsaQuerySlimNamedEntity, Unset_Type] = Unset
        self._subsets: Union[list[GsaQuerySlimNamedEntity], None, Unset_Type] = Unset
        self._default_subset: Union[GsaQuerySlimNamedEntity, Unset_Type] = Unset
        self._display_names: Union[dict[str, str], None, Unset_Type] = Unset
        self._name: Union[str, None, Unset_Type] = Unset
        self._guid: Union[str, None, Unset_Type] = Unset

        if is_hidden_from_browse is not Unset:
            self.is_hidden_from_browse = is_hidden_from_browse
        if is_hidden_from_search is not Unset:
            self.is_hidden_from_search = is_hidden_from_search
        if is_versioned is not Unset:
            self.is_versioned = is_versioned
        if version_state is not Unset:
            self.version_state = version_state
        if table_types is not Unset:
            self.table_types = table_types
        if layouts is not Unset:
            self.layouts = layouts
        if default_layout is not Unset:
            self.default_layout = default_layout
        if subsets is not Unset:
            self.subsets = subsets
        if default_subset is not Unset:
            self.default_subset = default_subset
        if display_names is not Unset:
            self.display_names = display_names
        if name is not Unset:
            self.name = name
        if guid is not Unset:
            self.guid = guid

    @property
    def is_hidden_from_browse(self) -> "Union[bool, None, Unset_Type]":
        """Gets the is_hidden_from_browse of this GsaQueryTable.

        Returns
        -------
        Union[bool, None, Unset_Type]
            The is_hidden_from_browse of this GsaQueryTable.
        """
        return self._is_hidden_from_browse

    @is_hidden_from_browse.setter
    def is_hidden_from_browse(self, is_hidden_from_browse: "Union[bool, None, Unset_Type]") -> None:
        """Sets the is_hidden_from_browse of this GsaQueryTable.

        Parameters
        ----------
        is_hidden_from_browse: Union[bool, None, Unset_Type]
            The is_hidden_from_browse of this GsaQueryTable.
        """
        self._is_hidden_from_browse = is_hidden_from_browse

    @property
    def is_hidden_from_search(self) -> "Union[bool, None, Unset_Type]":
        """Gets the is_hidden_from_search of this GsaQueryTable.

        Returns
        -------
        Union[bool, None, Unset_Type]
            The is_hidden_from_search of this GsaQueryTable.
        """
        return self._is_hidden_from_search

    @is_hidden_from_search.setter
    def is_hidden_from_search(self, is_hidden_from_search: "Union[bool, None, Unset_Type]") -> None:
        """Sets the is_hidden_from_search of this GsaQueryTable.

        Parameters
        ----------
        is_hidden_from_search: Union[bool, None, Unset_Type]
            The is_hidden_from_search of this GsaQueryTable.
        """
        self._is_hidden_from_search = is_hidden_from_search

    @property
    def is_versioned(self) -> "Union[bool, None, Unset_Type]":
        """Gets the is_versioned of this GsaQueryTable.

        Returns
        -------
        Union[bool, None, Unset_Type]
            The is_versioned of this GsaQueryTable.
        """
        return self._is_versioned

    @is_versioned.setter
    def is_versioned(self, is_versioned: "Union[bool, None, Unset_Type]") -> None:
        """Sets the is_versioned of this GsaQueryTable.

        Parameters
        ----------
        is_versioned: Union[bool, None, Unset_Type]
            The is_versioned of this GsaQueryTable.
        """
        self._is_versioned = is_versioned

    @property
    def version_state(self) -> "Union[GsaVersionState, Unset_Type]":
        """Gets the version_state of this GsaQueryTable.

        Returns
        -------
        Union[GsaVersionState, Unset_Type]
            The version_state of this GsaQueryTable.
        """
        return self._version_state

    @version_state.setter
    def version_state(self, version_state: "Union[GsaVersionState, Unset_Type]") -> None:
        """Sets the version_state of this GsaQueryTable.

        Parameters
        ----------
        version_state: Union[GsaVersionState, Unset_Type]
            The version_state of this GsaQueryTable.
        """
        # Field is not nullable
        if version_state is None:
            raise ValueError("Invalid value for 'version_state', must not be 'None'")
        self._version_state = version_state

    @property
    def table_types(self) -> "Union[list[str], None, Unset_Type]":
        """Gets the table_types of this GsaQueryTable.

        Returns
        -------
        Union[list[str], None, Unset_Type]
            The table_types of this GsaQueryTable.
        """
        return self._table_types

    @table_types.setter
    def table_types(self, table_types: "Union[list[str], None, Unset_Type]") -> None:
        """Sets the table_types of this GsaQueryTable.

        Parameters
        ----------
        table_types: Union[list[str], None, Unset_Type]
            The table_types of this GsaQueryTable.
        """
        self._table_types = table_types

    @property
    def layouts(self) -> "Union[list[GsaQuerySlimNamedEntity], None, Unset_Type]":
        """Gets the layouts of this GsaQueryTable.

        Returns
        -------
        Union[list[GsaQuerySlimNamedEntity], None, Unset_Type]
            The layouts of this GsaQueryTable.
        """
        return self._layouts

    @layouts.setter
    def layouts(self, layouts: "Union[list[GsaQuerySlimNamedEntity], None, Unset_Type]") -> None:
        """Sets the layouts of this GsaQueryTable.

        Parameters
        ----------
        layouts: Union[list[GsaQuerySlimNamedEntity], None, Unset_Type]
            The layouts of this GsaQueryTable.
        """
        self._layouts = layouts

    @property
    def default_layout(self) -> "Union[GsaQuerySlimNamedEntity, Unset_Type]":
        """Gets the default_layout of this GsaQueryTable.

        Returns
        -------
        Union[GsaQuerySlimNamedEntity, Unset_Type]
            The default_layout of this GsaQueryTable.
        """
        return self._default_layout

    @default_layout.setter
    def default_layout(self, default_layout: "Union[GsaQuerySlimNamedEntity, Unset_Type]") -> None:
        """Sets the default_layout of this GsaQueryTable.

        Parameters
        ----------
        default_layout: Union[GsaQuerySlimNamedEntity, Unset_Type]
            The default_layout of this GsaQueryTable.
        """
        # Field is not nullable
        if default_layout is None:
            raise ValueError("Invalid value for 'default_layout', must not be 'None'")
        self._default_layout = default_layout

    @property
    def subsets(self) -> "Union[list[GsaQuerySlimNamedEntity], None, Unset_Type]":
        """Gets the subsets of this GsaQueryTable.

        Returns
        -------
        Union[list[GsaQuerySlimNamedEntity], None, Unset_Type]
            The subsets of this GsaQueryTable.
        """
        return self._subsets

    @subsets.setter
    def subsets(self, subsets: "Union[list[GsaQuerySlimNamedEntity], None, Unset_Type]") -> None:
        """Sets the subsets of this GsaQueryTable.

        Parameters
        ----------
        subsets: Union[list[GsaQuerySlimNamedEntity], None, Unset_Type]
            The subsets of this GsaQueryTable.
        """
        self._subsets = subsets

    @property
    def default_subset(self) -> "Union[GsaQuerySlimNamedEntity, Unset_Type]":
        """Gets the default_subset of this GsaQueryTable.

        Returns
        -------
        Union[GsaQuerySlimNamedEntity, Unset_Type]
            The default_subset of this GsaQueryTable.
        """
        return self._default_subset

    @default_subset.setter
    def default_subset(self, default_subset: "Union[GsaQuerySlimNamedEntity, Unset_Type]") -> None:
        """Sets the default_subset of this GsaQueryTable.

        Parameters
        ----------
        default_subset: Union[GsaQuerySlimNamedEntity, Unset_Type]
            The default_subset of this GsaQueryTable.
        """
        # Field is not nullable
        if default_subset is None:
            raise ValueError("Invalid value for 'default_subset', must not be 'None'")
        self._default_subset = default_subset

    @property
    def display_names(self) -> "Union[dict[str, str], None, Unset_Type]":
        """Gets the display_names of this GsaQueryTable.

        Returns
        -------
        Union[dict[str, str], None, Unset_Type]
            The display_names of this GsaQueryTable.
        """
        return self._display_names

    @display_names.setter
    def display_names(self, display_names: "Union[dict[str, str], None, Unset_Type]") -> None:
        """Sets the display_names of this GsaQueryTable.

        Parameters
        ----------
        display_names: Union[dict[str, str], None, Unset_Type]
            The display_names of this GsaQueryTable.
        """
        self._display_names = display_names

    @property
    def name(self) -> "Union[str, None, Unset_Type]":
        """Gets the name of this GsaQueryTable.

        Returns
        -------
        Union[str, None, Unset_Type]
            The name of this GsaQueryTable.
        """
        return self._name

    @name.setter
    def name(self, name: "Union[str, None, Unset_Type]") -> None:
        """Sets the name of this GsaQueryTable.

        Parameters
        ----------
        name: Union[str, None, Unset_Type]
            The name of this GsaQueryTable.
        """
        self._name = name

    @property
    def guid(self) -> "Union[str, None, Unset_Type]":
        """Gets the guid of this GsaQueryTable.

        Returns
        -------
        Union[str, None, Unset_Type]
            The guid of this GsaQueryTable.
        """
        return self._guid

    @guid.setter
    def guid(self, guid: "Union[str, None, Unset_Type]") -> None:
        """Sets the guid of this GsaQueryTable.

        Parameters
        ----------
        guid: Union[str, None, Unset_Type]
            The guid of this GsaQueryTable.
        """
        self._guid = guid

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaQueryTable):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
