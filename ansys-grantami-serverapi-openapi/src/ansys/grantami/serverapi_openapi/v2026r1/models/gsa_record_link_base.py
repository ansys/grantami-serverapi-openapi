# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
MI Server API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional  # noqa: F401

from . import ModelBase, Unset, Unset_Type

if TYPE_CHECKING:
    from datetime import datetime
    import pathlib

    from . import *


class GsaRecordLinkBase(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator_class_map: dict[str, str]
        They key is discriminator value and the value is associated subtype.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "guid": "str",
        "record_link_group_type": "GsaRecordLinkGroupType",
        "source_record_history_guid": "str",
        "target_record_history_guid": "str",
        "notes": "str",
    }

    attribute_map: dict[str, str] = {
        "guid": "guid",
        "record_link_group_type": "recordLinkGroupType",
        "source_record_history_guid": "sourceRecordHistoryGuid",
        "target_record_history_guid": "targetRecordHistoryGuid",
        "notes": "notes",
    }

    subtype_mapping: dict[str, str] = {
        "recordLinkGroupType": "GsaRecordLinkGroupType",
    }

    discriminator_value_class_map = {
        "static".lower(): "#/components/schemas/GsaStaticRecordLink",
        "crossDatabase".lower(): "#/components/schemas/GsaCrossDatabaseRecordLink",
    }

    discriminator: Optional[str] = "recordLinkGroupType"

    def __init__(
        self,
        *,
        guid: "str",
        record_link_group_type: "GsaRecordLinkGroupType",
        source_record_history_guid: "str",
        target_record_history_guid: "str",
        notes: "str | None | Unset_Type" = Unset,
    ) -> None:
        """GsaRecordLinkBase - a model defined in Swagger

        Parameters
        ----------
        guid: str
        record_link_group_type: GsaRecordLinkGroupType
        source_record_history_guid: str
        target_record_history_guid: str
        notes: str | None, optional
        """
        self._record_link_group_type: GsaRecordLinkGroupType
        self._source_record_history_guid: str
        self._target_record_history_guid: str
        self._notes: str | None | Unset_Type = Unset
        self._guid: str

        self.record_link_group_type = record_link_group_type
        self.source_record_history_guid = source_record_history_guid
        self.target_record_history_guid = target_record_history_guid
        if notes is not Unset:
            self.notes = notes
        self.guid = guid

    @property
    def record_link_group_type(self) -> "GsaRecordLinkGroupType":
        """Gets the record_link_group_type of this GsaRecordLinkBase.

        Returns
        -------
        GsaRecordLinkGroupType
            The record_link_group_type of this GsaRecordLinkBase.
        """
        return self._record_link_group_type

    @record_link_group_type.setter
    def record_link_group_type(self, record_link_group_type: "GsaRecordLinkGroupType") -> None:
        """Sets the record_link_group_type of this GsaRecordLinkBase.

        Parameters
        ----------
        record_link_group_type: GsaRecordLinkGroupType
            The record_link_group_type of this GsaRecordLinkBase.
        """
        # Field is not nullable
        if record_link_group_type is None:
            raise ValueError("Invalid value for 'record_link_group_type', must not be 'None'")
        # Field is required
        if record_link_group_type is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'record_link_group_type', must not be 'Unset'")
        self._record_link_group_type = record_link_group_type

    @property
    def source_record_history_guid(self) -> "str":
        """Gets the source_record_history_guid of this GsaRecordLinkBase.

        Returns
        -------
        str
            The source_record_history_guid of this GsaRecordLinkBase.
        """
        return self._source_record_history_guid

    @source_record_history_guid.setter
    def source_record_history_guid(self, source_record_history_guid: "str") -> None:
        """Sets the source_record_history_guid of this GsaRecordLinkBase.

        Parameters
        ----------
        source_record_history_guid: str
            The source_record_history_guid of this GsaRecordLinkBase.
        """
        # Field is not nullable
        if source_record_history_guid is None:
            raise ValueError("Invalid value for 'source_record_history_guid', must not be 'None'")
        # Field is required
        if source_record_history_guid is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'source_record_history_guid', must not be 'Unset'")
        self._source_record_history_guid = source_record_history_guid

    @property
    def target_record_history_guid(self) -> "str":
        """Gets the target_record_history_guid of this GsaRecordLinkBase.

        Returns
        -------
        str
            The target_record_history_guid of this GsaRecordLinkBase.
        """
        return self._target_record_history_guid

    @target_record_history_guid.setter
    def target_record_history_guid(self, target_record_history_guid: "str") -> None:
        """Sets the target_record_history_guid of this GsaRecordLinkBase.

        Parameters
        ----------
        target_record_history_guid: str
            The target_record_history_guid of this GsaRecordLinkBase.
        """
        # Field is not nullable
        if target_record_history_guid is None:
            raise ValueError("Invalid value for 'target_record_history_guid', must not be 'None'")
        # Field is required
        if target_record_history_guid is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'target_record_history_guid', must not be 'Unset'")
        self._target_record_history_guid = target_record_history_guid

    @property
    def notes(self) -> "str | None | Unset_Type":
        """Gets the notes of this GsaRecordLinkBase.

        Returns
        -------
        str | None | Unset_Type
            The notes of this GsaRecordLinkBase.
        """
        return self._notes

    @notes.setter
    def notes(self, notes: "str | None | Unset_Type") -> None:
        """Sets the notes of this GsaRecordLinkBase.

        Parameters
        ----------
        notes: str | None | Unset_Type
            The notes of this GsaRecordLinkBase.
        """
        self._notes = notes

    @property
    def guid(self) -> "str":
        """Gets the guid of this GsaRecordLinkBase.

        Returns
        -------
        str
            The guid of this GsaRecordLinkBase.
        """
        return self._guid

    @guid.setter
    def guid(self, guid: "str") -> None:
        """Sets the guid of this GsaRecordLinkBase.

        Parameters
        ----------
        guid: str
            The guid of this GsaRecordLinkBase.
        """
        # Field is not nullable
        if guid is None:
            raise ValueError("Invalid value for 'guid', must not be 'None'")
        # Field is required
        if guid is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'guid', must not be 'Unset'")
        self._guid = guid

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Returns the real base class as determined by the discriminator

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class
        """
        discriminator_value = str(data[cls._get_discriminator_field_name()]).lower()
        # The actual class name is not available in swagger-codegen,
        # so we have to extract it from the JSON reference
        return cls.discriminator_value_class_map[discriminator_value].rsplit("/", 1)[-1]

    @classmethod
    def _get_discriminator_field_name(cls) -> str:
        assert cls.discriminator
        name_tokens = cls.discriminator.split("_")
        later_tokens = [element.capitalize() for element in name_tokens[1:]]
        return "".join([name_tokens[0], *later_tokens])

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaRecordLinkBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
