# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
MI Server API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional  # noqa: F401

from . import ModelBase, Unset, Unset_Type

if TYPE_CHECKING:
    from datetime import datetime
    import pathlib

    from . import *


class GsaBlobInfoDto(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "full_path": "str",
        "last_write_time_utc": "datetime",
        "length": "int",
        "name": "str",
    }

    attribute_map: dict[str, str] = {
        "full_path": "fullPath",
        "last_write_time_utc": "lastWriteTimeUtc",
        "length": "length",
        "name": "name",
    }

    subtype_mapping: dict[str, str] = {}

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        full_path: "str",
        last_write_time_utc: "datetime",
        length: "int",
        name: "str",
    ) -> None:
        """GsaBlobInfoDto - a model defined in Swagger

        Parameters
        ----------
        full_path: str
        last_write_time_utc: datetime
        length: int
        name: str
        """
        self._name: str
        self._full_path: str
        self._length: int
        self._last_write_time_utc: datetime

        self.name = name
        self.full_path = full_path
        self.length = length
        self.last_write_time_utc = last_write_time_utc

    @property
    def name(self) -> "str":
        """Gets the name of this GsaBlobInfoDto.
        Name of the blob.

        Returns
        -------
        str
            The name of this GsaBlobInfoDto.
        """
        return self._name

    @name.setter
    def name(self, name: "str") -> None:
        """Sets the name of this GsaBlobInfoDto.
        Name of the blob.

        Parameters
        ----------
        name: str
            The name of this GsaBlobInfoDto.
        """
        # Field is not nullable
        if name is None:
            raise ValueError("Invalid value for 'name', must not be 'None'")
        # Field is required
        if name is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'name', must not be 'Unset'")
        self._name = name

    @property
    def full_path(self) -> "str":
        """Gets the full_path of this GsaBlobInfoDto.
        Full path of the blob.  Path segments are separated by '/'  The last segment is always blob name.

        Returns
        -------
        str
            The full_path of this GsaBlobInfoDto.
        """
        return self._full_path

    @full_path.setter
    def full_path(self, full_path: "str") -> None:
        """Sets the full_path of this GsaBlobInfoDto.
        Full path of the blob.  Path segments are separated by '/'  The last segment is always blob name.

        Parameters
        ----------
        full_path: str
            The full_path of this GsaBlobInfoDto.
        """
        # Field is not nullable
        if full_path is None:
            raise ValueError("Invalid value for 'full_path', must not be 'None'")
        # Field is required
        if full_path is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'full_path', must not be 'Unset'")
        self._full_path = full_path

    @property
    def length(self) -> "int":
        """Gets the length of this GsaBlobInfoDto.
        Blob size in bytes.

        Returns
        -------
        int
            The length of this GsaBlobInfoDto.
        """
        return self._length

    @length.setter
    def length(self, length: "int") -> None:
        """Sets the length of this GsaBlobInfoDto.
        Blob size in bytes.

        Parameters
        ----------
        length: int
            The length of this GsaBlobInfoDto.
        """
        # Field is not nullable
        if length is None:
            raise ValueError("Invalid value for 'length', must not be 'None'")
        # Field is required
        if length is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'length', must not be 'Unset'")
        self._length = length

    @property
    def last_write_time_utc(self) -> "datetime":
        """Gets the last_write_time_utc of this GsaBlobInfoDto.
        Last modification date.

        Returns
        -------
        datetime
            The last_write_time_utc of this GsaBlobInfoDto.
        """
        return self._last_write_time_utc

    @last_write_time_utc.setter
    def last_write_time_utc(self, last_write_time_utc: "datetime") -> None:
        """Sets the last_write_time_utc of this GsaBlobInfoDto.
        Last modification date.

        Parameters
        ----------
        last_write_time_utc: datetime
            The last_write_time_utc of this GsaBlobInfoDto.
        """
        # Field is not nullable
        if last_write_time_utc is None:
            raise ValueError("Invalid value for 'last_write_time_utc', must not be 'None'")
        # Field is required
        if last_write_time_utc is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'last_write_time_utc', must not be 'Unset'")
        self._last_write_time_utc = last_write_time_utc

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaBlobInfoDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
