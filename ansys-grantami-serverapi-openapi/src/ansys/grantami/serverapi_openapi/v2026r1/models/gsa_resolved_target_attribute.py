# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
MI Server API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional  # noqa: F401

from ansys.grantami.serverapi_openapi.v2026r1.models.gsa_target_attribute import (  # noqa: F401
    GsaTargetAttribute,
)
from ansys.grantami.serverapi_openapi.v2026r1.models.gsa_target_attribute_type import (
    GsaTargetAttributeType,
)

from . import ModelBase, Unset, Unset_Type

if TYPE_CHECKING:
    from datetime import datetime
    import pathlib

    from . import *


class GsaResolvedTargetAttribute(GsaTargetAttribute):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "attribute_type": "GsaAttributeType",
        "display_names": "dict(str, str)",
        "guid": "str",
        "name": "str",
        "target_type": "GsaTargetAttributeType",
        "about_attribute": "GsaSlimTypedAttribute",
    }

    attribute_map: dict[str, str] = {
        "attribute_type": "attributeType",
        "display_names": "displayNames",
        "guid": "guid",
        "name": "name",
        "target_type": "targetType",
        "about_attribute": "aboutAttribute",
    }

    subtype_mapping: dict[str, str] = {
        "attributeType": "GsaAttributeType",
        "aboutAttribute": "GsaSlimTypedAttribute",
    }

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        attribute_type: "GsaAttributeType",
        display_names: "dict[str, str]",
        guid: "str",
        name: "str",
        target_type: "GsaTargetAttributeType" = GsaTargetAttributeType.RESOLVED,
        about_attribute: "GsaSlimTypedAttribute | Unset_Type" = Unset,
    ) -> None:
        """GsaResolvedTargetAttribute - a model defined in Swagger

        Parameters
        ----------
        attribute_type: GsaAttributeType
        display_names: dict[str, str]
        guid: str
        name: str
        target_type: GsaTargetAttributeType
        about_attribute: GsaSlimTypedAttribute, optional
        """
        super().__init__(guid=guid, target_type=target_type)
        self._name: str
        self._display_names: dict[str, str]
        self._attribute_type: GsaAttributeType
        self._about_attribute: GsaSlimTypedAttribute | Unset_Type = Unset

        self.name = name
        self.display_names = display_names
        self.attribute_type = attribute_type
        if about_attribute is not Unset:
            self.about_attribute = about_attribute

    @property
    def name(self) -> "str":
        """Gets the name of this GsaResolvedTargetAttribute.

        Returns
        -------
        str
            The name of this GsaResolvedTargetAttribute.
        """
        return self._name

    @name.setter
    def name(self, name: "str") -> None:
        """Sets the name of this GsaResolvedTargetAttribute.

        Parameters
        ----------
        name: str
            The name of this GsaResolvedTargetAttribute.
        """
        # Field is not nullable
        if name is None:
            raise ValueError("Invalid value for 'name', must not be 'None'")
        # Field is required
        if name is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'name', must not be 'Unset'")
        self._name = name

    @property
    def display_names(self) -> "dict[str, str]":
        """Gets the display_names of this GsaResolvedTargetAttribute.

        Returns
        -------
        dict[str, str]
            The display_names of this GsaResolvedTargetAttribute.
        """
        return self._display_names

    @display_names.setter
    def display_names(self, display_names: "dict[str, str]") -> None:
        """Sets the display_names of this GsaResolvedTargetAttribute.

        Parameters
        ----------
        display_names: dict[str, str]
            The display_names of this GsaResolvedTargetAttribute.
        """
        # Field is not nullable
        if display_names is None:
            raise ValueError("Invalid value for 'display_names', must not be 'None'")
        # Field is required
        if display_names is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'display_names', must not be 'Unset'")
        self._display_names = display_names

    @property
    def attribute_type(self) -> "GsaAttributeType":
        """Gets the attribute_type of this GsaResolvedTargetAttribute.

        Returns
        -------
        GsaAttributeType
            The attribute_type of this GsaResolvedTargetAttribute.
        """
        return self._attribute_type

    @attribute_type.setter
    def attribute_type(self, attribute_type: "GsaAttributeType") -> None:
        """Sets the attribute_type of this GsaResolvedTargetAttribute.

        Parameters
        ----------
        attribute_type: GsaAttributeType
            The attribute_type of this GsaResolvedTargetAttribute.
        """
        # Field is not nullable
        if attribute_type is None:
            raise ValueError("Invalid value for 'attribute_type', must not be 'None'")
        # Field is required
        if attribute_type is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'attribute_type', must not be 'Unset'")
        self._attribute_type = attribute_type

    @property
    def about_attribute(self) -> "GsaSlimTypedAttribute | Unset_Type":
        """Gets the about_attribute of this GsaResolvedTargetAttribute.

        Returns
        -------
        GsaSlimTypedAttribute | Unset_Type
            The about_attribute of this GsaResolvedTargetAttribute.
        """
        return self._about_attribute

    @about_attribute.setter
    def about_attribute(self, about_attribute: "GsaSlimTypedAttribute | Unset_Type") -> None:
        """Sets the about_attribute of this GsaResolvedTargetAttribute.

        Parameters
        ----------
        about_attribute: GsaSlimTypedAttribute | Unset_Type
            The about_attribute of this GsaResolvedTargetAttribute.
        """
        # Field is not nullable
        if about_attribute is None:
            raise ValueError("Invalid value for 'about_attribute', must not be 'None'")
        self._about_attribute = about_attribute

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaResolvedTargetAttribute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
