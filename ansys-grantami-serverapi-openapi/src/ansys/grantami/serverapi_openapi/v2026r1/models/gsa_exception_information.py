# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
MI Server API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional  # noqa: F401

from . import ModelBase, Unset, Unset_Type

if TYPE_CHECKING:
    from datetime import datetime
    import pathlib

    from . import *


class GsaExceptionInformation(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "exception_type_full_name": "str",
        "localised_message": "str",
        "message": "str",
        "stringified_exception": "str",
        "inner_exception_info": "GsaExceptionInformation",
    }

    attribute_map: dict[str, str] = {
        "exception_type_full_name": "exceptionTypeFullName",
        "localised_message": "localisedMessage",
        "message": "message",
        "stringified_exception": "stringifiedException",
        "inner_exception_info": "innerExceptionInfo",
    }

    subtype_mapping: dict[str, str] = {
        "innerExceptionInfo": "GsaExceptionInformation",
    }

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        exception_type_full_name: "str",
        localised_message: "str",
        message: "str",
        stringified_exception: "str",
        inner_exception_info: "GsaExceptionInformation | Unset_Type" = Unset,
    ) -> None:
        """GsaExceptionInformation - a model defined in Swagger

        Parameters
        ----------
        exception_type_full_name: str
        localised_message: str
        message: str
        stringified_exception: str
        inner_exception_info: GsaExceptionInformation, optional
        """
        self._exception_type_full_name: str
        self._message: str
        self._localised_message: str
        self._stringified_exception: str
        self._inner_exception_info: GsaExceptionInformation | Unset_Type = Unset

        self.exception_type_full_name = exception_type_full_name
        self.message = message
        self.localised_message = localised_message
        self.stringified_exception = stringified_exception
        if inner_exception_info is not Unset:
            self.inner_exception_info = inner_exception_info

    @property
    def exception_type_full_name(self) -> "str":
        """Gets the exception_type_full_name of this GsaExceptionInformation.
        Full type name of the original exception.

        Returns
        -------
        str
            The exception_type_full_name of this GsaExceptionInformation.
        """
        return self._exception_type_full_name

    @exception_type_full_name.setter
    def exception_type_full_name(self, exception_type_full_name: "str") -> None:
        """Sets the exception_type_full_name of this GsaExceptionInformation.
        Full type name of the original exception.

        Parameters
        ----------
        exception_type_full_name: str
            The exception_type_full_name of this GsaExceptionInformation.
        """
        # Field is not nullable
        if exception_type_full_name is None:
            raise ValueError("Invalid value for 'exception_type_full_name', must not be 'None'")
        # Field is required
        if exception_type_full_name is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'exception_type_full_name', must not be 'Unset'")
        self._exception_type_full_name = exception_type_full_name

    @property
    def message(self) -> "str":
        """Gets the message of this GsaExceptionInformation.
        Message of the original exception.

        Returns
        -------
        str
            The message of this GsaExceptionInformation.
        """
        return self._message

    @message.setter
    def message(self, message: "str") -> None:
        """Sets the message of this GsaExceptionInformation.
        Message of the original exception.

        Parameters
        ----------
        message: str
            The message of this GsaExceptionInformation.
        """
        # Field is not nullable
        if message is None:
            raise ValueError("Invalid value for 'message', must not be 'None'")
        # Field is required
        if message is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'message', must not be 'Unset'")
        self._message = message

    @property
    def localised_message(self) -> "str":
        """Gets the localised_message of this GsaExceptionInformation.
        Localised message of the original exception if available. Regular message of the original exception otherwise.

        Returns
        -------
        str
            The localised_message of this GsaExceptionInformation.
        """
        return self._localised_message

    @localised_message.setter
    def localised_message(self, localised_message: "str") -> None:
        """Sets the localised_message of this GsaExceptionInformation.
        Localised message of the original exception if available. Regular message of the original exception otherwise.

        Parameters
        ----------
        localised_message: str
            The localised_message of this GsaExceptionInformation.
        """
        # Field is not nullable
        if localised_message is None:
            raise ValueError("Invalid value for 'localised_message', must not be 'None'")
        # Field is required
        if localised_message is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'localised_message', must not be 'Unset'")
        self._localised_message = localised_message

    @property
    def stringified_exception(self) -> "str":
        """Gets the stringified_exception of this GsaExceptionInformation.
        The result of calling .ToString() on the original exception.

        Returns
        -------
        str
            The stringified_exception of this GsaExceptionInformation.
        """
        return self._stringified_exception

    @stringified_exception.setter
    def stringified_exception(self, stringified_exception: "str") -> None:
        """Sets the stringified_exception of this GsaExceptionInformation.
        The result of calling .ToString() on the original exception.

        Parameters
        ----------
        stringified_exception: str
            The stringified_exception of this GsaExceptionInformation.
        """
        # Field is not nullable
        if stringified_exception is None:
            raise ValueError("Invalid value for 'stringified_exception', must not be 'None'")
        # Field is required
        if stringified_exception is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'stringified_exception', must not be 'Unset'")
        self._stringified_exception = stringified_exception

    @property
    def inner_exception_info(self) -> "GsaExceptionInformation | Unset_Type":
        """Gets the inner_exception_info of this GsaExceptionInformation.

        Returns
        -------
        GsaExceptionInformation | Unset_Type
            The inner_exception_info of this GsaExceptionInformation.
        """
        return self._inner_exception_info

    @inner_exception_info.setter
    def inner_exception_info(
        self, inner_exception_info: "GsaExceptionInformation | Unset_Type"
    ) -> None:
        """Sets the inner_exception_info of this GsaExceptionInformation.

        Parameters
        ----------
        inner_exception_info: GsaExceptionInformation | Unset_Type
            The inner_exception_info of this GsaExceptionInformation.
        """
        # Field is not nullable
        if inner_exception_info is None:
            raise ValueError("Invalid value for 'inner_exception_info', must not be 'None'")
        self._inner_exception_info = inner_exception_info

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaExceptionInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
