# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
MI Server API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional  # noqa: F401

from . import ModelBase, Unset, Unset_Type

if TYPE_CHECKING:
    from datetime import datetime
    import pathlib

    from . import *


class GsaActivityLogEntriesFilter(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "application_name_filter": "GsaActivityLogApplicationNameFilter",
        "application_names_collection_filter": "GsaActivityLogApplicationNamesCollectionFilter",
        "database_key_filter": "GsaActivityLogDatabaseKeyFilter",
        "date_filter": "GsaActivityLogDateFilter",
        "usage_mode_filter": "GsaActivityLogUsageModeFilter",
        "username_filter": "GsaActivityLogUsernameFilter",
    }

    attribute_map: dict[str, str] = {
        "application_name_filter": "applicationNameFilter",
        "application_names_collection_filter": "applicationNamesCollectionFilter",
        "database_key_filter": "databaseKeyFilter",
        "date_filter": "dateFilter",
        "usage_mode_filter": "usageModeFilter",
        "username_filter": "usernameFilter",
    }

    subtype_mapping: dict[str, str] = {
        "dateFilter": "GsaActivityLogDateFilter",
        "usernameFilter": "GsaActivityLogUsernameFilter",
        "applicationNamesCollectionFilter": "GsaActivityLogApplicationNamesCollectionFilter",
        "applicationNameFilter": "GsaActivityLogApplicationNameFilter",
        "databaseKeyFilter": "GsaActivityLogDatabaseKeyFilter",
        "usageModeFilter": "GsaActivityLogUsageModeFilter",
    }

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        application_name_filter: "GsaActivityLogApplicationNameFilter | Unset_Type" = Unset,
        application_names_collection_filter: "GsaActivityLogApplicationNamesCollectionFilter | Unset_Type" = Unset,
        database_key_filter: "GsaActivityLogDatabaseKeyFilter | Unset_Type" = Unset,
        date_filter: "GsaActivityLogDateFilter | Unset_Type" = Unset,
        usage_mode_filter: "GsaActivityLogUsageModeFilter | Unset_Type" = Unset,
        username_filter: "GsaActivityLogUsernameFilter | Unset_Type" = Unset,
    ) -> None:
        """GsaActivityLogEntriesFilter - a model defined in Swagger

        Parameters
        ----------
        application_name_filter: GsaActivityLogApplicationNameFilter, optional
        application_names_collection_filter: GsaActivityLogApplicationNamesCollectionFilter, optional
        database_key_filter: GsaActivityLogDatabaseKeyFilter, optional
        date_filter: GsaActivityLogDateFilter, optional
        usage_mode_filter: GsaActivityLogUsageModeFilter, optional
        username_filter: GsaActivityLogUsernameFilter, optional
        """
        self._date_filter: GsaActivityLogDateFilter | Unset_Type = Unset
        self._username_filter: GsaActivityLogUsernameFilter | Unset_Type = Unset
        self._application_names_collection_filter: (
            GsaActivityLogApplicationNamesCollectionFilter | Unset_Type
        ) = Unset
        self._application_name_filter: GsaActivityLogApplicationNameFilter | Unset_Type = Unset
        self._database_key_filter: GsaActivityLogDatabaseKeyFilter | Unset_Type = Unset
        self._usage_mode_filter: GsaActivityLogUsageModeFilter | Unset_Type = Unset

        if date_filter is not Unset:
            self.date_filter = date_filter
        if username_filter is not Unset:
            self.username_filter = username_filter
        if application_names_collection_filter is not Unset:
            self.application_names_collection_filter = application_names_collection_filter
        if application_name_filter is not Unset:
            self.application_name_filter = application_name_filter
        if database_key_filter is not Unset:
            self.database_key_filter = database_key_filter
        if usage_mode_filter is not Unset:
            self.usage_mode_filter = usage_mode_filter

    @property
    def date_filter(self) -> "GsaActivityLogDateFilter | Unset_Type":
        """Gets the date_filter of this GsaActivityLogEntriesFilter.

        Returns
        -------
        GsaActivityLogDateFilter | Unset_Type
            The date_filter of this GsaActivityLogEntriesFilter.
        """
        return self._date_filter

    @date_filter.setter
    def date_filter(self, date_filter: "GsaActivityLogDateFilter | Unset_Type") -> None:
        """Sets the date_filter of this GsaActivityLogEntriesFilter.

        Parameters
        ----------
        date_filter: GsaActivityLogDateFilter | Unset_Type
            The date_filter of this GsaActivityLogEntriesFilter.
        """
        # Field is not nullable
        if date_filter is None:
            raise ValueError("Invalid value for 'date_filter', must not be 'None'")
        self._date_filter = date_filter

    @property
    def username_filter(self) -> "GsaActivityLogUsernameFilter | Unset_Type":
        """Gets the username_filter of this GsaActivityLogEntriesFilter.

        Returns
        -------
        GsaActivityLogUsernameFilter | Unset_Type
            The username_filter of this GsaActivityLogEntriesFilter.
        """
        return self._username_filter

    @username_filter.setter
    def username_filter(self, username_filter: "GsaActivityLogUsernameFilter | Unset_Type") -> None:
        """Sets the username_filter of this GsaActivityLogEntriesFilter.

        Parameters
        ----------
        username_filter: GsaActivityLogUsernameFilter | Unset_Type
            The username_filter of this GsaActivityLogEntriesFilter.
        """
        # Field is not nullable
        if username_filter is None:
            raise ValueError("Invalid value for 'username_filter', must not be 'None'")
        self._username_filter = username_filter

    @property
    def application_names_collection_filter(
        self,
    ) -> "GsaActivityLogApplicationNamesCollectionFilter | Unset_Type":
        """Gets the application_names_collection_filter of this GsaActivityLogEntriesFilter.

        Returns
        -------
        GsaActivityLogApplicationNamesCollectionFilter | Unset_Type
            The application_names_collection_filter of this GsaActivityLogEntriesFilter.
        """
        return self._application_names_collection_filter

    @application_names_collection_filter.setter
    def application_names_collection_filter(
        self,
        application_names_collection_filter: "GsaActivityLogApplicationNamesCollectionFilter | Unset_Type",
    ) -> None:
        """Sets the application_names_collection_filter of this GsaActivityLogEntriesFilter.

        Parameters
        ----------
        application_names_collection_filter: GsaActivityLogApplicationNamesCollectionFilter | Unset_Type
            The application_names_collection_filter of this GsaActivityLogEntriesFilter.
        """
        # Field is not nullable
        if application_names_collection_filter is None:
            raise ValueError(
                "Invalid value for 'application_names_collection_filter', must not be 'None'"
            )
        self._application_names_collection_filter = application_names_collection_filter

    @property
    def application_name_filter(self) -> "GsaActivityLogApplicationNameFilter | Unset_Type":
        """Gets the application_name_filter of this GsaActivityLogEntriesFilter.

        Returns
        -------
        GsaActivityLogApplicationNameFilter | Unset_Type
            The application_name_filter of this GsaActivityLogEntriesFilter.
        """
        return self._application_name_filter

    @application_name_filter.setter
    def application_name_filter(
        self, application_name_filter: "GsaActivityLogApplicationNameFilter | Unset_Type"
    ) -> None:
        """Sets the application_name_filter of this GsaActivityLogEntriesFilter.

        Parameters
        ----------
        application_name_filter: GsaActivityLogApplicationNameFilter | Unset_Type
            The application_name_filter of this GsaActivityLogEntriesFilter.
        """
        # Field is not nullable
        if application_name_filter is None:
            raise ValueError("Invalid value for 'application_name_filter', must not be 'None'")
        self._application_name_filter = application_name_filter

    @property
    def database_key_filter(self) -> "GsaActivityLogDatabaseKeyFilter | Unset_Type":
        """Gets the database_key_filter of this GsaActivityLogEntriesFilter.

        Returns
        -------
        GsaActivityLogDatabaseKeyFilter | Unset_Type
            The database_key_filter of this GsaActivityLogEntriesFilter.
        """
        return self._database_key_filter

    @database_key_filter.setter
    def database_key_filter(
        self, database_key_filter: "GsaActivityLogDatabaseKeyFilter | Unset_Type"
    ) -> None:
        """Sets the database_key_filter of this GsaActivityLogEntriesFilter.

        Parameters
        ----------
        database_key_filter: GsaActivityLogDatabaseKeyFilter | Unset_Type
            The database_key_filter of this GsaActivityLogEntriesFilter.
        """
        # Field is not nullable
        if database_key_filter is None:
            raise ValueError("Invalid value for 'database_key_filter', must not be 'None'")
        self._database_key_filter = database_key_filter

    @property
    def usage_mode_filter(self) -> "GsaActivityLogUsageModeFilter | Unset_Type":
        """Gets the usage_mode_filter of this GsaActivityLogEntriesFilter.

        Returns
        -------
        GsaActivityLogUsageModeFilter | Unset_Type
            The usage_mode_filter of this GsaActivityLogEntriesFilter.
        """
        return self._usage_mode_filter

    @usage_mode_filter.setter
    def usage_mode_filter(
        self, usage_mode_filter: "GsaActivityLogUsageModeFilter | Unset_Type"
    ) -> None:
        """Sets the usage_mode_filter of this GsaActivityLogEntriesFilter.

        Parameters
        ----------
        usage_mode_filter: GsaActivityLogUsageModeFilter | Unset_Type
            The usage_mode_filter of this GsaActivityLogEntriesFilter.
        """
        # Field is not nullable
        if usage_mode_filter is None:
            raise ValueError("Invalid value for 'usage_mode_filter', must not be 'None'")
        self._usage_mode_filter = usage_mode_filter

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaActivityLogEntriesFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
