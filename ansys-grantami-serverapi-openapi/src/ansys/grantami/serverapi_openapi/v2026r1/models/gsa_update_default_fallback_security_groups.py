# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
MI Server API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional  # noqa: F401

from . import ModelBase, Unset, Unset_Type

if TYPE_CHECKING:
    from datetime import datetime
    import pathlib

    from . import *


class GsaUpdateDefaultFallbackSecurityGroups(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "admin_group": "str",
        "grant_group": "str",
        "power_user_group": "str",
        "read_group": "str",
        "system_group": "str",
        "write_group": "str",
    }

    attribute_map: dict[str, str] = {
        "admin_group": "adminGroup",
        "grant_group": "grantGroup",
        "power_user_group": "powerUserGroup",
        "read_group": "readGroup",
        "system_group": "systemGroup",
        "write_group": "writeGroup",
    }

    subtype_mapping: dict[str, str] = {}

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        admin_group: "str | Unset_Type" = Unset,
        grant_group: "str | Unset_Type" = Unset,
        power_user_group: "str | Unset_Type" = Unset,
        read_group: "str | Unset_Type" = Unset,
        system_group: "str | Unset_Type" = Unset,
        write_group: "str | Unset_Type" = Unset,
    ) -> None:
        """GsaUpdateDefaultFallbackSecurityGroups - a model defined in Swagger

        Parameters
        ----------
        admin_group: str, optional
        grant_group: str, optional
        power_user_group: str, optional
        read_group: str, optional
        system_group: str, optional
        write_group: str, optional
        """
        self._system_group: str | Unset_Type = Unset
        self._admin_group: str | Unset_Type = Unset
        self._grant_group: str | Unset_Type = Unset
        self._power_user_group: str | Unset_Type = Unset
        self._write_group: str | Unset_Type = Unset
        self._read_group: str | Unset_Type = Unset

        if system_group is not Unset:
            self.system_group = system_group
        if admin_group is not Unset:
            self.admin_group = admin_group
        if grant_group is not Unset:
            self.grant_group = grant_group
        if power_user_group is not Unset:
            self.power_user_group = power_user_group
        if write_group is not Unset:
            self.write_group = write_group
        if read_group is not Unset:
            self.read_group = read_group

    @property
    def system_group(self) -> "str | Unset_Type":
        """Gets the system_group of this GsaUpdateDefaultFallbackSecurityGroups.

        Returns
        -------
        str | Unset_Type
            The system_group of this GsaUpdateDefaultFallbackSecurityGroups.
        """
        return self._system_group

    @system_group.setter
    def system_group(self, system_group: "str | Unset_Type") -> None:
        """Sets the system_group of this GsaUpdateDefaultFallbackSecurityGroups.

        Parameters
        ----------
        system_group: str | Unset_Type
            The system_group of this GsaUpdateDefaultFallbackSecurityGroups.
        """
        # Field is not nullable
        if system_group is None:
            raise ValueError("Invalid value for 'system_group', must not be 'None'")
        self._system_group = system_group

    @property
    def admin_group(self) -> "str | Unset_Type":
        """Gets the admin_group of this GsaUpdateDefaultFallbackSecurityGroups.

        Returns
        -------
        str | Unset_Type
            The admin_group of this GsaUpdateDefaultFallbackSecurityGroups.
        """
        return self._admin_group

    @admin_group.setter
    def admin_group(self, admin_group: "str | Unset_Type") -> None:
        """Sets the admin_group of this GsaUpdateDefaultFallbackSecurityGroups.

        Parameters
        ----------
        admin_group: str | Unset_Type
            The admin_group of this GsaUpdateDefaultFallbackSecurityGroups.
        """
        # Field is not nullable
        if admin_group is None:
            raise ValueError("Invalid value for 'admin_group', must not be 'None'")
        self._admin_group = admin_group

    @property
    def grant_group(self) -> "str | Unset_Type":
        """Gets the grant_group of this GsaUpdateDefaultFallbackSecurityGroups.

        Returns
        -------
        str | Unset_Type
            The grant_group of this GsaUpdateDefaultFallbackSecurityGroups.
        """
        return self._grant_group

    @grant_group.setter
    def grant_group(self, grant_group: "str | Unset_Type") -> None:
        """Sets the grant_group of this GsaUpdateDefaultFallbackSecurityGroups.

        Parameters
        ----------
        grant_group: str | Unset_Type
            The grant_group of this GsaUpdateDefaultFallbackSecurityGroups.
        """
        # Field is not nullable
        if grant_group is None:
            raise ValueError("Invalid value for 'grant_group', must not be 'None'")
        self._grant_group = grant_group

    @property
    def power_user_group(self) -> "str | Unset_Type":
        """Gets the power_user_group of this GsaUpdateDefaultFallbackSecurityGroups.

        Returns
        -------
        str | Unset_Type
            The power_user_group of this GsaUpdateDefaultFallbackSecurityGroups.
        """
        return self._power_user_group

    @power_user_group.setter
    def power_user_group(self, power_user_group: "str | Unset_Type") -> None:
        """Sets the power_user_group of this GsaUpdateDefaultFallbackSecurityGroups.

        Parameters
        ----------
        power_user_group: str | Unset_Type
            The power_user_group of this GsaUpdateDefaultFallbackSecurityGroups.
        """
        # Field is not nullable
        if power_user_group is None:
            raise ValueError("Invalid value for 'power_user_group', must not be 'None'")
        self._power_user_group = power_user_group

    @property
    def write_group(self) -> "str | Unset_Type":
        """Gets the write_group of this GsaUpdateDefaultFallbackSecurityGroups.

        Returns
        -------
        str | Unset_Type
            The write_group of this GsaUpdateDefaultFallbackSecurityGroups.
        """
        return self._write_group

    @write_group.setter
    def write_group(self, write_group: "str | Unset_Type") -> None:
        """Sets the write_group of this GsaUpdateDefaultFallbackSecurityGroups.

        Parameters
        ----------
        write_group: str | Unset_Type
            The write_group of this GsaUpdateDefaultFallbackSecurityGroups.
        """
        # Field is not nullable
        if write_group is None:
            raise ValueError("Invalid value for 'write_group', must not be 'None'")
        self._write_group = write_group

    @property
    def read_group(self) -> "str | Unset_Type":
        """Gets the read_group of this GsaUpdateDefaultFallbackSecurityGroups.

        Returns
        -------
        str | Unset_Type
            The read_group of this GsaUpdateDefaultFallbackSecurityGroups.
        """
        return self._read_group

    @read_group.setter
    def read_group(self, read_group: "str | Unset_Type") -> None:
        """Sets the read_group of this GsaUpdateDefaultFallbackSecurityGroups.

        Parameters
        ----------
        read_group: str | Unset_Type
            The read_group of this GsaUpdateDefaultFallbackSecurityGroups.
        """
        # Field is not nullable
        if read_group is None:
            raise ValueError("Invalid value for 'read_group', must not be 'None'")
        self._read_group = read_group

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaUpdateDefaultFallbackSecurityGroups):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
