# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
MI Server API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional  # noqa: F401

from . import ModelBase, Unset, Unset_Type

if TYPE_CHECKING:
    from datetime import datetime
    import pathlib

    from . import *


class GsaResolvedNotificationWatch(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "database_key": "str",
        "database_name": "str",
        "date_added_utc": "datetime",
        "identity": "int",
        "is_folder": "bool",
        "item_name": "str",
        "watch_type": "GsaWatchType",
    }

    attribute_map: dict[str, str] = {
        "database_key": "databaseKey",
        "database_name": "databaseName",
        "date_added_utc": "dateAddedUtc",
        "identity": "identity",
        "is_folder": "isFolder",
        "item_name": "itemName",
        "watch_type": "watchType",
    }

    subtype_mapping: dict[str, str] = {
        "watchType": "GsaWatchType",
    }

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        database_key: "str | None | Unset_Type" = Unset,
        database_name: "str | None | Unset_Type" = Unset,
        date_added_utc: "datetime | Unset_Type" = Unset,
        identity: "int | Unset_Type" = Unset,
        is_folder: "bool | Unset_Type" = Unset,
        item_name: "str | None | Unset_Type" = Unset,
        watch_type: "GsaWatchType | Unset_Type" = Unset,
    ) -> None:
        """GsaResolvedNotificationWatch - a model defined in Swagger

        Parameters
        ----------
        database_key: str | None, optional
        database_name: str | None, optional
        date_added_utc: datetime, optional
        identity: int, optional
        is_folder: bool, optional
        item_name: str | None, optional
        watch_type: GsaWatchType, optional
        """
        self._identity: int | Unset_Type = Unset
        self._watch_type: GsaWatchType | Unset_Type = Unset
        self._database_key: str | None | Unset_Type = Unset
        self._database_name: str | None | Unset_Type = Unset
        self._item_name: str | None | Unset_Type = Unset
        self._is_folder: bool | Unset_Type = Unset
        self._date_added_utc: datetime | Unset_Type = Unset

        if identity is not Unset:
            self.identity = identity
        if watch_type is not Unset:
            self.watch_type = watch_type
        if database_key is not Unset:
            self.database_key = database_key
        if database_name is not Unset:
            self.database_name = database_name
        if item_name is not Unset:
            self.item_name = item_name
        if is_folder is not Unset:
            self.is_folder = is_folder
        if date_added_utc is not Unset:
            self.date_added_utc = date_added_utc

    @property
    def identity(self) -> "int | Unset_Type":
        """Gets the identity of this GsaResolvedNotificationWatch.

        Returns
        -------
        int | Unset_Type
            The identity of this GsaResolvedNotificationWatch.
        """
        return self._identity

    @identity.setter
    def identity(self, identity: "int | Unset_Type") -> None:
        """Sets the identity of this GsaResolvedNotificationWatch.

        Parameters
        ----------
        identity: int | Unset_Type
            The identity of this GsaResolvedNotificationWatch.
        """
        # Field is not nullable
        if identity is None:
            raise ValueError("Invalid value for 'identity', must not be 'None'")
        self._identity = identity

    @property
    def watch_type(self) -> "GsaWatchType | Unset_Type":
        """Gets the watch_type of this GsaResolvedNotificationWatch.

        Returns
        -------
        GsaWatchType | Unset_Type
            The watch_type of this GsaResolvedNotificationWatch.
        """
        return self._watch_type

    @watch_type.setter
    def watch_type(self, watch_type: "GsaWatchType | Unset_Type") -> None:
        """Sets the watch_type of this GsaResolvedNotificationWatch.

        Parameters
        ----------
        watch_type: GsaWatchType | Unset_Type
            The watch_type of this GsaResolvedNotificationWatch.
        """
        # Field is not nullable
        if watch_type is None:
            raise ValueError("Invalid value for 'watch_type', must not be 'None'")
        self._watch_type = watch_type

    @property
    def database_key(self) -> "str | None | Unset_Type":
        """Gets the database_key of this GsaResolvedNotificationWatch.

        Returns
        -------
        str | None | Unset_Type
            The database_key of this GsaResolvedNotificationWatch.
        """
        return self._database_key

    @database_key.setter
    def database_key(self, database_key: "str | None | Unset_Type") -> None:
        """Sets the database_key of this GsaResolvedNotificationWatch.

        Parameters
        ----------
        database_key: str | None | Unset_Type
            The database_key of this GsaResolvedNotificationWatch.
        """
        self._database_key = database_key

    @property
    def database_name(self) -> "str | None | Unset_Type":
        """Gets the database_name of this GsaResolvedNotificationWatch.

        Returns
        -------
        str | None | Unset_Type
            The database_name of this GsaResolvedNotificationWatch.
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name: "str | None | Unset_Type") -> None:
        """Sets the database_name of this GsaResolvedNotificationWatch.

        Parameters
        ----------
        database_name: str | None | Unset_Type
            The database_name of this GsaResolvedNotificationWatch.
        """
        self._database_name = database_name

    @property
    def item_name(self) -> "str | None | Unset_Type":
        """Gets the item_name of this GsaResolvedNotificationWatch.

        Returns
        -------
        str | None | Unset_Type
            The item_name of this GsaResolvedNotificationWatch.
        """
        return self._item_name

    @item_name.setter
    def item_name(self, item_name: "str | None | Unset_Type") -> None:
        """Sets the item_name of this GsaResolvedNotificationWatch.

        Parameters
        ----------
        item_name: str | None | Unset_Type
            The item_name of this GsaResolvedNotificationWatch.
        """
        self._item_name = item_name

    @property
    def is_folder(self) -> "bool | Unset_Type":
        """Gets the is_folder of this GsaResolvedNotificationWatch.

        Returns
        -------
        bool | Unset_Type
            The is_folder of this GsaResolvedNotificationWatch.
        """
        return self._is_folder

    @is_folder.setter
    def is_folder(self, is_folder: "bool | Unset_Type") -> None:
        """Sets the is_folder of this GsaResolvedNotificationWatch.

        Parameters
        ----------
        is_folder: bool | Unset_Type
            The is_folder of this GsaResolvedNotificationWatch.
        """
        # Field is not nullable
        if is_folder is None:
            raise ValueError("Invalid value for 'is_folder', must not be 'None'")
        self._is_folder = is_folder

    @property
    def date_added_utc(self) -> "datetime | Unset_Type":
        """Gets the date_added_utc of this GsaResolvedNotificationWatch.

        Returns
        -------
        datetime | Unset_Type
            The date_added_utc of this GsaResolvedNotificationWatch.
        """
        return self._date_added_utc

    @date_added_utc.setter
    def date_added_utc(self, date_added_utc: "datetime | Unset_Type") -> None:
        """Sets the date_added_utc of this GsaResolvedNotificationWatch.

        Parameters
        ----------
        date_added_utc: datetime | Unset_Type
            The date_added_utc of this GsaResolvedNotificationWatch.
        """
        # Field is not nullable
        if date_added_utc is None:
            raise ValueError("Invalid value for 'date_added_utc', must not be 'None'")
        self._date_added_utc = date_added_utc

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaResolvedNotificationWatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
