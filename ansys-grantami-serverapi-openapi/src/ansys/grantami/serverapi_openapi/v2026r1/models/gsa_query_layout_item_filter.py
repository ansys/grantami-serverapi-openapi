# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
MI Server API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional  # noqa: F401

from . import ModelBase, Unset, Unset_Type

if TYPE_CHECKING:
    from datetime import datetime
    import pathlib

    from . import *


class GsaQueryLayoutItemFilter(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "forwards": "bool",
        "item_type": "GsaLayoutItemType",
        "link_type": "GsaLayoutItemLinkType",
        "target_database": "str",
        "target_database_version": "str",
        "target_table": "str",
        "underlying_entity_guid": "str",
    }

    attribute_map: dict[str, str] = {
        "forwards": "forwards",
        "item_type": "itemType",
        "link_type": "linkType",
        "target_database": "targetDatabase",
        "target_database_version": "targetDatabaseVersion",
        "target_table": "targetTable",
        "underlying_entity_guid": "underlyingEntityGuid",
    }

    subtype_mapping: dict[str, str] = {
        "itemType": "GsaLayoutItemType",
        "linkType": "GsaLayoutItemLinkType",
    }

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        forwards: "bool | None | Unset_Type" = Unset,
        item_type: "GsaLayoutItemType | Unset_Type" = Unset,
        link_type: "GsaLayoutItemLinkType | Unset_Type" = Unset,
        target_database: "str | None | Unset_Type" = Unset,
        target_database_version: "str | None | Unset_Type" = Unset,
        target_table: "str | None | Unset_Type" = Unset,
        underlying_entity_guid: "str | None | Unset_Type" = Unset,
    ) -> None:
        """GsaQueryLayoutItemFilter - a model defined in Swagger

        Parameters
        ----------
        forwards: bool | None, optional
        item_type: GsaLayoutItemType, optional
        link_type: GsaLayoutItemLinkType, optional
        target_database: str | None, optional
        target_database_version: str | None, optional
        target_table: str | None, optional
        underlying_entity_guid: str | None, optional
        """
        self._item_type: GsaLayoutItemType | Unset_Type = Unset
        self._underlying_entity_guid: str | None | Unset_Type = Unset
        self._link_type: GsaLayoutItemLinkType | Unset_Type = Unset
        self._target_database: str | None | Unset_Type = Unset
        self._target_database_version: str | None | Unset_Type = Unset
        self._target_table: str | None | Unset_Type = Unset
        self._forwards: bool | None | Unset_Type = Unset

        if item_type is not Unset:
            self.item_type = item_type
        if underlying_entity_guid is not Unset:
            self.underlying_entity_guid = underlying_entity_guid
        if link_type is not Unset:
            self.link_type = link_type
        if target_database is not Unset:
            self.target_database = target_database
        if target_database_version is not Unset:
            self.target_database_version = target_database_version
        if target_table is not Unset:
            self.target_table = target_table
        if forwards is not Unset:
            self.forwards = forwards

    @property
    def item_type(self) -> "GsaLayoutItemType | Unset_Type":
        """Gets the item_type of this GsaQueryLayoutItemFilter.

        Returns
        -------
        GsaLayoutItemType | Unset_Type
            The item_type of this GsaQueryLayoutItemFilter.
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type: "GsaLayoutItemType | Unset_Type") -> None:
        """Sets the item_type of this GsaQueryLayoutItemFilter.

        Parameters
        ----------
        item_type: GsaLayoutItemType | Unset_Type
            The item_type of this GsaQueryLayoutItemFilter.
        """
        # Field is not nullable
        if item_type is None:
            raise ValueError("Invalid value for 'item_type', must not be 'None'")
        self._item_type = item_type

    @property
    def underlying_entity_guid(self) -> "str | None | Unset_Type":
        """Gets the underlying_entity_guid of this GsaQueryLayoutItemFilter.

        Returns
        -------
        str | None | Unset_Type
            The underlying_entity_guid of this GsaQueryLayoutItemFilter.
        """
        return self._underlying_entity_guid

    @underlying_entity_guid.setter
    def underlying_entity_guid(self, underlying_entity_guid: "str | None | Unset_Type") -> None:
        """Sets the underlying_entity_guid of this GsaQueryLayoutItemFilter.

        Parameters
        ----------
        underlying_entity_guid: str | None | Unset_Type
            The underlying_entity_guid of this GsaQueryLayoutItemFilter.
        """
        self._underlying_entity_guid = underlying_entity_guid

    @property
    def link_type(self) -> "GsaLayoutItemLinkType | Unset_Type":
        """Gets the link_type of this GsaQueryLayoutItemFilter.

        Returns
        -------
        GsaLayoutItemLinkType | Unset_Type
            The link_type of this GsaQueryLayoutItemFilter.
        """
        return self._link_type

    @link_type.setter
    def link_type(self, link_type: "GsaLayoutItemLinkType | Unset_Type") -> None:
        """Sets the link_type of this GsaQueryLayoutItemFilter.

        Parameters
        ----------
        link_type: GsaLayoutItemLinkType | Unset_Type
            The link_type of this GsaQueryLayoutItemFilter.
        """
        # Field is not nullable
        if link_type is None:
            raise ValueError("Invalid value for 'link_type', must not be 'None'")
        self._link_type = link_type

    @property
    def target_database(self) -> "str | None | Unset_Type":
        """Gets the target_database of this GsaQueryLayoutItemFilter.

        Returns
        -------
        str | None | Unset_Type
            The target_database of this GsaQueryLayoutItemFilter.
        """
        return self._target_database

    @target_database.setter
    def target_database(self, target_database: "str | None | Unset_Type") -> None:
        """Sets the target_database of this GsaQueryLayoutItemFilter.

        Parameters
        ----------
        target_database: str | None | Unset_Type
            The target_database of this GsaQueryLayoutItemFilter.
        """
        self._target_database = target_database

    @property
    def target_database_version(self) -> "str | None | Unset_Type":
        """Gets the target_database_version of this GsaQueryLayoutItemFilter.

        Returns
        -------
        str | None | Unset_Type
            The target_database_version of this GsaQueryLayoutItemFilter.
        """
        return self._target_database_version

    @target_database_version.setter
    def target_database_version(self, target_database_version: "str | None | Unset_Type") -> None:
        """Sets the target_database_version of this GsaQueryLayoutItemFilter.

        Parameters
        ----------
        target_database_version: str | None | Unset_Type
            The target_database_version of this GsaQueryLayoutItemFilter.
        """
        self._target_database_version = target_database_version

    @property
    def target_table(self) -> "str | None | Unset_Type":
        """Gets the target_table of this GsaQueryLayoutItemFilter.

        Returns
        -------
        str | None | Unset_Type
            The target_table of this GsaQueryLayoutItemFilter.
        """
        return self._target_table

    @target_table.setter
    def target_table(self, target_table: "str | None | Unset_Type") -> None:
        """Sets the target_table of this GsaQueryLayoutItemFilter.

        Parameters
        ----------
        target_table: str | None | Unset_Type
            The target_table of this GsaQueryLayoutItemFilter.
        """
        self._target_table = target_table

    @property
    def forwards(self) -> "bool | None | Unset_Type":
        """Gets the forwards of this GsaQueryLayoutItemFilter.

        Returns
        -------
        bool | None | Unset_Type
            The forwards of this GsaQueryLayoutItemFilter.
        """
        return self._forwards

    @forwards.setter
    def forwards(self, forwards: "bool | None | Unset_Type") -> None:
        """Sets the forwards of this GsaQueryLayoutItemFilter.

        Parameters
        ----------
        forwards: bool | None | Unset_Type
            The forwards of this GsaQueryLayoutItemFilter.
        """
        self._forwards = forwards

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaQueryLayoutItemFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
