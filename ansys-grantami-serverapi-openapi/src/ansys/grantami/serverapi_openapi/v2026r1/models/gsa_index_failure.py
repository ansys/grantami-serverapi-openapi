# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
MI Server API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional  # noqa: F401

from . import ModelBase, Unset, Unset_Type

if TYPE_CHECKING:
    from datetime import datetime
    import pathlib

    from . import *


class GsaIndexFailure(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "files_with_errors": "list[GsaFileDatumInfo]",
        "oversized_files": "list[GsaFileDatumInfo]",
        "record_history_guid": "str",
        "record_name": "str",
        "record_was_oversized": "bool",
        "revision": "int",
        "error_while_indexing": "str",
        "error_while_removing_from_index": "str",
    }

    attribute_map: dict[str, str] = {
        "files_with_errors": "filesWithErrors",
        "oversized_files": "oversizedFiles",
        "record_history_guid": "recordHistoryGuid",
        "record_name": "recordName",
        "record_was_oversized": "recordWasOversized",
        "revision": "revision",
        "error_while_indexing": "errorWhileIndexing",
        "error_while_removing_from_index": "errorWhileRemovingFromIndex",
    }

    subtype_mapping: dict[str, str] = {
        "oversizedFiles": "GsaFileDatumInfo",
        "filesWithErrors": "GsaFileDatumInfo",
    }

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        files_with_errors: "list[GsaFileDatumInfo]",
        oversized_files: "list[GsaFileDatumInfo]",
        record_history_guid: "str",
        record_name: "str",
        record_was_oversized: "bool",
        revision: "int",
        error_while_indexing: "str | None | Unset_Type" = Unset,
        error_while_removing_from_index: "str | None | Unset_Type" = Unset,
    ) -> None:
        """GsaIndexFailure - a model defined in Swagger

        Parameters
        ----------
        files_with_errors: list[GsaFileDatumInfo]
        oversized_files: list[GsaFileDatumInfo]
        record_history_guid: str
        record_name: str
        record_was_oversized: bool
        revision: int
        error_while_indexing: str | None, optional
        error_while_removing_from_index: str | None, optional
        """
        self._record_history_guid: str
        self._revision: int
        self._record_name: str
        self._record_was_oversized: bool
        self._error_while_indexing: str | None | Unset_Type = Unset
        self._error_while_removing_from_index: str | None | Unset_Type = Unset
        self._oversized_files: list[GsaFileDatumInfo]
        self._files_with_errors: list[GsaFileDatumInfo]

        self.record_history_guid = record_history_guid
        self.revision = revision
        self.record_name = record_name
        self.record_was_oversized = record_was_oversized
        if error_while_indexing is not Unset:
            self.error_while_indexing = error_while_indexing
        if error_while_removing_from_index is not Unset:
            self.error_while_removing_from_index = error_while_removing_from_index
        self.oversized_files = oversized_files
        self.files_with_errors = files_with_errors

    @property
    def record_history_guid(self) -> "str":
        """Gets the record_history_guid of this GsaIndexFailure.
        The record history GUID.

        Returns
        -------
        str
            The record_history_guid of this GsaIndexFailure.
        """
        return self._record_history_guid

    @record_history_guid.setter
    def record_history_guid(self, record_history_guid: "str") -> None:
        """Sets the record_history_guid of this GsaIndexFailure.
        The record history GUID.

        Parameters
        ----------
        record_history_guid: str
            The record_history_guid of this GsaIndexFailure.
        """
        # Field is not nullable
        if record_history_guid is None:
            raise ValueError("Invalid value for 'record_history_guid', must not be 'None'")
        # Field is required
        if record_history_guid is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'record_history_guid', must not be 'Unset'")
        self._record_history_guid = record_history_guid

    @property
    def revision(self) -> "int":
        """Gets the revision of this GsaIndexFailure.
        This database revision at which the error occurred.

        Returns
        -------
        int
            The revision of this GsaIndexFailure.
        """
        return self._revision

    @revision.setter
    def revision(self, revision: "int") -> None:
        """Sets the revision of this GsaIndexFailure.
        This database revision at which the error occurred.

        Parameters
        ----------
        revision: int
            The revision of this GsaIndexFailure.
        """
        # Field is not nullable
        if revision is None:
            raise ValueError("Invalid value for 'revision', must not be 'None'")
        # Field is required
        if revision is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'revision', must not be 'Unset'")
        self._revision = revision

    @property
    def record_name(self) -> "str":
        """Gets the record_name of this GsaIndexFailure.
        The name of the record.

        Returns
        -------
        str
            The record_name of this GsaIndexFailure.
        """
        return self._record_name

    @record_name.setter
    def record_name(self, record_name: "str") -> None:
        """Sets the record_name of this GsaIndexFailure.
        The name of the record.

        Parameters
        ----------
        record_name: str
            The record_name of this GsaIndexFailure.
        """
        # Field is not nullable
        if record_name is None:
            raise ValueError("Invalid value for 'record_name', must not be 'None'")
        # Field is required
        if record_name is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'record_name', must not be 'Unset'")
        self._record_name = record_name

    @property
    def record_was_oversized(self) -> "bool":
        """Gets the record_was_oversized of this GsaIndexFailure.
        Whether the failure was because the record was too big to be indexed.

        Returns
        -------
        bool
            The record_was_oversized of this GsaIndexFailure.
        """
        return self._record_was_oversized

    @record_was_oversized.setter
    def record_was_oversized(self, record_was_oversized: "bool") -> None:
        """Sets the record_was_oversized of this GsaIndexFailure.
        Whether the failure was because the record was too big to be indexed.

        Parameters
        ----------
        record_was_oversized: bool
            The record_was_oversized of this GsaIndexFailure.
        """
        # Field is not nullable
        if record_was_oversized is None:
            raise ValueError("Invalid value for 'record_was_oversized', must not be 'None'")
        # Field is required
        if record_was_oversized is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'record_was_oversized', must not be 'Unset'")
        self._record_was_oversized = record_was_oversized

    @property
    def error_while_indexing(self) -> "str | None | Unset_Type":
        """Gets the error_while_indexing of this GsaIndexFailure.
        The error message that was returned while indexing (may be null or empty).

        Returns
        -------
        str | None | Unset_Type
            The error_while_indexing of this GsaIndexFailure.
        """
        return self._error_while_indexing

    @error_while_indexing.setter
    def error_while_indexing(self, error_while_indexing: "str | None | Unset_Type") -> None:
        """Sets the error_while_indexing of this GsaIndexFailure.
        The error message that was returned while indexing (may be null or empty).

        Parameters
        ----------
        error_while_indexing: str | None | Unset_Type
            The error_while_indexing of this GsaIndexFailure.
        """
        self._error_while_indexing = error_while_indexing

    @property
    def error_while_removing_from_index(self) -> "str | None | Unset_Type":
        """Gets the error_while_removing_from_index of this GsaIndexFailure.
        The error message that was returned while removing this record from the index (may be null or empty).

        Returns
        -------
        str | None | Unset_Type
            The error_while_removing_from_index of this GsaIndexFailure.
        """
        return self._error_while_removing_from_index

    @error_while_removing_from_index.setter
    def error_while_removing_from_index(
        self, error_while_removing_from_index: "str | None | Unset_Type"
    ) -> None:
        """Sets the error_while_removing_from_index of this GsaIndexFailure.
        The error message that was returned while removing this record from the index (may be null or empty).

        Parameters
        ----------
        error_while_removing_from_index: str | None | Unset_Type
            The error_while_removing_from_index of this GsaIndexFailure.
        """
        self._error_while_removing_from_index = error_while_removing_from_index

    @property
    def oversized_files(self) -> "list[GsaFileDatumInfo]":
        """Gets the oversized_files of this GsaIndexFailure.
        A list of files that were too big to be indexed.

        Returns
        -------
        list[GsaFileDatumInfo]
            The oversized_files of this GsaIndexFailure.
        """
        return self._oversized_files

    @oversized_files.setter
    def oversized_files(self, oversized_files: "list[GsaFileDatumInfo]") -> None:
        """Sets the oversized_files of this GsaIndexFailure.
        A list of files that were too big to be indexed.

        Parameters
        ----------
        oversized_files: list[GsaFileDatumInfo]
            The oversized_files of this GsaIndexFailure.
        """
        # Field is not nullable
        if oversized_files is None:
            raise ValueError("Invalid value for 'oversized_files', must not be 'None'")
        # Field is required
        if oversized_files is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'oversized_files', must not be 'Unset'")
        self._oversized_files = oversized_files

    @property
    def files_with_errors(self) -> "list[GsaFileDatumInfo]":
        """Gets the files_with_errors of this GsaIndexFailure.
        A list of failed files with their associated errors.

        Returns
        -------
        list[GsaFileDatumInfo]
            The files_with_errors of this GsaIndexFailure.
        """
        return self._files_with_errors

    @files_with_errors.setter
    def files_with_errors(self, files_with_errors: "list[GsaFileDatumInfo]") -> None:
        """Sets the files_with_errors of this GsaIndexFailure.
        A list of failed files with their associated errors.

        Parameters
        ----------
        files_with_errors: list[GsaFileDatumInfo]
            The files_with_errors of this GsaIndexFailure.
        """
        # Field is not nullable
        if files_with_errors is None:
            raise ValueError("Invalid value for 'files_with_errors', must not be 'None'")
        # Field is required
        if files_with_errors is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'files_with_errors', must not be 'Unset'")
        self._files_with_errors = files_with_errors

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaIndexFailure):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
