# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
MI Server API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional  # noqa: F401

from . import ModelBase, Unset, Unset_Type

if TYPE_CHECKING:
    from datetime import datetime
    import pathlib

    from . import *


class GsaFolderCreationException(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "code": "SystemNetHttpStatusCode",
        "errors": "list[GsaFolderErrorDetail]",
        "folder_type": "GsaFolderType",
        "message": "str",
        "name": "str",
    }

    attribute_map: dict[str, str] = {
        "code": "code",
        "errors": "errors",
        "folder_type": "folderType",
        "message": "message",
        "name": "name",
    }

    subtype_mapping: dict[str, str] = {
        "code": "SystemNetHttpStatusCode",
        "folderType": "GsaFolderType",
        "errors": "GsaFolderErrorDetail",
    }

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        code: "SystemNetHttpStatusCode | Unset_Type" = Unset,
        errors: "list[GsaFolderErrorDetail] | None | Unset_Type" = Unset,
        folder_type: "GsaFolderType | Unset_Type" = Unset,
        message: "str | None | Unset_Type" = Unset,
        name: "str | None | Unset_Type" = Unset,
    ) -> None:
        """GsaFolderCreationException - a model defined in Swagger

        Parameters
        ----------
        code: SystemNetHttpStatusCode, optional
        errors: list[GsaFolderErrorDetail] | None, optional
        folder_type: GsaFolderType, optional
        message: str | None, optional
        name: str | None, optional
        """
        self._message: str | None | Unset_Type = Unset
        self._code: SystemNetHttpStatusCode | Unset_Type = Unset
        self._name: str | None | Unset_Type = Unset
        self._folder_type: GsaFolderType | Unset_Type = Unset
        self._errors: list[GsaFolderErrorDetail] | None | Unset_Type = Unset

        if message is not Unset:
            self.message = message
        if code is not Unset:
            self.code = code
        if name is not Unset:
            self.name = name
        if folder_type is not Unset:
            self.folder_type = folder_type
        if errors is not Unset:
            self.errors = errors

    @property
    def message(self) -> "str | None | Unset_Type":
        """Gets the message of this GsaFolderCreationException.

        Returns
        -------
        str | None | Unset_Type
            The message of this GsaFolderCreationException.
        """
        return self._message

    @message.setter
    def message(self, message: "str | None | Unset_Type") -> None:
        """Sets the message of this GsaFolderCreationException.

        Parameters
        ----------
        message: str | None | Unset_Type
            The message of this GsaFolderCreationException.
        """
        self._message = message

    @property
    def code(self) -> "SystemNetHttpStatusCode | Unset_Type":
        """Gets the code of this GsaFolderCreationException.

        Returns
        -------
        SystemNetHttpStatusCode | Unset_Type
            The code of this GsaFolderCreationException.
        """
        return self._code

    @code.setter
    def code(self, code: "SystemNetHttpStatusCode | Unset_Type") -> None:
        """Sets the code of this GsaFolderCreationException.

        Parameters
        ----------
        code: SystemNetHttpStatusCode | Unset_Type
            The code of this GsaFolderCreationException.
        """
        # Field is not nullable
        if code is None:
            raise ValueError("Invalid value for 'code', must not be 'None'")
        self._code = code

    @property
    def name(self) -> "str | None | Unset_Type":
        """Gets the name of this GsaFolderCreationException.

        Returns
        -------
        str | None | Unset_Type
            The name of this GsaFolderCreationException.
        """
        return self._name

    @name.setter
    def name(self, name: "str | None | Unset_Type") -> None:
        """Sets the name of this GsaFolderCreationException.

        Parameters
        ----------
        name: str | None | Unset_Type
            The name of this GsaFolderCreationException.
        """
        self._name = name

    @property
    def folder_type(self) -> "GsaFolderType | Unset_Type":
        """Gets the folder_type of this GsaFolderCreationException.

        Returns
        -------
        GsaFolderType | Unset_Type
            The folder_type of this GsaFolderCreationException.
        """
        return self._folder_type

    @folder_type.setter
    def folder_type(self, folder_type: "GsaFolderType | Unset_Type") -> None:
        """Sets the folder_type of this GsaFolderCreationException.

        Parameters
        ----------
        folder_type: GsaFolderType | Unset_Type
            The folder_type of this GsaFolderCreationException.
        """
        # Field is not nullable
        if folder_type is None:
            raise ValueError("Invalid value for 'folder_type', must not be 'None'")
        self._folder_type = folder_type

    @property
    def errors(self) -> "list[GsaFolderErrorDetail] | None | Unset_Type":
        """Gets the errors of this GsaFolderCreationException.

        Returns
        -------
        list[GsaFolderErrorDetail] | None | Unset_Type
            The errors of this GsaFolderCreationException.
        """
        return self._errors

    @errors.setter
    def errors(self, errors: "list[GsaFolderErrorDetail] | None | Unset_Type") -> None:
        """Sets the errors of this GsaFolderCreationException.

        Parameters
        ----------
        errors: list[GsaFolderErrorDetail] | None | Unset_Type
            The errors of this GsaFolderCreationException.
        """
        self._errors = errors

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaFolderCreationException):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
