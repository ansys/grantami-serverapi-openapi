# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
MI Server API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional  # noqa: F401

from . import ModelBase, Unset, Unset_Type

if TYPE_CHECKING:
    from datetime import datetime
    import pathlib

    from . import *


class GsaDataUpdaterJob(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "database_key": "str",
        "id": "str",
        "job_type": "GsaDataUpdaterJobType",
        "status": "GsaDataUpdaterJobStatus",
        "time_started": "datetime",
        "description": "str",
        "error": "str",
        "name": "str",
        "project_name": "str",
        "time_completed": "datetime",
        "update_token": "GsaDataUpdateToken",
    }

    attribute_map: dict[str, str] = {
        "database_key": "databaseKey",
        "id": "id",
        "job_type": "jobType",
        "status": "status",
        "time_started": "timeStarted",
        "description": "description",
        "error": "error",
        "name": "name",
        "project_name": "projectName",
        "time_completed": "timeCompleted",
        "update_token": "updateToken",
    }

    subtype_mapping: dict[str, str] = {
        "updateToken": "GsaDataUpdateToken",
        "jobType": "GsaDataUpdaterJobType",
        "status": "GsaDataUpdaterJobStatus",
    }

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        database_key: "str",
        id: "str",
        job_type: "GsaDataUpdaterJobType",
        status: "GsaDataUpdaterJobStatus",
        time_started: "datetime",
        description: "str | None | Unset_Type" = Unset,
        error: "str | None | Unset_Type" = Unset,
        name: "str | None | Unset_Type" = Unset,
        project_name: "str | None | Unset_Type" = Unset,
        time_completed: "datetime | None | Unset_Type" = Unset,
        update_token: "GsaDataUpdateToken | Unset_Type" = Unset,
    ) -> None:
        """GsaDataUpdaterJob - a model defined in Swagger

        Parameters
        ----------
        database_key: str
        id: str
        job_type: GsaDataUpdaterJobType
        status: GsaDataUpdaterJobStatus
        time_started: datetime
        description: str | None, optional
        error: str | None, optional
        name: str | None, optional
        project_name: str | None, optional
        time_completed: datetime | None, optional
        update_token: GsaDataUpdateToken, optional
        """
        self._id: str
        self._update_token: GsaDataUpdateToken | Unset_Type = Unset
        self._job_type: GsaDataUpdaterJobType
        self._database_key: str
        self._name: str | None | Unset_Type = Unset
        self._description: str | None | Unset_Type = Unset
        self._status: GsaDataUpdaterJobStatus
        self._project_name: str | None | Unset_Type = Unset
        self._time_started: datetime
        self._time_completed: datetime | None | Unset_Type = Unset
        self._error: str | None | Unset_Type = Unset

        self.id = id
        if update_token is not Unset:
            self.update_token = update_token
        self.job_type = job_type
        self.database_key = database_key
        if name is not Unset:
            self.name = name
        if description is not Unset:
            self.description = description
        self.status = status
        if project_name is not Unset:
            self.project_name = project_name
        self.time_started = time_started
        if time_completed is not Unset:
            self.time_completed = time_completed
        if error is not Unset:
            self.error = error

    @property
    def id(self) -> "str":
        """Gets the id of this GsaDataUpdaterJob.
        Gets or sets the token which identifies this job.

        Returns
        -------
        str
            The id of this GsaDataUpdaterJob.
        """
        return self._id

    @id.setter
    def id(self, id: "str") -> None:
        """Sets the id of this GsaDataUpdaterJob.
        Gets or sets the token which identifies this job.

        Parameters
        ----------
        id: str
            The id of this GsaDataUpdaterJob.
        """
        # Field is not nullable
        if id is None:
            raise ValueError("Invalid value for 'id', must not be 'None'")
        # Field is required
        if id is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'id', must not be 'Unset'")
        self._id = id

    @property
    def update_token(self) -> "GsaDataUpdateToken | Unset_Type":
        """Gets the update_token of this GsaDataUpdaterJob.

        Returns
        -------
        GsaDataUpdateToken | Unset_Type
            The update_token of this GsaDataUpdaterJob.
        """
        return self._update_token

    @update_token.setter
    def update_token(self, update_token: "GsaDataUpdateToken | Unset_Type") -> None:
        """Sets the update_token of this GsaDataUpdaterJob.

        Parameters
        ----------
        update_token: GsaDataUpdateToken | Unset_Type
            The update_token of this GsaDataUpdaterJob.
        """
        # Field is not nullable
        if update_token is None:
            raise ValueError("Invalid value for 'update_token', must not be 'None'")
        self._update_token = update_token

    @property
    def job_type(self) -> "GsaDataUpdaterJobType":
        """Gets the job_type of this GsaDataUpdaterJob.

        Returns
        -------
        GsaDataUpdaterJobType
            The job_type of this GsaDataUpdaterJob.
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type: "GsaDataUpdaterJobType") -> None:
        """Sets the job_type of this GsaDataUpdaterJob.

        Parameters
        ----------
        job_type: GsaDataUpdaterJobType
            The job_type of this GsaDataUpdaterJob.
        """
        # Field is not nullable
        if job_type is None:
            raise ValueError("Invalid value for 'job_type', must not be 'None'")
        # Field is required
        if job_type is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'job_type', must not be 'Unset'")
        self._job_type = job_type

    @property
    def database_key(self) -> "str":
        """Gets the database_key of this GsaDataUpdaterJob.
        Gets or sets the key of the database against which this job has been / will be run.

        Returns
        -------
        str
            The database_key of this GsaDataUpdaterJob.
        """
        return self._database_key

    @database_key.setter
    def database_key(self, database_key: "str") -> None:
        """Sets the database_key of this GsaDataUpdaterJob.
        Gets or sets the key of the database against which this job has been / will be run.

        Parameters
        ----------
        database_key: str
            The database_key of this GsaDataUpdaterJob.
        """
        # Field is not nullable
        if database_key is None:
            raise ValueError("Invalid value for 'database_key', must not be 'None'")
        # Field is required
        if database_key is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'database_key', must not be 'Unset'")
        self._database_key = database_key

    @property
    def name(self) -> "str | None | Unset_Type":
        """Gets the name of this GsaDataUpdaterJob.
        Gets or sets the name of the update.

        Returns
        -------
        str | None | Unset_Type
            The name of this GsaDataUpdaterJob.
        """
        return self._name

    @name.setter
    def name(self, name: "str | None | Unset_Type") -> None:
        """Sets the name of this GsaDataUpdaterJob.
        Gets or sets the name of the update.

        Parameters
        ----------
        name: str | None | Unset_Type
            The name of this GsaDataUpdaterJob.
        """
        self._name = name

    @property
    def description(self) -> "str | None | Unset_Type":
        """Gets the description of this GsaDataUpdaterJob.
        Gets or sets the description of the job.

        Returns
        -------
        str | None | Unset_Type
            The description of this GsaDataUpdaterJob.
        """
        return self._description

    @description.setter
    def description(self, description: "str | None | Unset_Type") -> None:
        """Sets the description of this GsaDataUpdaterJob.
        Gets or sets the description of the job.

        Parameters
        ----------
        description: str | None | Unset_Type
            The description of this GsaDataUpdaterJob.
        """
        self._description = description

    @property
    def status(self) -> "GsaDataUpdaterJobStatus":
        """Gets the status of this GsaDataUpdaterJob.

        Returns
        -------
        GsaDataUpdaterJobStatus
            The status of this GsaDataUpdaterJob.
        """
        return self._status

    @status.setter
    def status(self, status: "GsaDataUpdaterJobStatus") -> None:
        """Sets the status of this GsaDataUpdaterJob.

        Parameters
        ----------
        status: GsaDataUpdaterJobStatus
            The status of this GsaDataUpdaterJob.
        """
        # Field is not nullable
        if status is None:
            raise ValueError("Invalid value for 'status', must not be 'None'")
        # Field is required
        if status is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'status', must not be 'Unset'")
        self._status = status

    @property
    def project_name(self) -> "str | None | Unset_Type":
        """Gets the project_name of this GsaDataUpdaterJob.
        Gets or sets the project.

        Returns
        -------
        str | None | Unset_Type
            The project_name of this GsaDataUpdaterJob.
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name: "str | None | Unset_Type") -> None:
        """Sets the project_name of this GsaDataUpdaterJob.
        Gets or sets the project.

        Parameters
        ----------
        project_name: str | None | Unset_Type
            The project_name of this GsaDataUpdaterJob.
        """
        self._project_name = project_name

    @property
    def time_started(self) -> "datetime":
        """Gets the time_started of this GsaDataUpdaterJob.
        Gets or sets the time that the job started.

        Returns
        -------
        datetime
            The time_started of this GsaDataUpdaterJob.
        """
        return self._time_started

    @time_started.setter
    def time_started(self, time_started: "datetime") -> None:
        """Sets the time_started of this GsaDataUpdaterJob.
        Gets or sets the time that the job started.

        Parameters
        ----------
        time_started: datetime
            The time_started of this GsaDataUpdaterJob.
        """
        # Field is not nullable
        if time_started is None:
            raise ValueError("Invalid value for 'time_started', must not be 'None'")
        # Field is required
        if time_started is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'time_started', must not be 'Unset'")
        self._time_started = time_started

    @property
    def time_completed(self) -> "datetime | None | Unset_Type":
        """Gets the time_completed of this GsaDataUpdaterJob.
        Gets or sets the time that the job completed.

        Returns
        -------
        datetime | None | Unset_Type
            The time_completed of this GsaDataUpdaterJob.
        """
        return self._time_completed

    @time_completed.setter
    def time_completed(self, time_completed: "datetime | None | Unset_Type") -> None:
        """Sets the time_completed of this GsaDataUpdaterJob.
        Gets or sets the time that the job completed.

        Parameters
        ----------
        time_completed: datetime | None | Unset_Type
            The time_completed of this GsaDataUpdaterJob.
        """
        self._time_completed = time_completed

    @property
    def error(self) -> "str | None | Unset_Type":
        """Gets the error of this GsaDataUpdaterJob.
        The error that occurred (if any) when the job was run. If the  job has not yet been run, or if the job completed successfully,  this will be null.

        Returns
        -------
        str | None | Unset_Type
            The error of this GsaDataUpdaterJob.
        """
        return self._error

    @error.setter
    def error(self, error: "str | None | Unset_Type") -> None:
        """Sets the error of this GsaDataUpdaterJob.
        The error that occurred (if any) when the job was run. If the  job has not yet been run, or if the job completed successfully,  this will be null.

        Parameters
        ----------
        error: str | None | Unset_Type
            The error of this GsaDataUpdaterJob.
        """
        self._error = error

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaDataUpdaterJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
