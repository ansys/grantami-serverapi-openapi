# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
MI Server API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional  # noqa: F401

from . import ModelBase, Unset, Unset_Type

if TYPE_CHECKING:
    from datetime import datetime
    import pathlib

    from . import *


class GsaEmailGenerationSettings(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "allowed_domains": "str",
        "last_run_date_time": "datetime",
        "maximum_notifications": "int",
        "per_mail_throttle": "int",
        "per_mail_timeout": "int",
        "restrict_to_allowed_domains": "bool",
        "sender_address": "str",
        "subject_line_template": "str",
        "viewer_url": "str",
    }

    attribute_map: dict[str, str] = {
        "allowed_domains": "allowedDomains",
        "last_run_date_time": "lastRunDateTime",
        "maximum_notifications": "maximumNotifications",
        "per_mail_throttle": "perMailThrottle",
        "per_mail_timeout": "perMailTimeout",
        "restrict_to_allowed_domains": "restrictToAllowedDomains",
        "sender_address": "senderAddress",
        "subject_line_template": "subjectLineTemplate",
        "viewer_url": "viewerUrl",
    }

    subtype_mapping: dict[str, str] = {}

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        allowed_domains: "str | None | Unset_Type" = Unset,
        last_run_date_time: "datetime | Unset_Type" = Unset,
        maximum_notifications: "int | Unset_Type" = Unset,
        per_mail_throttle: "int | Unset_Type" = Unset,
        per_mail_timeout: "int | Unset_Type" = Unset,
        restrict_to_allowed_domains: "bool | Unset_Type" = Unset,
        sender_address: "str | None | Unset_Type" = Unset,
        subject_line_template: "str | None | Unset_Type" = Unset,
        viewer_url: "str | None | Unset_Type" = Unset,
    ) -> None:
        """GsaEmailGenerationSettings - a model defined in Swagger

        Parameters
        ----------
        allowed_domains: str | None, optional
        last_run_date_time: datetime, optional
        maximum_notifications: int, optional
        per_mail_throttle: int, optional
        per_mail_timeout: int, optional
        restrict_to_allowed_domains: bool, optional
        sender_address: str | None, optional
        subject_line_template: str | None, optional
        viewer_url: str | None, optional
        """
        self._viewer_url: str | None | Unset_Type = Unset
        self._sender_address: str | None | Unset_Type = Unset
        self._restrict_to_allowed_domains: bool | Unset_Type = Unset
        self._allowed_domains: str | None | Unset_Type = Unset
        self._per_mail_timeout: int | Unset_Type = Unset
        self._per_mail_throttle: int | Unset_Type = Unset
        self._last_run_date_time: datetime | Unset_Type = Unset
        self._subject_line_template: str | None | Unset_Type = Unset
        self._maximum_notifications: int | Unset_Type = Unset

        if viewer_url is not Unset:
            self.viewer_url = viewer_url
        if sender_address is not Unset:
            self.sender_address = sender_address
        if restrict_to_allowed_domains is not Unset:
            self.restrict_to_allowed_domains = restrict_to_allowed_domains
        if allowed_domains is not Unset:
            self.allowed_domains = allowed_domains
        if per_mail_timeout is not Unset:
            self.per_mail_timeout = per_mail_timeout
        if per_mail_throttle is not Unset:
            self.per_mail_throttle = per_mail_throttle
        if last_run_date_time is not Unset:
            self.last_run_date_time = last_run_date_time
        if subject_line_template is not Unset:
            self.subject_line_template = subject_line_template
        if maximum_notifications is not Unset:
            self.maximum_notifications = maximum_notifications

    @property
    def viewer_url(self) -> "str | None | Unset_Type":
        """Gets the viewer_url of this GsaEmailGenerationSettings.

        Returns
        -------
        str | None | Unset_Type
            The viewer_url of this GsaEmailGenerationSettings.
        """
        return self._viewer_url

    @viewer_url.setter
    def viewer_url(self, viewer_url: "str | None | Unset_Type") -> None:
        """Sets the viewer_url of this GsaEmailGenerationSettings.

        Parameters
        ----------
        viewer_url: str | None | Unset_Type
            The viewer_url of this GsaEmailGenerationSettings.
        """
        self._viewer_url = viewer_url

    @property
    def sender_address(self) -> "str | None | Unset_Type":
        """Gets the sender_address of this GsaEmailGenerationSettings.

        Returns
        -------
        str | None | Unset_Type
            The sender_address of this GsaEmailGenerationSettings.
        """
        return self._sender_address

    @sender_address.setter
    def sender_address(self, sender_address: "str | None | Unset_Type") -> None:
        """Sets the sender_address of this GsaEmailGenerationSettings.

        Parameters
        ----------
        sender_address: str | None | Unset_Type
            The sender_address of this GsaEmailGenerationSettings.
        """
        self._sender_address = sender_address

    @property
    def restrict_to_allowed_domains(self) -> "bool | Unset_Type":
        """Gets the restrict_to_allowed_domains of this GsaEmailGenerationSettings.

        Returns
        -------
        bool | Unset_Type
            The restrict_to_allowed_domains of this GsaEmailGenerationSettings.
        """
        return self._restrict_to_allowed_domains

    @restrict_to_allowed_domains.setter
    def restrict_to_allowed_domains(self, restrict_to_allowed_domains: "bool | Unset_Type") -> None:
        """Sets the restrict_to_allowed_domains of this GsaEmailGenerationSettings.

        Parameters
        ----------
        restrict_to_allowed_domains: bool | Unset_Type
            The restrict_to_allowed_domains of this GsaEmailGenerationSettings.
        """
        # Field is not nullable
        if restrict_to_allowed_domains is None:
            raise ValueError("Invalid value for 'restrict_to_allowed_domains', must not be 'None'")
        self._restrict_to_allowed_domains = restrict_to_allowed_domains

    @property
    def allowed_domains(self) -> "str | None | Unset_Type":
        """Gets the allowed_domains of this GsaEmailGenerationSettings.

        Returns
        -------
        str | None | Unset_Type
            The allowed_domains of this GsaEmailGenerationSettings.
        """
        return self._allowed_domains

    @allowed_domains.setter
    def allowed_domains(self, allowed_domains: "str | None | Unset_Type") -> None:
        """Sets the allowed_domains of this GsaEmailGenerationSettings.

        Parameters
        ----------
        allowed_domains: str | None | Unset_Type
            The allowed_domains of this GsaEmailGenerationSettings.
        """
        self._allowed_domains = allowed_domains

    @property
    def per_mail_timeout(self) -> "int | Unset_Type":
        """Gets the per_mail_timeout of this GsaEmailGenerationSettings.

        Returns
        -------
        int | Unset_Type
            The per_mail_timeout of this GsaEmailGenerationSettings.
        """
        return self._per_mail_timeout

    @per_mail_timeout.setter
    def per_mail_timeout(self, per_mail_timeout: "int | Unset_Type") -> None:
        """Sets the per_mail_timeout of this GsaEmailGenerationSettings.

        Parameters
        ----------
        per_mail_timeout: int | Unset_Type
            The per_mail_timeout of this GsaEmailGenerationSettings.
        """
        # Field is not nullable
        if per_mail_timeout is None:
            raise ValueError("Invalid value for 'per_mail_timeout', must not be 'None'")
        self._per_mail_timeout = per_mail_timeout

    @property
    def per_mail_throttle(self) -> "int | Unset_Type":
        """Gets the per_mail_throttle of this GsaEmailGenerationSettings.

        Returns
        -------
        int | Unset_Type
            The per_mail_throttle of this GsaEmailGenerationSettings.
        """
        return self._per_mail_throttle

    @per_mail_throttle.setter
    def per_mail_throttle(self, per_mail_throttle: "int | Unset_Type") -> None:
        """Sets the per_mail_throttle of this GsaEmailGenerationSettings.

        Parameters
        ----------
        per_mail_throttle: int | Unset_Type
            The per_mail_throttle of this GsaEmailGenerationSettings.
        """
        # Field is not nullable
        if per_mail_throttle is None:
            raise ValueError("Invalid value for 'per_mail_throttle', must not be 'None'")
        self._per_mail_throttle = per_mail_throttle

    @property
    def last_run_date_time(self) -> "datetime | Unset_Type":
        """Gets the last_run_date_time of this GsaEmailGenerationSettings.

        Returns
        -------
        datetime | Unset_Type
            The last_run_date_time of this GsaEmailGenerationSettings.
        """
        return self._last_run_date_time

    @last_run_date_time.setter
    def last_run_date_time(self, last_run_date_time: "datetime | Unset_Type") -> None:
        """Sets the last_run_date_time of this GsaEmailGenerationSettings.

        Parameters
        ----------
        last_run_date_time: datetime | Unset_Type
            The last_run_date_time of this GsaEmailGenerationSettings.
        """
        # Field is not nullable
        if last_run_date_time is None:
            raise ValueError("Invalid value for 'last_run_date_time', must not be 'None'")
        self._last_run_date_time = last_run_date_time

    @property
    def subject_line_template(self) -> "str | None | Unset_Type":
        """Gets the subject_line_template of this GsaEmailGenerationSettings.

        Returns
        -------
        str | None | Unset_Type
            The subject_line_template of this GsaEmailGenerationSettings.
        """
        return self._subject_line_template

    @subject_line_template.setter
    def subject_line_template(self, subject_line_template: "str | None | Unset_Type") -> None:
        """Sets the subject_line_template of this GsaEmailGenerationSettings.

        Parameters
        ----------
        subject_line_template: str | None | Unset_Type
            The subject_line_template of this GsaEmailGenerationSettings.
        """
        self._subject_line_template = subject_line_template

    @property
    def maximum_notifications(self) -> "int | Unset_Type":
        """Gets the maximum_notifications of this GsaEmailGenerationSettings.

        Returns
        -------
        int | Unset_Type
            The maximum_notifications of this GsaEmailGenerationSettings.
        """
        return self._maximum_notifications

    @maximum_notifications.setter
    def maximum_notifications(self, maximum_notifications: "int | Unset_Type") -> None:
        """Sets the maximum_notifications of this GsaEmailGenerationSettings.

        Parameters
        ----------
        maximum_notifications: int | Unset_Type
            The maximum_notifications of this GsaEmailGenerationSettings.
        """
        # Field is not nullable
        if maximum_notifications is None:
            raise ValueError("Invalid value for 'maximum_notifications', must not be 'None'")
        self._maximum_notifications = maximum_notifications

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaEmailGenerationSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
