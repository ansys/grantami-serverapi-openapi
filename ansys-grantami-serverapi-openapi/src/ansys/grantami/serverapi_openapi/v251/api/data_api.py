# Copyright (C) 2023 - 2024 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional, Union  # noqa: F401

from . import ApiBase

if TYPE_CHECKING:
    import pathlib

    from ..models import *


class DataApi(ApiBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def append_values_for_discrete_attribute(
        self,
        *,
        database_key: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        body: "Optional[GsaAppendDiscreteValues]" = None,
    ) -> "Union[GsaDiscreteDatum, None]":
        """Append values to the multi-valued discrete datum for a given discrete attribute and record history in a given database.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        record_history_guid: str
        attribute_guid: str
        body: GsaAppendDiscreteValues

        Returns
        -------
        Union[GsaDiscreteDatum, None]
        """
        data = self._append_values_for_discrete_attribute_with_http_info(
            database_key, record_history_guid, attribute_guid, body, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _append_values_for_discrete_attribute_with_http_info(
        self,
        database_key: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        body: "Optional[GsaAppendDiscreteValues]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "record_history_guid",
            "attribute_guid",
            "body",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method append_values_for_discrete_attribute"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'append_values_for_discrete_attribute'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'append_values_for_discrete_attribute'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'append_values_for_discrete_attribute'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        if "body" in params and body is not None:
            body_params = params["body"]
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header 'Content-Type'
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            ["application/json-patch+json", "application/json", "text/json", "application/*+json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaDiscreteDatum",
            400: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/record-histories/{record-history-guid}/attributes/{attribute-guid}/discrete:append-values",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def append_values_for_discrete_attribute_from_table(
        self,
        *,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        body: "Optional[GsaAppendDiscreteValues]" = None,
    ) -> "Union[GsaDiscreteDatum, None]":
        """Append values to the multi-valued discrete datum for a given discrete attribute and record history in a given database and table.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        table_guid: str
        record_history_guid: str
        attribute_guid: str
        body: GsaAppendDiscreteValues

        Returns
        -------
        Union[GsaDiscreteDatum, None]
        """
        data = self._append_values_for_discrete_attribute_from_table_with_http_info(
            database_key,
            table_guid,
            record_history_guid,
            attribute_guid,
            body,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _append_values_for_discrete_attribute_from_table_with_http_info(
        self,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        body: "Optional[GsaAppendDiscreteValues]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "table_guid",
            "record_history_guid",
            "attribute_guid",
            "body",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method append_values_for_discrete_attribute_from_table"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'append_values_for_discrete_attribute_from_table'"
            )
        # verify the required parameter "table_guid" is set
        if "table_guid" not in params or params["table_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'table_guid' when calling 'append_values_for_discrete_attribute_from_table'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'append_values_for_discrete_attribute_from_table'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'append_values_for_discrete_attribute_from_table'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "table_guid" in params and table_guid is not None:
            path_params["table-guid"] = params["table_guid"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        if "body" in params and body is not None:
            body_params = params["body"]
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header 'Content-Type'
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            ["application/json-patch+json", "application/json", "text/json", "application/*+json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaDiscreteDatum",
            400: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/tables/{table-guid}/record-histories/{record-history-guid}/attributes/{attribute-guid}/discrete:append-values",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def append_values_for_point_attribute(
        self,
        *,
        database_key: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        body: "Optional[GsaAppendPointValues]" = None,
    ) -> "Union[GsaPointDatum, None]":
        """Append values to the multi-valued point datum for a given point attribute and record history in a given database.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        record_history_guid: str
        attribute_guid: str
        body: GsaAppendPointValues

        Returns
        -------
        Union[GsaPointDatum, None]
        """
        data = self._append_values_for_point_attribute_with_http_info(
            database_key, record_history_guid, attribute_guid, body, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _append_values_for_point_attribute_with_http_info(
        self,
        database_key: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        body: "Optional[GsaAppendPointValues]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "record_history_guid",
            "attribute_guid",
            "body",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method append_values_for_point_attribute"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'append_values_for_point_attribute'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'append_values_for_point_attribute'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'append_values_for_point_attribute'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        if "body" in params and body is not None:
            body_params = params["body"]
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header 'Content-Type'
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            ["application/json-patch+json", "application/json", "text/json", "application/*+json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaPointDatum",
            400: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/record-histories/{record-history-guid}/attributes/{attribute-guid}/point:append-values",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def append_values_for_point_attribute_from_table(
        self,
        *,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        body: "Optional[GsaAppendPointValues]" = None,
    ) -> "Union[GsaPointDatum, None]":
        """Append values to the multi-valued point datum for a given point attribute and record history in a given database and table.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        table_guid: str
        record_history_guid: str
        attribute_guid: str
        body: GsaAppendPointValues

        Returns
        -------
        Union[GsaPointDatum, None]
        """
        data = self._append_values_for_point_attribute_from_table_with_http_info(
            database_key,
            table_guid,
            record_history_guid,
            attribute_guid,
            body,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _append_values_for_point_attribute_from_table_with_http_info(
        self,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        body: "Optional[GsaAppendPointValues]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "table_guid",
            "record_history_guid",
            "attribute_guid",
            "body",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method append_values_for_point_attribute_from_table"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'append_values_for_point_attribute_from_table'"
            )
        # verify the required parameter "table_guid" is set
        if "table_guid" not in params or params["table_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'table_guid' when calling 'append_values_for_point_attribute_from_table'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'append_values_for_point_attribute_from_table'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'append_values_for_point_attribute_from_table'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "table_guid" in params and table_guid is not None:
            path_params["table-guid"] = params["table_guid"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        if "body" in params and body is not None:
            body_params = params["body"]
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header 'Content-Type'
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            ["application/json-patch+json", "application/json", "text/json", "application/*+json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaPointDatum",
            400: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/tables/{table-guid}/record-histories/{record-history-guid}/attributes/{attribute-guid}/point:append-values",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def delete_cell_datum_for_tabular_attribute(
        self,
        *,
        database_key: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
    ) -> "None":
        """Deletes a cell datum for a given record history, tabular attribute, row and column in a given database.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        record_history_guid: str
        attribute_guid: str
        row_guid: str
        column_guid: str

        Returns
        -------
        None
        """
        data = self._delete_cell_datum_for_tabular_attribute_with_http_info(
            database_key,
            record_history_guid,
            attribute_guid,
            row_guid,
            column_guid,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _delete_cell_datum_for_tabular_attribute_with_http_info(
        self,
        database_key: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "record_history_guid",
            "attribute_guid",
            "row_guid",
            "column_guid",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method delete_cell_datum_for_tabular_attribute"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'delete_cell_datum_for_tabular_attribute'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'delete_cell_datum_for_tabular_attribute'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'delete_cell_datum_for_tabular_attribute'"
            )
        # verify the required parameter "row_guid" is set
        if "row_guid" not in params or params["row_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'row_guid' when calling 'delete_cell_datum_for_tabular_attribute'"
            )
        # verify the required parameter "column_guid" is set
        if "column_guid" not in params or params["column_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'column_guid' when calling 'delete_cell_datum_for_tabular_attribute'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]
        if "row_guid" in params and row_guid is not None:
            path_params["row-guid"] = params["row_guid"]
        if "column_guid" in params and column_guid is not None:
            path_params["column-guid"] = params["column_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None

        response_type_map: dict[int, Optional[str]] = {
            200: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/record-histories/{record-history-guid}/attributes/{attribute-guid}/rows/{row-guid}/columns/{column-guid}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def delete_cell_datum_for_tabular_attribute_from_table(
        self,
        *,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
    ) -> "None":
        """Deletes a cell datum for a given record history, tabular attribute, row and column in a given database and table.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        table_guid: str
        record_history_guid: str
        attribute_guid: str
        row_guid: str
        column_guid: str

        Returns
        -------
        None
        """
        data = self._delete_cell_datum_for_tabular_attribute_from_table_with_http_info(
            database_key,
            table_guid,
            record_history_guid,
            attribute_guid,
            row_guid,
            column_guid,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _delete_cell_datum_for_tabular_attribute_from_table_with_http_info(
        self,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "table_guid",
            "record_history_guid",
            "attribute_guid",
            "row_guid",
            "column_guid",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method delete_cell_datum_for_tabular_attribute_from_table"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'delete_cell_datum_for_tabular_attribute_from_table'"
            )
        # verify the required parameter "table_guid" is set
        if "table_guid" not in params or params["table_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'table_guid' when calling 'delete_cell_datum_for_tabular_attribute_from_table'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'delete_cell_datum_for_tabular_attribute_from_table'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'delete_cell_datum_for_tabular_attribute_from_table'"
            )
        # verify the required parameter "row_guid" is set
        if "row_guid" not in params or params["row_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'row_guid' when calling 'delete_cell_datum_for_tabular_attribute_from_table'"
            )
        # verify the required parameter "column_guid" is set
        if "column_guid" not in params or params["column_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'column_guid' when calling 'delete_cell_datum_for_tabular_attribute_from_table'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "table_guid" in params and table_guid is not None:
            path_params["table-guid"] = params["table_guid"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]
        if "row_guid" in params and row_guid is not None:
            path_params["row-guid"] = params["row_guid"]
        if "column_guid" in params and column_guid is not None:
            path_params["column-guid"] = params["column_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None

        response_type_map: dict[int, Optional[str]] = {
            200: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/tables/{table-guid}/record-histories/{record-history-guid}/attributes/{attribute-guid}/rows/{row-guid}/columns/{column-guid}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def delete_datum_for_attribute(
        self, *, database_key: "str", record_history_guid: "str", attribute_guid: "str"
    ) -> "None":
        """Deletes a datum for a given attribute and record history, along with all meta attributes datums associated with it, in a given database.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        record_history_guid: str
        attribute_guid: str

        Returns
        -------
        None
        """
        data = self._delete_datum_for_attribute_with_http_info(
            database_key, record_history_guid, attribute_guid, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _delete_datum_for_attribute_with_http_info(
        self, database_key: "str", record_history_guid: "str", attribute_guid: "str", **kwargs: Any
    ) -> Any:
        all_params = [
            "database_key",
            "record_history_guid",
            "attribute_guid",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method delete_datum_for_attribute"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'delete_datum_for_attribute'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'delete_datum_for_attribute'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'delete_datum_for_attribute'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None

        response_type_map: dict[int, Optional[str]] = {
            200: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/record-histories/{record-history-guid}/attributes/{attribute-guid}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def delete_datum_for_attribute_from_table(
        self,
        *,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
    ) -> "None":
        """Deletes a datum for a given attribute and record history, along with all meta attributes datums associated with it, in a given database and table.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        table_guid: str
        record_history_guid: str
        attribute_guid: str

        Returns
        -------
        None
        """
        data = self._delete_datum_for_attribute_from_table_with_http_info(
            database_key,
            table_guid,
            record_history_guid,
            attribute_guid,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _delete_datum_for_attribute_from_table_with_http_info(
        self,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "table_guid",
            "record_history_guid",
            "attribute_guid",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method delete_datum_for_attribute_from_table"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'delete_datum_for_attribute_from_table'"
            )
        # verify the required parameter "table_guid" is set
        if "table_guid" not in params or params["table_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'table_guid' when calling 'delete_datum_for_attribute_from_table'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'delete_datum_for_attribute_from_table'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'delete_datum_for_attribute_from_table'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "table_guid" in params and table_guid is not None:
            path_params["table-guid"] = params["table_guid"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None

        response_type_map: dict[int, Optional[str]] = {
            200: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/tables/{table-guid}/record-histories/{record-history-guid}/attributes/{attribute-guid}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def export_binary_data_for_latest(
        self,
        *,
        database_key: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        max_width: "Optional[int]" = None,
        max_height: "Optional[int]" = None,
    ) -> "Union[None, str]":
        """Get the binary data for a given attribute and the latest version of a record history in given database. Must be a file or picture attribute.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        record_history_guid: str
        attribute_guid: str
        mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.
        x_ansys_vc_mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.
        max_width: int
        max_height: int

        Returns
        -------
        Union[None, str]
        """
        data = self._export_binary_data_for_latest_with_http_info(
            database_key,
            record_history_guid,
            attribute_guid,
            mode,
            x_ansys_vc_mode,
            max_width,
            max_height,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _export_binary_data_for_latest_with_http_info(
        self,
        database_key: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        max_width: "Optional[int]" = None,
        max_height: "Optional[int]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "record_history_guid",
            "attribute_guid",
            "mode",
            "x_ansys_vc_mode",
            "max_width",
            "max_height",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method export_binary_data_for_latest"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'export_binary_data_for_latest'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'export_binary_data_for_latest'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'export_binary_data_for_latest'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]

        query_params: list[Any] = []
        if "mode" in params and mode is not None:
            query_params.append(("mode", params["mode"]))
        if "max_width" in params and max_width is not None:
            query_params.append(("maxWidth", params["max_width"]))
        if "max_height" in params and max_height is not None:
            query_params.append(("maxHeight", params["max_height"]))

        header_params: dict[str, Any] = {}
        if "x_ansys_vc_mode" in params and x_ansys_vc_mode is not None:
            header_params["X-Ansys-VC-Mode"] = params["x_ansys_vc_mode"]

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/octet-stream", "application/json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "file",
            400: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/record-histories/{record-history-guid}/latest/attributes/{attribute-guid}:export",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def export_binary_data_for_latest_from_table(
        self,
        *,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        max_width: "Optional[int]" = None,
        max_height: "Optional[int]" = None,
    ) -> "Union[None, str]":
        """Get the binary data for a given attribute and the latest version of a record history in given database and table. Must be a file or picture attribute.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        table_guid: str
        record_history_guid: str
        attribute_guid: str
        mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.
        x_ansys_vc_mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.
        max_width: int
        max_height: int

        Returns
        -------
        Union[None, str]
        """
        data = self._export_binary_data_for_latest_from_table_with_http_info(
            database_key,
            table_guid,
            record_history_guid,
            attribute_guid,
            mode,
            x_ansys_vc_mode,
            max_width,
            max_height,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _export_binary_data_for_latest_from_table_with_http_info(
        self,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        max_width: "Optional[int]" = None,
        max_height: "Optional[int]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "table_guid",
            "record_history_guid",
            "attribute_guid",
            "mode",
            "x_ansys_vc_mode",
            "max_width",
            "max_height",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method export_binary_data_for_latest_from_table"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'export_binary_data_for_latest_from_table'"
            )
        # verify the required parameter "table_guid" is set
        if "table_guid" not in params or params["table_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'table_guid' when calling 'export_binary_data_for_latest_from_table'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'export_binary_data_for_latest_from_table'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'export_binary_data_for_latest_from_table'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "table_guid" in params and table_guid is not None:
            path_params["table-guid"] = params["table_guid"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]

        query_params: list[Any] = []
        if "mode" in params and mode is not None:
            query_params.append(("mode", params["mode"]))
        if "max_width" in params and max_width is not None:
            query_params.append(("maxWidth", params["max_width"]))
        if "max_height" in params and max_height is not None:
            query_params.append(("maxHeight", params["max_height"]))

        header_params: dict[str, Any] = {}
        if "x_ansys_vc_mode" in params and x_ansys_vc_mode is not None:
            header_params["X-Ansys-VC-Mode"] = params["x_ansys_vc_mode"]

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/octet-stream", "application/json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "file",
            400: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/tables/{table-guid}/record-histories/{record-history-guid}/latest/attributes/{attribute-guid}:export",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def export_binary_data_for_version(
        self,
        *,
        database_key: "str",
        record_history_guid: "str",
        record_version_guid: "str",
        attribute_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        max_width: "Optional[int]" = None,
        max_height: "Optional[int]" = None,
    ) -> "Union[None, str]":
        """Get the binary data for a given database, record history, record version and attribute. Must be a file or picture attribute.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        record_history_guid: str
        record_version_guid: str
        attribute_guid: str
        mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.
        x_ansys_vc_mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.
        max_width: int
        max_height: int

        Returns
        -------
        Union[None, str]
        """
        data = self._export_binary_data_for_version_with_http_info(
            database_key,
            record_history_guid,
            record_version_guid,
            attribute_guid,
            mode,
            x_ansys_vc_mode,
            max_width,
            max_height,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _export_binary_data_for_version_with_http_info(
        self,
        database_key: "str",
        record_history_guid: "str",
        record_version_guid: "str",
        attribute_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        max_width: "Optional[int]" = None,
        max_height: "Optional[int]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "record_history_guid",
            "record_version_guid",
            "attribute_guid",
            "mode",
            "x_ansys_vc_mode",
            "max_width",
            "max_height",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method export_binary_data_for_version"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'export_binary_data_for_version'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'export_binary_data_for_version'"
            )
        # verify the required parameter "record_version_guid" is set
        if "record_version_guid" not in params or params["record_version_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_version_guid' when calling 'export_binary_data_for_version'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'export_binary_data_for_version'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "record_version_guid" in params and record_version_guid is not None:
            path_params["record-version-guid"] = params["record_version_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]

        query_params: list[Any] = []
        if "mode" in params and mode is not None:
            query_params.append(("mode", params["mode"]))
        if "max_width" in params and max_width is not None:
            query_params.append(("maxWidth", params["max_width"]))
        if "max_height" in params and max_height is not None:
            query_params.append(("maxHeight", params["max_height"]))

        header_params: dict[str, Any] = {}
        if "x_ansys_vc_mode" in params and x_ansys_vc_mode is not None:
            header_params["X-Ansys-VC-Mode"] = params["x_ansys_vc_mode"]

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/octet-stream", "application/json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "file",
            400: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/record-histories/{record-history-guid}/record-versions/{record-version-guid}/attributes/{attribute-guid}:export",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def export_binary_data_for_version_from_table(
        self,
        *,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        record_version_guid: "str",
        attribute_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        max_width: "Optional[int]" = None,
        max_height: "Optional[int]" = None,
    ) -> "Union[None, str]":
        """Get the binary data for a given database, table, record history, record version and attribute. Must be a file or picture attribute.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        table_guid: str
        record_history_guid: str
        record_version_guid: str
        attribute_guid: str
        mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.
        x_ansys_vc_mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.
        max_width: int
        max_height: int

        Returns
        -------
        Union[None, str]
        """
        data = self._export_binary_data_for_version_from_table_with_http_info(
            database_key,
            table_guid,
            record_history_guid,
            record_version_guid,
            attribute_guid,
            mode,
            x_ansys_vc_mode,
            max_width,
            max_height,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _export_binary_data_for_version_from_table_with_http_info(
        self,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        record_version_guid: "str",
        attribute_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        max_width: "Optional[int]" = None,
        max_height: "Optional[int]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "table_guid",
            "record_history_guid",
            "record_version_guid",
            "attribute_guid",
            "mode",
            "x_ansys_vc_mode",
            "max_width",
            "max_height",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method export_binary_data_for_version_from_table"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'export_binary_data_for_version_from_table'"
            )
        # verify the required parameter "table_guid" is set
        if "table_guid" not in params or params["table_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'table_guid' when calling 'export_binary_data_for_version_from_table'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'export_binary_data_for_version_from_table'"
            )
        # verify the required parameter "record_version_guid" is set
        if "record_version_guid" not in params or params["record_version_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_version_guid' when calling 'export_binary_data_for_version_from_table'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'export_binary_data_for_version_from_table'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "table_guid" in params and table_guid is not None:
            path_params["table-guid"] = params["table_guid"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "record_version_guid" in params and record_version_guid is not None:
            path_params["record-version-guid"] = params["record_version_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]

        query_params: list[Any] = []
        if "mode" in params and mode is not None:
            query_params.append(("mode", params["mode"]))
        if "max_width" in params and max_width is not None:
            query_params.append(("maxWidth", params["max_width"]))
        if "max_height" in params and max_height is not None:
            query_params.append(("maxHeight", params["max_height"]))

        header_params: dict[str, Any] = {}
        if "x_ansys_vc_mode" in params and x_ansys_vc_mode is not None:
            header_params["X-Ansys-VC-Mode"] = params["x_ansys_vc_mode"]

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/octet-stream", "application/json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "file",
            400: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/tables/{table-guid}/record-histories/{record-history-guid}/record-versions/{record-version-guid}/attributes/{attribute-guid}:export",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def export_cell_binary_data_for_latest(
        self,
        *,
        database_key: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        max_width: "Optional[int]" = None,
        max_height: "Optional[int]" = None,
    ) -> "Union[None, str]":
        """Get the binary data for a given tabular attribute, row and column and the latest version of a record history in given database. Must be a file or picture column.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        record_history_guid: str
        attribute_guid: str
        row_guid: str
        column_guid: str
        mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.
        x_ansys_vc_mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.
        max_width: int
        max_height: int

        Returns
        -------
        Union[None, str]
        """
        data = self._export_cell_binary_data_for_latest_with_http_info(
            database_key,
            record_history_guid,
            attribute_guid,
            row_guid,
            column_guid,
            mode,
            x_ansys_vc_mode,
            max_width,
            max_height,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _export_cell_binary_data_for_latest_with_http_info(
        self,
        database_key: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        max_width: "Optional[int]" = None,
        max_height: "Optional[int]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "record_history_guid",
            "attribute_guid",
            "row_guid",
            "column_guid",
            "mode",
            "x_ansys_vc_mode",
            "max_width",
            "max_height",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method export_cell_binary_data_for_latest"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'export_cell_binary_data_for_latest'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'export_cell_binary_data_for_latest'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'export_cell_binary_data_for_latest'"
            )
        # verify the required parameter "row_guid" is set
        if "row_guid" not in params or params["row_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'row_guid' when calling 'export_cell_binary_data_for_latest'"
            )
        # verify the required parameter "column_guid" is set
        if "column_guid" not in params or params["column_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'column_guid' when calling 'export_cell_binary_data_for_latest'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]
        if "row_guid" in params and row_guid is not None:
            path_params["row-guid"] = params["row_guid"]
        if "column_guid" in params and column_guid is not None:
            path_params["column-guid"] = params["column_guid"]

        query_params: list[Any] = []
        if "mode" in params and mode is not None:
            query_params.append(("mode", params["mode"]))
        if "max_width" in params and max_width is not None:
            query_params.append(("maxWidth", params["max_width"]))
        if "max_height" in params and max_height is not None:
            query_params.append(("maxHeight", params["max_height"]))

        header_params: dict[str, Any] = {}
        if "x_ansys_vc_mode" in params and x_ansys_vc_mode is not None:
            header_params["X-Ansys-VC-Mode"] = params["x_ansys_vc_mode"]

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/octet-stream", "application/json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "file",
            400: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/record-histories/{record-history-guid}/latest/attributes/{attribute-guid}/rows/{row-guid}/columns/{column-guid}:export",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def export_cell_binary_data_for_latest_from_table(
        self,
        *,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        max_width: "Optional[int]" = None,
        max_height: "Optional[int]" = None,
    ) -> "Union[None, str]":
        """Get the binary data for a given tabular attribute, row and column and the latest version of a record history in given database and table. Must be a file or picture column.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        table_guid: str
        record_history_guid: str
        attribute_guid: str
        row_guid: str
        column_guid: str
        mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.
        x_ansys_vc_mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.
        max_width: int
        max_height: int

        Returns
        -------
        Union[None, str]
        """
        data = self._export_cell_binary_data_for_latest_from_table_with_http_info(
            database_key,
            table_guid,
            record_history_guid,
            attribute_guid,
            row_guid,
            column_guid,
            mode,
            x_ansys_vc_mode,
            max_width,
            max_height,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _export_cell_binary_data_for_latest_from_table_with_http_info(
        self,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        max_width: "Optional[int]" = None,
        max_height: "Optional[int]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "table_guid",
            "record_history_guid",
            "attribute_guid",
            "row_guid",
            "column_guid",
            "mode",
            "x_ansys_vc_mode",
            "max_width",
            "max_height",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method export_cell_binary_data_for_latest_from_table"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'export_cell_binary_data_for_latest_from_table'"
            )
        # verify the required parameter "table_guid" is set
        if "table_guid" not in params or params["table_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'table_guid' when calling 'export_cell_binary_data_for_latest_from_table'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'export_cell_binary_data_for_latest_from_table'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'export_cell_binary_data_for_latest_from_table'"
            )
        # verify the required parameter "row_guid" is set
        if "row_guid" not in params or params["row_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'row_guid' when calling 'export_cell_binary_data_for_latest_from_table'"
            )
        # verify the required parameter "column_guid" is set
        if "column_guid" not in params or params["column_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'column_guid' when calling 'export_cell_binary_data_for_latest_from_table'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "table_guid" in params and table_guid is not None:
            path_params["table-guid"] = params["table_guid"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]
        if "row_guid" in params and row_guid is not None:
            path_params["row-guid"] = params["row_guid"]
        if "column_guid" in params and column_guid is not None:
            path_params["column-guid"] = params["column_guid"]

        query_params: list[Any] = []
        if "mode" in params and mode is not None:
            query_params.append(("mode", params["mode"]))
        if "max_width" in params and max_width is not None:
            query_params.append(("maxWidth", params["max_width"]))
        if "max_height" in params and max_height is not None:
            query_params.append(("maxHeight", params["max_height"]))

        header_params: dict[str, Any] = {}
        if "x_ansys_vc_mode" in params and x_ansys_vc_mode is not None:
            header_params["X-Ansys-VC-Mode"] = params["x_ansys_vc_mode"]

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/octet-stream", "application/json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "file",
            400: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/tables/{table-guid}/record-histories/{record-history-guid}/latest/attributes/{attribute-guid}/rows/{row-guid}/columns/{column-guid}:export",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def export_cell_binary_data_for_version(
        self,
        *,
        database_key: "str",
        record_history_guid: "str",
        record_version_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        max_width: "Optional[int]" = None,
        max_height: "Optional[int]" = None,
    ) -> "Union[None, str]":
        """Get the binary data for a given database, record history, record version, tabular attribute, row and column. Must be a file or picture column.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        record_history_guid: str
        record_version_guid: str
        attribute_guid: str
        row_guid: str
        column_guid: str
        mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.
        x_ansys_vc_mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.
        max_width: int
        max_height: int

        Returns
        -------
        Union[None, str]
        """
        data = self._export_cell_binary_data_for_version_with_http_info(
            database_key,
            record_history_guid,
            record_version_guid,
            attribute_guid,
            row_guid,
            column_guid,
            mode,
            x_ansys_vc_mode,
            max_width,
            max_height,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _export_cell_binary_data_for_version_with_http_info(
        self,
        database_key: "str",
        record_history_guid: "str",
        record_version_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        max_width: "Optional[int]" = None,
        max_height: "Optional[int]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "record_history_guid",
            "record_version_guid",
            "attribute_guid",
            "row_guid",
            "column_guid",
            "mode",
            "x_ansys_vc_mode",
            "max_width",
            "max_height",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method export_cell_binary_data_for_version"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'export_cell_binary_data_for_version'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'export_cell_binary_data_for_version'"
            )
        # verify the required parameter "record_version_guid" is set
        if "record_version_guid" not in params or params["record_version_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_version_guid' when calling 'export_cell_binary_data_for_version'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'export_cell_binary_data_for_version'"
            )
        # verify the required parameter "row_guid" is set
        if "row_guid" not in params or params["row_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'row_guid' when calling 'export_cell_binary_data_for_version'"
            )
        # verify the required parameter "column_guid" is set
        if "column_guid" not in params or params["column_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'column_guid' when calling 'export_cell_binary_data_for_version'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "record_version_guid" in params and record_version_guid is not None:
            path_params["record-version-guid"] = params["record_version_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]
        if "row_guid" in params and row_guid is not None:
            path_params["row-guid"] = params["row_guid"]
        if "column_guid" in params and column_guid is not None:
            path_params["column-guid"] = params["column_guid"]

        query_params: list[Any] = []
        if "mode" in params and mode is not None:
            query_params.append(("mode", params["mode"]))
        if "max_width" in params and max_width is not None:
            query_params.append(("maxWidth", params["max_width"]))
        if "max_height" in params and max_height is not None:
            query_params.append(("maxHeight", params["max_height"]))

        header_params: dict[str, Any] = {}
        if "x_ansys_vc_mode" in params and x_ansys_vc_mode is not None:
            header_params["X-Ansys-VC-Mode"] = params["x_ansys_vc_mode"]

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/octet-stream", "application/json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "file",
            400: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/record-histories/{record-history-guid}/record-versions/{record-version-guid}/attributes/{attribute-guid}/rows/{row-guid}/columns/{column-guid}:export",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def export_cell_binary_data_for_version_from_table(
        self,
        *,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        record_version_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        max_width: "Optional[int]" = None,
        max_height: "Optional[int]" = None,
    ) -> "Union[None, str]":
        """Get the binary data for a given database, table, record history, record version, tabular attribute, row and column. Must be a file or picture column.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        table_guid: str
        record_history_guid: str
        record_version_guid: str
        attribute_guid: str
        row_guid: str
        column_guid: str
        mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.
        x_ansys_vc_mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.
        max_width: int
        max_height: int

        Returns
        -------
        Union[None, str]
        """
        data = self._export_cell_binary_data_for_version_from_table_with_http_info(
            database_key,
            table_guid,
            record_history_guid,
            record_version_guid,
            attribute_guid,
            row_guid,
            column_guid,
            mode,
            x_ansys_vc_mode,
            max_width,
            max_height,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _export_cell_binary_data_for_version_from_table_with_http_info(
        self,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        record_version_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        max_width: "Optional[int]" = None,
        max_height: "Optional[int]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "table_guid",
            "record_history_guid",
            "record_version_guid",
            "attribute_guid",
            "row_guid",
            "column_guid",
            "mode",
            "x_ansys_vc_mode",
            "max_width",
            "max_height",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method export_cell_binary_data_for_version_from_table"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'export_cell_binary_data_for_version_from_table'"
            )
        # verify the required parameter "table_guid" is set
        if "table_guid" not in params or params["table_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'table_guid' when calling 'export_cell_binary_data_for_version_from_table'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'export_cell_binary_data_for_version_from_table'"
            )
        # verify the required parameter "record_version_guid" is set
        if "record_version_guid" not in params or params["record_version_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_version_guid' when calling 'export_cell_binary_data_for_version_from_table'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'export_cell_binary_data_for_version_from_table'"
            )
        # verify the required parameter "row_guid" is set
        if "row_guid" not in params or params["row_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'row_guid' when calling 'export_cell_binary_data_for_version_from_table'"
            )
        # verify the required parameter "column_guid" is set
        if "column_guid" not in params or params["column_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'column_guid' when calling 'export_cell_binary_data_for_version_from_table'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "table_guid" in params and table_guid is not None:
            path_params["table-guid"] = params["table_guid"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "record_version_guid" in params and record_version_guid is not None:
            path_params["record-version-guid"] = params["record_version_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]
        if "row_guid" in params and row_guid is not None:
            path_params["row-guid"] = params["row_guid"]
        if "column_guid" in params and column_guid is not None:
            path_params["column-guid"] = params["column_guid"]

        query_params: list[Any] = []
        if "mode" in params and mode is not None:
            query_params.append(("mode", params["mode"]))
        if "max_width" in params and max_width is not None:
            query_params.append(("maxWidth", params["max_width"]))
        if "max_height" in params and max_height is not None:
            query_params.append(("maxHeight", params["max_height"]))

        header_params: dict[str, Any] = {}
        if "x_ansys_vc_mode" in params and x_ansys_vc_mode is not None:
            header_params["X-Ansys-VC-Mode"] = params["x_ansys_vc_mode"]

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/octet-stream", "application/json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "file",
            400: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/tables/{table-guid}/record-histories/{record-history-guid}/record-versions/{record-version-guid}/attributes/{attribute-guid}/rows/{row-guid}/columns/{column-guid}:export",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def get_cell_datum_for_latest(
        self,
        *,
        database_key: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
    ) -> "Union[GsaDatum, None]":
        """Get a datum for a given tabular attribute, row and column and the latest version of a record history in given database.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        record_history_guid: str
        attribute_guid: str
        row_guid: str
        column_guid: str
        mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.
        x_ansys_vc_mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.

        Returns
        -------
        Union[GsaDatum, None]
        """
        data = self._get_cell_datum_for_latest_with_http_info(
            database_key,
            record_history_guid,
            attribute_guid,
            row_guid,
            column_guid,
            mode,
            x_ansys_vc_mode,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _get_cell_datum_for_latest_with_http_info(
        self,
        database_key: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "record_history_guid",
            "attribute_guid",
            "row_guid",
            "column_guid",
            "mode",
            "x_ansys_vc_mode",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method get_cell_datum_for_latest"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'get_cell_datum_for_latest'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'get_cell_datum_for_latest'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'get_cell_datum_for_latest'"
            )
        # verify the required parameter "row_guid" is set
        if "row_guid" not in params or params["row_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'row_guid' when calling 'get_cell_datum_for_latest'"
            )
        # verify the required parameter "column_guid" is set
        if "column_guid" not in params or params["column_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'column_guid' when calling 'get_cell_datum_for_latest'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]
        if "row_guid" in params and row_guid is not None:
            path_params["row-guid"] = params["row_guid"]
        if "column_guid" in params and column_guid is not None:
            path_params["column-guid"] = params["column_guid"]

        query_params: list[Any] = []
        if "mode" in params and mode is not None:
            query_params.append(("mode", params["mode"]))

        header_params: dict[str, Any] = {}
        if "x_ansys_vc_mode" in params and x_ansys_vc_mode is not None:
            header_params["X-Ansys-VC-Mode"] = params["x_ansys_vc_mode"]

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaDatum",
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/record-histories/{record-history-guid}/latest/attributes/{attribute-guid}/rows/{row-guid}/columns/{column-guid}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def get_cell_datum_for_latest_from_table(
        self,
        *,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
    ) -> "Union[GsaDatum, None]":
        """Get a datum for a given tabular attribute, row and column and the latest version of a record history in given database and table.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        table_guid: str
        record_history_guid: str
        attribute_guid: str
        row_guid: str
        column_guid: str
        mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.
        x_ansys_vc_mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.

        Returns
        -------
        Union[GsaDatum, None]
        """
        data = self._get_cell_datum_for_latest_from_table_with_http_info(
            database_key,
            table_guid,
            record_history_guid,
            attribute_guid,
            row_guid,
            column_guid,
            mode,
            x_ansys_vc_mode,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _get_cell_datum_for_latest_from_table_with_http_info(
        self,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "table_guid",
            "record_history_guid",
            "attribute_guid",
            "row_guid",
            "column_guid",
            "mode",
            "x_ansys_vc_mode",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method get_cell_datum_for_latest_from_table"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'get_cell_datum_for_latest_from_table'"
            )
        # verify the required parameter "table_guid" is set
        if "table_guid" not in params or params["table_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'table_guid' when calling 'get_cell_datum_for_latest_from_table'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'get_cell_datum_for_latest_from_table'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'get_cell_datum_for_latest_from_table'"
            )
        # verify the required parameter "row_guid" is set
        if "row_guid" not in params or params["row_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'row_guid' when calling 'get_cell_datum_for_latest_from_table'"
            )
        # verify the required parameter "column_guid" is set
        if "column_guid" not in params or params["column_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'column_guid' when calling 'get_cell_datum_for_latest_from_table'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "table_guid" in params and table_guid is not None:
            path_params["table-guid"] = params["table_guid"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]
        if "row_guid" in params and row_guid is not None:
            path_params["row-guid"] = params["row_guid"]
        if "column_guid" in params and column_guid is not None:
            path_params["column-guid"] = params["column_guid"]

        query_params: list[Any] = []
        if "mode" in params and mode is not None:
            query_params.append(("mode", params["mode"]))

        header_params: dict[str, Any] = {}
        if "x_ansys_vc_mode" in params and x_ansys_vc_mode is not None:
            header_params["X-Ansys-VC-Mode"] = params["x_ansys_vc_mode"]

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaDatum",
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/tables/{table-guid}/record-histories/{record-history-guid}/latest/attributes/{attribute-guid}/rows/{row-guid}/columns/{column-guid}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def get_cell_datum_for_version(
        self,
        *,
        database_key: "str",
        record_history_guid: "str",
        record_version_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
    ) -> "Union[GsaDatum, None]":
        """Get a datum for a given database, record history, record version, tabular attribute, row and column.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        record_history_guid: str
        record_version_guid: str
        attribute_guid: str
        row_guid: str
        column_guid: str
        mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.
        x_ansys_vc_mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.

        Returns
        -------
        Union[GsaDatum, None]
        """
        data = self._get_cell_datum_for_version_with_http_info(
            database_key,
            record_history_guid,
            record_version_guid,
            attribute_guid,
            row_guid,
            column_guid,
            mode,
            x_ansys_vc_mode,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _get_cell_datum_for_version_with_http_info(
        self,
        database_key: "str",
        record_history_guid: "str",
        record_version_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "record_history_guid",
            "record_version_guid",
            "attribute_guid",
            "row_guid",
            "column_guid",
            "mode",
            "x_ansys_vc_mode",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method get_cell_datum_for_version"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'get_cell_datum_for_version'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'get_cell_datum_for_version'"
            )
        # verify the required parameter "record_version_guid" is set
        if "record_version_guid" not in params or params["record_version_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_version_guid' when calling 'get_cell_datum_for_version'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'get_cell_datum_for_version'"
            )
        # verify the required parameter "row_guid" is set
        if "row_guid" not in params or params["row_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'row_guid' when calling 'get_cell_datum_for_version'"
            )
        # verify the required parameter "column_guid" is set
        if "column_guid" not in params or params["column_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'column_guid' when calling 'get_cell_datum_for_version'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "record_version_guid" in params and record_version_guid is not None:
            path_params["record-version-guid"] = params["record_version_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]
        if "row_guid" in params and row_guid is not None:
            path_params["row-guid"] = params["row_guid"]
        if "column_guid" in params and column_guid is not None:
            path_params["column-guid"] = params["column_guid"]

        query_params: list[Any] = []
        if "mode" in params and mode is not None:
            query_params.append(("mode", params["mode"]))

        header_params: dict[str, Any] = {}
        if "x_ansys_vc_mode" in params and x_ansys_vc_mode is not None:
            header_params["X-Ansys-VC-Mode"] = params["x_ansys_vc_mode"]

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaDatum",
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/record-histories/{record-history-guid}/record-versions/{record-version-guid}/attributes/{attribute-guid}/rows/{row-guid}/columns/{column-guid}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def get_cell_datum_for_version_from_table(
        self,
        *,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        record_version_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
    ) -> "Union[GsaDatum, None]":
        """Get a datum for a given database, table, record history, record version, tabular attribute, row and column.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        table_guid: str
        record_history_guid: str
        record_version_guid: str
        attribute_guid: str
        row_guid: str
        column_guid: str
        mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.
        x_ansys_vc_mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.

        Returns
        -------
        Union[GsaDatum, None]
        """
        data = self._get_cell_datum_for_version_from_table_with_http_info(
            database_key,
            table_guid,
            record_history_guid,
            record_version_guid,
            attribute_guid,
            row_guid,
            column_guid,
            mode,
            x_ansys_vc_mode,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _get_cell_datum_for_version_from_table_with_http_info(
        self,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        record_version_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "table_guid",
            "record_history_guid",
            "record_version_guid",
            "attribute_guid",
            "row_guid",
            "column_guid",
            "mode",
            "x_ansys_vc_mode",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method get_cell_datum_for_version_from_table"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'get_cell_datum_for_version_from_table'"
            )
        # verify the required parameter "table_guid" is set
        if "table_guid" not in params or params["table_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'table_guid' when calling 'get_cell_datum_for_version_from_table'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'get_cell_datum_for_version_from_table'"
            )
        # verify the required parameter "record_version_guid" is set
        if "record_version_guid" not in params or params["record_version_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_version_guid' when calling 'get_cell_datum_for_version_from_table'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'get_cell_datum_for_version_from_table'"
            )
        # verify the required parameter "row_guid" is set
        if "row_guid" not in params or params["row_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'row_guid' when calling 'get_cell_datum_for_version_from_table'"
            )
        # verify the required parameter "column_guid" is set
        if "column_guid" not in params or params["column_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'column_guid' when calling 'get_cell_datum_for_version_from_table'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "table_guid" in params and table_guid is not None:
            path_params["table-guid"] = params["table_guid"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "record_version_guid" in params and record_version_guid is not None:
            path_params["record-version-guid"] = params["record_version_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]
        if "row_guid" in params and row_guid is not None:
            path_params["row-guid"] = params["row_guid"]
        if "column_guid" in params and column_guid is not None:
            path_params["column-guid"] = params["column_guid"]

        query_params: list[Any] = []
        if "mode" in params and mode is not None:
            query_params.append(("mode", params["mode"]))

        header_params: dict[str, Any] = {}
        if "x_ansys_vc_mode" in params and x_ansys_vc_mode is not None:
            header_params["X-Ansys-VC-Mode"] = params["x_ansys_vc_mode"]

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaDatum",
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/tables/{table-guid}/record-histories/{record-history-guid}/record-versions/{record-version-guid}/attributes/{attribute-guid}/rows/{row-guid}/columns/{column-guid}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def get_datum_for_latest(
        self,
        *,
        database_key: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        filter_empty_cells: "Optional[bool]" = None,
        filter_empty_rows: "Optional[bool]" = None,
    ) -> "Union[GsaDatum, None]":
        """Get a datum for a given attribute and the latest version of a record history in given database.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        record_history_guid: str
        attribute_guid: str
        mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.
        x_ansys_vc_mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.
        filter_empty_cells: bool
        filter_empty_rows: bool

        Returns
        -------
        Union[GsaDatum, None]
        """
        data = self._get_datum_for_latest_with_http_info(
            database_key,
            record_history_guid,
            attribute_guid,
            mode,
            x_ansys_vc_mode,
            filter_empty_cells,
            filter_empty_rows,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _get_datum_for_latest_with_http_info(
        self,
        database_key: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        filter_empty_cells: "Optional[bool]" = None,
        filter_empty_rows: "Optional[bool]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "record_history_guid",
            "attribute_guid",
            "mode",
            "x_ansys_vc_mode",
            "filter_empty_cells",
            "filter_empty_rows",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method get_datum_for_latest"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'get_datum_for_latest'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'get_datum_for_latest'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'get_datum_for_latest'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]

        query_params: list[Any] = []
        if "mode" in params and mode is not None:
            query_params.append(("mode", params["mode"]))
        if "filter_empty_cells" in params and filter_empty_cells is not None:
            query_params.append(("filterEmptyCells", params["filter_empty_cells"]))
        if "filter_empty_rows" in params and filter_empty_rows is not None:
            query_params.append(("filterEmptyRows", params["filter_empty_rows"]))

        header_params: dict[str, Any] = {}
        if "x_ansys_vc_mode" in params and x_ansys_vc_mode is not None:
            header_params["X-Ansys-VC-Mode"] = params["x_ansys_vc_mode"]

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaDatum",
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/record-histories/{record-history-guid}/latest/attributes/{attribute-guid}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def get_datum_for_latest_from_table(
        self,
        *,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        filter_empty_cells: "Optional[bool]" = None,
        filter_empty_rows: "Optional[bool]" = None,
    ) -> "Union[GsaDatum, None]":
        """Get a datum for a given attribute and the latest version of a record history in given database and table.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        table_guid: str
        record_history_guid: str
        attribute_guid: str
        mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.
        x_ansys_vc_mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.
        filter_empty_cells: bool
        filter_empty_rows: bool

        Returns
        -------
        Union[GsaDatum, None]
        """
        data = self._get_datum_for_latest_from_table_with_http_info(
            database_key,
            table_guid,
            record_history_guid,
            attribute_guid,
            mode,
            x_ansys_vc_mode,
            filter_empty_cells,
            filter_empty_rows,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _get_datum_for_latest_from_table_with_http_info(
        self,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        filter_empty_cells: "Optional[bool]" = None,
        filter_empty_rows: "Optional[bool]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "table_guid",
            "record_history_guid",
            "attribute_guid",
            "mode",
            "x_ansys_vc_mode",
            "filter_empty_cells",
            "filter_empty_rows",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method get_datum_for_latest_from_table"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'get_datum_for_latest_from_table'"
            )
        # verify the required parameter "table_guid" is set
        if "table_guid" not in params or params["table_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'table_guid' when calling 'get_datum_for_latest_from_table'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'get_datum_for_latest_from_table'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'get_datum_for_latest_from_table'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "table_guid" in params and table_guid is not None:
            path_params["table-guid"] = params["table_guid"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]

        query_params: list[Any] = []
        if "mode" in params and mode is not None:
            query_params.append(("mode", params["mode"]))
        if "filter_empty_cells" in params and filter_empty_cells is not None:
            query_params.append(("filterEmptyCells", params["filter_empty_cells"]))
        if "filter_empty_rows" in params and filter_empty_rows is not None:
            query_params.append(("filterEmptyRows", params["filter_empty_rows"]))

        header_params: dict[str, Any] = {}
        if "x_ansys_vc_mode" in params and x_ansys_vc_mode is not None:
            header_params["X-Ansys-VC-Mode"] = params["x_ansys_vc_mode"]

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaDatum",
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/tables/{table-guid}/record-histories/{record-history-guid}/latest/attributes/{attribute-guid}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def get_datum_for_version(
        self,
        *,
        database_key: "str",
        record_history_guid: "str",
        record_version_guid: "str",
        attribute_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        filter_empty_cells: "Optional[bool]" = None,
        filter_empty_rows: "Optional[bool]" = None,
    ) -> "Union[GsaDatum, None]":
        """Get a datum for a given database, record history, record version and attribute.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        record_history_guid: str
        record_version_guid: str
        attribute_guid: str
        mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.
        x_ansys_vc_mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.
        filter_empty_cells: bool
        filter_empty_rows: bool

        Returns
        -------
        Union[GsaDatum, None]
        """
        data = self._get_datum_for_version_with_http_info(
            database_key,
            record_history_guid,
            record_version_guid,
            attribute_guid,
            mode,
            x_ansys_vc_mode,
            filter_empty_cells,
            filter_empty_rows,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _get_datum_for_version_with_http_info(
        self,
        database_key: "str",
        record_history_guid: "str",
        record_version_guid: "str",
        attribute_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        filter_empty_cells: "Optional[bool]" = None,
        filter_empty_rows: "Optional[bool]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "record_history_guid",
            "record_version_guid",
            "attribute_guid",
            "mode",
            "x_ansys_vc_mode",
            "filter_empty_cells",
            "filter_empty_rows",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method get_datum_for_version"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'get_datum_for_version'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'get_datum_for_version'"
            )
        # verify the required parameter "record_version_guid" is set
        if "record_version_guid" not in params or params["record_version_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_version_guid' when calling 'get_datum_for_version'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'get_datum_for_version'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "record_version_guid" in params and record_version_guid is not None:
            path_params["record-version-guid"] = params["record_version_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]

        query_params: list[Any] = []
        if "mode" in params and mode is not None:
            query_params.append(("mode", params["mode"]))
        if "filter_empty_cells" in params and filter_empty_cells is not None:
            query_params.append(("filterEmptyCells", params["filter_empty_cells"]))
        if "filter_empty_rows" in params and filter_empty_rows is not None:
            query_params.append(("filterEmptyRows", params["filter_empty_rows"]))

        header_params: dict[str, Any] = {}
        if "x_ansys_vc_mode" in params and x_ansys_vc_mode is not None:
            header_params["X-Ansys-VC-Mode"] = params["x_ansys_vc_mode"]

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaDatum",
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/record-histories/{record-history-guid}/record-versions/{record-version-guid}/attributes/{attribute-guid}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def get_datum_for_version_from_table(
        self,
        *,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        record_version_guid: "str",
        attribute_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        filter_empty_cells: "Optional[bool]" = None,
        filter_empty_rows: "Optional[bool]" = None,
    ) -> "Union[GsaDatum, None]":
        """Get a datum for a given database, table, record history, record version and attribute.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        table_guid: str
        record_history_guid: str
        record_version_guid: str
        attribute_guid: str
        mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the header.
        x_ansys_vc_mode: str
            The version control mode. If not provided, defaults to write mode if the user is allowed to see that. Can also be set in the query string.
        filter_empty_cells: bool
        filter_empty_rows: bool

        Returns
        -------
        Union[GsaDatum, None]
        """
        data = self._get_datum_for_version_from_table_with_http_info(
            database_key,
            table_guid,
            record_history_guid,
            record_version_guid,
            attribute_guid,
            mode,
            x_ansys_vc_mode,
            filter_empty_cells,
            filter_empty_rows,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _get_datum_for_version_from_table_with_http_info(
        self,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        record_version_guid: "str",
        attribute_guid: "str",
        mode: "Optional[str]" = None,
        x_ansys_vc_mode: "Optional[str]" = None,
        filter_empty_cells: "Optional[bool]" = None,
        filter_empty_rows: "Optional[bool]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "table_guid",
            "record_history_guid",
            "record_version_guid",
            "attribute_guid",
            "mode",
            "x_ansys_vc_mode",
            "filter_empty_cells",
            "filter_empty_rows",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method get_datum_for_version_from_table"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'get_datum_for_version_from_table'"
            )
        # verify the required parameter "table_guid" is set
        if "table_guid" not in params or params["table_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'table_guid' when calling 'get_datum_for_version_from_table'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'get_datum_for_version_from_table'"
            )
        # verify the required parameter "record_version_guid" is set
        if "record_version_guid" not in params or params["record_version_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_version_guid' when calling 'get_datum_for_version_from_table'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'get_datum_for_version_from_table'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "table_guid" in params and table_guid is not None:
            path_params["table-guid"] = params["table_guid"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "record_version_guid" in params and record_version_guid is not None:
            path_params["record-version-guid"] = params["record_version_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]

        query_params: list[Any] = []
        if "mode" in params and mode is not None:
            query_params.append(("mode", params["mode"]))
        if "filter_empty_cells" in params and filter_empty_cells is not None:
            query_params.append(("filterEmptyCells", params["filter_empty_cells"]))
        if "filter_empty_rows" in params and filter_empty_rows is not None:
            query_params.append(("filterEmptyRows", params["filter_empty_rows"]))

        header_params: dict[str, Any] = {}
        if "x_ansys_vc_mode" in params and x_ansys_vc_mode is not None:
            header_params["X-Ansys-VC-Mode"] = params["x_ansys_vc_mode"]

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaDatum",
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/tables/{table-guid}/record-histories/{record-history-guid}/record-versions/{record-version-guid}/attributes/{attribute-guid}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def set_cell_datum_for_tabular_attribute(
        self,
        *,
        database_key: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        body: "Optional[GsaSetDatum]" = None,
    ) -> "Union[GsaDatum, None]":
        """Create or edit a cell datum for a given record history, tabular attribute, row and column in a given database.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        record_history_guid: str
        attribute_guid: str
        row_guid: str
        column_guid: str
        body: GsaSetDatum

        Returns
        -------
        Union[GsaDatum, None]
        """
        data = self._set_cell_datum_for_tabular_attribute_with_http_info(
            database_key,
            record_history_guid,
            attribute_guid,
            row_guid,
            column_guid,
            body,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _set_cell_datum_for_tabular_attribute_with_http_info(
        self,
        database_key: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        body: "Optional[GsaSetDatum]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "record_history_guid",
            "attribute_guid",
            "row_guid",
            "column_guid",
            "body",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method set_cell_datum_for_tabular_attribute"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'set_cell_datum_for_tabular_attribute'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'set_cell_datum_for_tabular_attribute'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'set_cell_datum_for_tabular_attribute'"
            )
        # verify the required parameter "row_guid" is set
        if "row_guid" not in params or params["row_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'row_guid' when calling 'set_cell_datum_for_tabular_attribute'"
            )
        # verify the required parameter "column_guid" is set
        if "column_guid" not in params or params["column_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'column_guid' when calling 'set_cell_datum_for_tabular_attribute'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]
        if "row_guid" in params and row_guid is not None:
            path_params["row-guid"] = params["row_guid"]
        if "column_guid" in params and column_guid is not None:
            path_params["column-guid"] = params["column_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        if "body" in params and body is not None:
            body_params = params["body"]
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header 'Content-Type'
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            ["application/json-patch+json", "application/json", "text/json", "application/*+json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaDatum",
            400: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/record-histories/{record-history-guid}/attributes/{attribute-guid}/rows/{row-guid}/columns/{column-guid}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def set_cell_datum_for_tabular_attribute_from_table(
        self,
        *,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        body: "Optional[GsaSetDatum]" = None,
    ) -> "Union[GsaDatum, None]":
        """Create or edit a cell datum for a given record history, tabular attribute, row and column in a given database and table.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        table_guid: str
        record_history_guid: str
        attribute_guid: str
        row_guid: str
        column_guid: str
        body: GsaSetDatum

        Returns
        -------
        Union[GsaDatum, None]
        """
        data = self._set_cell_datum_for_tabular_attribute_from_table_with_http_info(
            database_key,
            table_guid,
            record_history_guid,
            attribute_guid,
            row_guid,
            column_guid,
            body,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _set_cell_datum_for_tabular_attribute_from_table_with_http_info(
        self,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        body: "Optional[GsaSetDatum]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "table_guid",
            "record_history_guid",
            "attribute_guid",
            "row_guid",
            "column_guid",
            "body",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method set_cell_datum_for_tabular_attribute_from_table"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'set_cell_datum_for_tabular_attribute_from_table'"
            )
        # verify the required parameter "table_guid" is set
        if "table_guid" not in params or params["table_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'table_guid' when calling 'set_cell_datum_for_tabular_attribute_from_table'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'set_cell_datum_for_tabular_attribute_from_table'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'set_cell_datum_for_tabular_attribute_from_table'"
            )
        # verify the required parameter "row_guid" is set
        if "row_guid" not in params or params["row_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'row_guid' when calling 'set_cell_datum_for_tabular_attribute_from_table'"
            )
        # verify the required parameter "column_guid" is set
        if "column_guid" not in params or params["column_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'column_guid' when calling 'set_cell_datum_for_tabular_attribute_from_table'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "table_guid" in params and table_guid is not None:
            path_params["table-guid"] = params["table_guid"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]
        if "row_guid" in params and row_guid is not None:
            path_params["row-guid"] = params["row_guid"]
        if "column_guid" in params and column_guid is not None:
            path_params["column-guid"] = params["column_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        if "body" in params and body is not None:
            body_params = params["body"]
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header 'Content-Type'
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            ["application/json-patch+json", "application/json", "text/json", "application/*+json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaDatum",
            400: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/tables/{table-guid}/record-histories/{record-history-guid}/attributes/{attribute-guid}/rows/{row-guid}/columns/{column-guid}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def set_cell_file_datum_for_tabular_attribute(
        self,
        *,
        database_key: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        file: "Optional[Union[BinaryIO, pathlib.Path]]" = None,
        description: "Optional[str]" = None,
        target: "Optional[str]" = None,
        allow_index: "Optional[bool]" = None,
    ) -> "Union[GsaFileDatum, None]":
        """Create or edit a cell file datum for a given record history, tabular attribute, row and column in a given database.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        record_history_guid: str
        attribute_guid: str
        row_guid: str
        column_guid: str
        file: Union[BinaryIO, pathlib.Path]
        description: str
        target: str
        allow_index: bool

        Returns
        -------
        Union[GsaFileDatum, None]
        """
        data = self._set_cell_file_datum_for_tabular_attribute_with_http_info(
            database_key,
            record_history_guid,
            attribute_guid,
            row_guid,
            column_guid,
            file,
            description,
            target,
            allow_index,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _set_cell_file_datum_for_tabular_attribute_with_http_info(
        self,
        database_key: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        file: "Optional[Union[BinaryIO, pathlib.Path]]" = None,
        description: "Optional[str]" = None,
        target: "Optional[str]" = None,
        allow_index: "Optional[bool]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "record_history_guid",
            "attribute_guid",
            "row_guid",
            "column_guid",
            "file",
            "description",
            "target",
            "allow_index",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method set_cell_file_datum_for_tabular_attribute"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'set_cell_file_datum_for_tabular_attribute'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'set_cell_file_datum_for_tabular_attribute'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'set_cell_file_datum_for_tabular_attribute'"
            )
        # verify the required parameter "row_guid" is set
        if "row_guid" not in params or params["row_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'row_guid' when calling 'set_cell_file_datum_for_tabular_attribute'"
            )
        # verify the required parameter "column_guid" is set
        if "column_guid" not in params or params["column_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'column_guid' when calling 'set_cell_file_datum_for_tabular_attribute'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]
        if "row_guid" in params and row_guid is not None:
            path_params["row-guid"] = params["row_guid"]
        if "column_guid" in params and column_guid is not None:
            path_params["column-guid"] = params["column_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}
        if "file" in params and file is not None:
            local_var_files["File"] = params["file"]
        if "description" in params and description is not None:
            form_params.append(("Description", params["description"]))
        if "target" in params and target is not None:
            form_params.append(("Target", params["target"]))
        if "allow_index" in params and allow_index is not None:
            form_params.append(("AllowIndex", params["allow_index"]))

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # multipart/form-data request detected. Content-Type header will be
        # populated by openapi-common based on request content.

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaFileDatum",
            400: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/record-histories/{record-history-guid}/attributes/{attribute-guid}/rows/{row-guid}/columns/{column-guid}:import-file",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def set_cell_file_datum_for_tabular_attribute_from_table(
        self,
        *,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        file: "Optional[Union[BinaryIO, pathlib.Path]]" = None,
        description: "Optional[str]" = None,
        target: "Optional[str]" = None,
        allow_index: "Optional[bool]" = None,
    ) -> "Union[GsaFileDatum, None]":
        """Create or edit a cell file datum for a given record history, tabular attribute, row and column in a given database and table.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        table_guid: str
        record_history_guid: str
        attribute_guid: str
        row_guid: str
        column_guid: str
        file: Union[BinaryIO, pathlib.Path]
        description: str
        target: str
        allow_index: bool

        Returns
        -------
        Union[GsaFileDatum, None]
        """
        data = self._set_cell_file_datum_for_tabular_attribute_from_table_with_http_info(
            database_key,
            table_guid,
            record_history_guid,
            attribute_guid,
            row_guid,
            column_guid,
            file,
            description,
            target,
            allow_index,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _set_cell_file_datum_for_tabular_attribute_from_table_with_http_info(
        self,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        file: "Optional[Union[BinaryIO, pathlib.Path]]" = None,
        description: "Optional[str]" = None,
        target: "Optional[str]" = None,
        allow_index: "Optional[bool]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "table_guid",
            "record_history_guid",
            "attribute_guid",
            "row_guid",
            "column_guid",
            "file",
            "description",
            "target",
            "allow_index",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method set_cell_file_datum_for_tabular_attribute_from_table"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'set_cell_file_datum_for_tabular_attribute_from_table'"
            )
        # verify the required parameter "table_guid" is set
        if "table_guid" not in params or params["table_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'table_guid' when calling 'set_cell_file_datum_for_tabular_attribute_from_table'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'set_cell_file_datum_for_tabular_attribute_from_table'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'set_cell_file_datum_for_tabular_attribute_from_table'"
            )
        # verify the required parameter "row_guid" is set
        if "row_guid" not in params or params["row_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'row_guid' when calling 'set_cell_file_datum_for_tabular_attribute_from_table'"
            )
        # verify the required parameter "column_guid" is set
        if "column_guid" not in params or params["column_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'column_guid' when calling 'set_cell_file_datum_for_tabular_attribute_from_table'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "table_guid" in params and table_guid is not None:
            path_params["table-guid"] = params["table_guid"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]
        if "row_guid" in params and row_guid is not None:
            path_params["row-guid"] = params["row_guid"]
        if "column_guid" in params and column_guid is not None:
            path_params["column-guid"] = params["column_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}
        if "file" in params and file is not None:
            local_var_files["File"] = params["file"]
        if "description" in params and description is not None:
            form_params.append(("Description", params["description"]))
        if "target" in params and target is not None:
            form_params.append(("Target", params["target"]))
        if "allow_index" in params and allow_index is not None:
            form_params.append(("AllowIndex", params["allow_index"]))

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # multipart/form-data request detected. Content-Type header will be
        # populated by openapi-common based on request content.

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaFileDatum",
            400: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/tables/{table-guid}/record-histories/{record-history-guid}/attributes/{attribute-guid}/rows/{row-guid}/columns/{column-guid}:import-file",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def set_cell_picture_datum_for_tabular_attribute(
        self,
        *,
        database_key: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        picture: "Optional[Union[BinaryIO, pathlib.Path]]" = None,
    ) -> "Union[GsaPictureDatum, None]":
        """Create or edit a cell picture datum for a given record history, tabular attribute, row and column in a given database.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        record_history_guid: str
        attribute_guid: str
        row_guid: str
        column_guid: str
        picture: Union[BinaryIO, pathlib.Path]

        Returns
        -------
        Union[GsaPictureDatum, None]
        """
        data = self._set_cell_picture_datum_for_tabular_attribute_with_http_info(
            database_key,
            record_history_guid,
            attribute_guid,
            row_guid,
            column_guid,
            picture,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _set_cell_picture_datum_for_tabular_attribute_with_http_info(
        self,
        database_key: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        picture: "Optional[Union[BinaryIO, pathlib.Path]]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "record_history_guid",
            "attribute_guid",
            "row_guid",
            "column_guid",
            "picture",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method set_cell_picture_datum_for_tabular_attribute"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'set_cell_picture_datum_for_tabular_attribute'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'set_cell_picture_datum_for_tabular_attribute'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'set_cell_picture_datum_for_tabular_attribute'"
            )
        # verify the required parameter "row_guid" is set
        if "row_guid" not in params or params["row_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'row_guid' when calling 'set_cell_picture_datum_for_tabular_attribute'"
            )
        # verify the required parameter "column_guid" is set
        if "column_guid" not in params or params["column_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'column_guid' when calling 'set_cell_picture_datum_for_tabular_attribute'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]
        if "row_guid" in params and row_guid is not None:
            path_params["row-guid"] = params["row_guid"]
        if "column_guid" in params and column_guid is not None:
            path_params["column-guid"] = params["column_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}
        if "picture" in params and picture is not None:
            local_var_files["Picture"] = params["picture"]

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # multipart/form-data request detected. Content-Type header will be
        # populated by openapi-common based on request content.

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaPictureDatum",
            400: None,
            403: None,
            404: None,
            415: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/record-histories/{record-history-guid}/attributes/{attribute-guid}/rows/{row-guid}/columns/{column-guid}:import-picture",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def set_cell_picture_datum_for_tabular_attribute_from_table(
        self,
        *,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        picture: "Optional[Union[BinaryIO, pathlib.Path]]" = None,
    ) -> "Union[GsaPictureDatum, None]":
        """Create or edit a cell picture datum for a given record history, tabular attribute, row and column in a given database and table.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        table_guid: str
        record_history_guid: str
        attribute_guid: str
        row_guid: str
        column_guid: str
        picture: Union[BinaryIO, pathlib.Path]

        Returns
        -------
        Union[GsaPictureDatum, None]
        """
        data = self._set_cell_picture_datum_for_tabular_attribute_from_table_with_http_info(
            database_key,
            table_guid,
            record_history_guid,
            attribute_guid,
            row_guid,
            column_guid,
            picture,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _set_cell_picture_datum_for_tabular_attribute_from_table_with_http_info(
        self,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        row_guid: "str",
        column_guid: "str",
        picture: "Optional[Union[BinaryIO, pathlib.Path]]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "table_guid",
            "record_history_guid",
            "attribute_guid",
            "row_guid",
            "column_guid",
            "picture",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method set_cell_picture_datum_for_tabular_attribute_from_table"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'set_cell_picture_datum_for_tabular_attribute_from_table'"
            )
        # verify the required parameter "table_guid" is set
        if "table_guid" not in params or params["table_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'table_guid' when calling 'set_cell_picture_datum_for_tabular_attribute_from_table'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'set_cell_picture_datum_for_tabular_attribute_from_table'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'set_cell_picture_datum_for_tabular_attribute_from_table'"
            )
        # verify the required parameter "row_guid" is set
        if "row_guid" not in params or params["row_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'row_guid' when calling 'set_cell_picture_datum_for_tabular_attribute_from_table'"
            )
        # verify the required parameter "column_guid" is set
        if "column_guid" not in params or params["column_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'column_guid' when calling 'set_cell_picture_datum_for_tabular_attribute_from_table'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "table_guid" in params and table_guid is not None:
            path_params["table-guid"] = params["table_guid"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]
        if "row_guid" in params and row_guid is not None:
            path_params["row-guid"] = params["row_guid"]
        if "column_guid" in params and column_guid is not None:
            path_params["column-guid"] = params["column_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}
        if "picture" in params and picture is not None:
            local_var_files["Picture"] = params["picture"]

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # multipart/form-data request detected. Content-Type header will be
        # populated by openapi-common based on request content.

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaPictureDatum",
            400: None,
            403: None,
            404: None,
            415: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/tables/{table-guid}/record-histories/{record-history-guid}/attributes/{attribute-guid}/rows/{row-guid}/columns/{column-guid}:import-picture",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def set_datum_for_attribute(
        self,
        *,
        database_key: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        body: "Optional[GsaSetDatum]" = None,
    ) -> "Union[GsaDatum, None]":
        """Create or edit a datum for a given attribute and record history in a given database.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        record_history_guid: str
        attribute_guid: str
        body: GsaSetDatum

        Returns
        -------
        Union[GsaDatum, None]
        """
        data = self._set_datum_for_attribute_with_http_info(
            database_key, record_history_guid, attribute_guid, body, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _set_datum_for_attribute_with_http_info(
        self,
        database_key: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        body: "Optional[GsaSetDatum]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "record_history_guid",
            "attribute_guid",
            "body",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method set_datum_for_attribute"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'set_datum_for_attribute'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'set_datum_for_attribute'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'set_datum_for_attribute'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        if "body" in params and body is not None:
            body_params = params["body"]
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header 'Content-Type'
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            ["application/json-patch+json", "application/json", "text/json", "application/*+json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaDatum",
            400: None,
            403: None,
            404: None,
            422: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/record-histories/{record-history-guid}/attributes/{attribute-guid}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def set_datum_for_attribute_from_table(
        self,
        *,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        body: "Optional[GsaSetDatum]" = None,
    ) -> "Union[GsaDatum, None]":
        """Create or edit a datum for a given attribute and record history in a given database and table.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        table_guid: str
        record_history_guid: str
        attribute_guid: str
        body: GsaSetDatum

        Returns
        -------
        Union[GsaDatum, None]
        """
        data = self._set_datum_for_attribute_from_table_with_http_info(
            database_key,
            table_guid,
            record_history_guid,
            attribute_guid,
            body,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _set_datum_for_attribute_from_table_with_http_info(
        self,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        body: "Optional[GsaSetDatum]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "table_guid",
            "record_history_guid",
            "attribute_guid",
            "body",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method set_datum_for_attribute_from_table"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'set_datum_for_attribute_from_table'"
            )
        # verify the required parameter "table_guid" is set
        if "table_guid" not in params or params["table_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'table_guid' when calling 'set_datum_for_attribute_from_table'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'set_datum_for_attribute_from_table'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'set_datum_for_attribute_from_table'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "table_guid" in params and table_guid is not None:
            path_params["table-guid"] = params["table_guid"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        if "body" in params and body is not None:
            body_params = params["body"]
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header 'Content-Type'
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            ["application/json-patch+json", "application/json", "text/json", "application/*+json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaDatum",
            400: None,
            403: None,
            404: None,
            422: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/tables/{table-guid}/record-histories/{record-history-guid}/attributes/{attribute-guid}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def set_datum_not_applicable(
        self, *, database_key: "str", record_history_guid: "str", attribute_guid: "str"
    ) -> "None":
        """Sets a datum as 'not applicable' for a given attribute and record history in a given database.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        record_history_guid: str
        attribute_guid: str

        Returns
        -------
        None
        """
        data = self._set_datum_not_applicable_with_http_info(
            database_key, record_history_guid, attribute_guid, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _set_datum_not_applicable_with_http_info(
        self, database_key: "str", record_history_guid: "str", attribute_guid: "str", **kwargs: Any
    ) -> Any:
        all_params = [
            "database_key",
            "record_history_guid",
            "attribute_guid",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method set_datum_not_applicable"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'set_datum_not_applicable'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'set_datum_not_applicable'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'set_datum_not_applicable'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None

        response_type_map: dict[int, Optional[str]] = {
            200: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/record-histories/{record-history-guid}/attributes/{attribute-guid}:set-not-applicable",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def set_datum_not_applicable_from_table(
        self,
        *,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
    ) -> "None":
        """Sets a datum as 'not applicable' for a given attribute and record history in a given database and table.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        table_guid: str
        record_history_guid: str
        attribute_guid: str

        Returns
        -------
        None
        """
        data = self._set_datum_not_applicable_from_table_with_http_info(
            database_key,
            table_guid,
            record_history_guid,
            attribute_guid,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _set_datum_not_applicable_from_table_with_http_info(
        self,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "table_guid",
            "record_history_guid",
            "attribute_guid",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method set_datum_not_applicable_from_table"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'set_datum_not_applicable_from_table'"
            )
        # verify the required parameter "table_guid" is set
        if "table_guid" not in params or params["table_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'table_guid' when calling 'set_datum_not_applicable_from_table'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'set_datum_not_applicable_from_table'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'set_datum_not_applicable_from_table'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "table_guid" in params and table_guid is not None:
            path_params["table-guid"] = params["table_guid"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None

        response_type_map: dict[int, Optional[str]] = {
            200: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/tables/{table-guid}/record-histories/{record-history-guid}/attributes/{attribute-guid}:set-not-applicable",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def set_file_datum_for_attribute(
        self,
        *,
        database_key: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        file: "Optional[Union[BinaryIO, pathlib.Path]]" = None,
        description: "Optional[str]" = None,
        target: "Optional[str]" = None,
        allow_index: "Optional[bool]" = None,
    ) -> "Union[GsaFileDatum, None]":
        """Create or edit a file datum for a given attribute and record history in a given database.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        record_history_guid: str
        attribute_guid: str
        file: Union[BinaryIO, pathlib.Path]
        description: str
        target: str
        allow_index: bool

        Returns
        -------
        Union[GsaFileDatum, None]
        """
        data = self._set_file_datum_for_attribute_with_http_info(
            database_key,
            record_history_guid,
            attribute_guid,
            file,
            description,
            target,
            allow_index,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _set_file_datum_for_attribute_with_http_info(
        self,
        database_key: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        file: "Optional[Union[BinaryIO, pathlib.Path]]" = None,
        description: "Optional[str]" = None,
        target: "Optional[str]" = None,
        allow_index: "Optional[bool]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "record_history_guid",
            "attribute_guid",
            "file",
            "description",
            "target",
            "allow_index",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method set_file_datum_for_attribute"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'set_file_datum_for_attribute'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'set_file_datum_for_attribute'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'set_file_datum_for_attribute'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}
        if "file" in params and file is not None:
            local_var_files["File"] = params["file"]
        if "description" in params and description is not None:
            form_params.append(("Description", params["description"]))
        if "target" in params and target is not None:
            form_params.append(("Target", params["target"]))
        if "allow_index" in params and allow_index is not None:
            form_params.append(("AllowIndex", params["allow_index"]))

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # multipart/form-data request detected. Content-Type header will be
        # populated by openapi-common based on request content.

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaFileDatum",
            400: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/record-histories/{record-history-guid}/attributes/{attribute-guid}:import-file",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def set_file_datum_for_attribute_from_table(
        self,
        *,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        file: "Optional[Union[BinaryIO, pathlib.Path]]" = None,
        description: "Optional[str]" = None,
        target: "Optional[str]" = None,
        allow_index: "Optional[bool]" = None,
    ) -> "Union[GsaFileDatum, None]":
        """Create or edit a file datum for a given attribute and record history in a given database and table.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        table_guid: str
        record_history_guid: str
        attribute_guid: str
        file: Union[BinaryIO, pathlib.Path]
        description: str
        target: str
        allow_index: bool

        Returns
        -------
        Union[GsaFileDatum, None]
        """
        data = self._set_file_datum_for_attribute_from_table_with_http_info(
            database_key,
            table_guid,
            record_history_guid,
            attribute_guid,
            file,
            description,
            target,
            allow_index,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _set_file_datum_for_attribute_from_table_with_http_info(
        self,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        file: "Optional[Union[BinaryIO, pathlib.Path]]" = None,
        description: "Optional[str]" = None,
        target: "Optional[str]" = None,
        allow_index: "Optional[bool]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "table_guid",
            "record_history_guid",
            "attribute_guid",
            "file",
            "description",
            "target",
            "allow_index",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method set_file_datum_for_attribute_from_table"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'set_file_datum_for_attribute_from_table'"
            )
        # verify the required parameter "table_guid" is set
        if "table_guid" not in params or params["table_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'table_guid' when calling 'set_file_datum_for_attribute_from_table'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'set_file_datum_for_attribute_from_table'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'set_file_datum_for_attribute_from_table'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "table_guid" in params and table_guid is not None:
            path_params["table-guid"] = params["table_guid"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}
        if "file" in params and file is not None:
            local_var_files["File"] = params["file"]
        if "description" in params and description is not None:
            form_params.append(("Description", params["description"]))
        if "target" in params and target is not None:
            form_params.append(("Target", params["target"]))
        if "allow_index" in params and allow_index is not None:
            form_params.append(("AllowIndex", params["allow_index"]))

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # multipart/form-data request detected. Content-Type header will be
        # populated by openapi-common based on request content.

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaFileDatum",
            400: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/tables/{table-guid}/record-histories/{record-history-guid}/attributes/{attribute-guid}:import-file",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def set_picture_datum_for_attribute(
        self,
        *,
        database_key: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        picture: "Optional[Union[BinaryIO, pathlib.Path]]" = None,
    ) -> "Union[GsaPictureDatum, None]":
        """Create or edit a picture datum for a given attribute and record history in a given database.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        record_history_guid: str
        attribute_guid: str
        picture: Union[BinaryIO, pathlib.Path]

        Returns
        -------
        Union[GsaPictureDatum, None]
        """
        data = self._set_picture_datum_for_attribute_with_http_info(
            database_key, record_history_guid, attribute_guid, picture, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _set_picture_datum_for_attribute_with_http_info(
        self,
        database_key: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        picture: "Optional[Union[BinaryIO, pathlib.Path]]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "record_history_guid",
            "attribute_guid",
            "picture",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method set_picture_datum_for_attribute"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'set_picture_datum_for_attribute'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'set_picture_datum_for_attribute'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'set_picture_datum_for_attribute'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}
        if "picture" in params and picture is not None:
            local_var_files["Picture"] = params["picture"]

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # multipart/form-data request detected. Content-Type header will be
        # populated by openapi-common based on request content.

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaPictureDatum",
            400: None,
            403: None,
            404: None,
            415: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/record-histories/{record-history-guid}/attributes/{attribute-guid}:import-picture",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def set_picture_datum_for_attribute_from_table(
        self,
        *,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        picture: "Optional[Union[BinaryIO, pathlib.Path]]" = None,
    ) -> "Union[GsaPictureDatum, None]":
        """Create or edit a picture datum for a given attribute and record history in a given database and table.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        table_guid: str
        record_history_guid: str
        attribute_guid: str
        picture: Union[BinaryIO, pathlib.Path]

        Returns
        -------
        Union[GsaPictureDatum, None]
        """
        data = self._set_picture_datum_for_attribute_from_table_with_http_info(
            database_key,
            table_guid,
            record_history_guid,
            attribute_guid,
            picture,
            _return_http_data_only=True,
        )
        return data  # type: ignore[no-any-return]

    def _set_picture_datum_for_attribute_from_table_with_http_info(
        self,
        database_key: "str",
        table_guid: "str",
        record_history_guid: "str",
        attribute_guid: "str",
        picture: "Optional[Union[BinaryIO, pathlib.Path]]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "table_guid",
            "record_history_guid",
            "attribute_guid",
            "picture",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method set_picture_datum_for_attribute_from_table"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'set_picture_datum_for_attribute_from_table'"
            )
        # verify the required parameter "table_guid" is set
        if "table_guid" not in params or params["table_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'table_guid' when calling 'set_picture_datum_for_attribute_from_table'"
            )
        # verify the required parameter "record_history_guid" is set
        if "record_history_guid" not in params or params["record_history_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'record_history_guid' when calling 'set_picture_datum_for_attribute_from_table'"
            )
        # verify the required parameter "attribute_guid" is set
        if "attribute_guid" not in params or params["attribute_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'attribute_guid' when calling 'set_picture_datum_for_attribute_from_table'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "table_guid" in params and table_guid is not None:
            path_params["table-guid"] = params["table_guid"]
        if "record_history_guid" in params and record_history_guid is not None:
            path_params["record-history-guid"] = params["record_history_guid"]
        if "attribute_guid" in params and attribute_guid is not None:
            path_params["attribute-guid"] = params["attribute_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}
        if "picture" in params and picture is not None:
            local_var_files["Picture"] = params["picture"]

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # multipart/form-data request detected. Content-Type header will be
        # populated by openapi-common based on request content.

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaPictureDatum",
            400: None,
            403: None,
            404: None,
            415: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/tables/{table-guid}/record-histories/{record-history-guid}/attributes/{attribute-guid}:import-picture",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )
