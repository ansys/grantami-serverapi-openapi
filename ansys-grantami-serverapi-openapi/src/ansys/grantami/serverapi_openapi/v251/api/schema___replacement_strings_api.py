# Copyright (C) 2023 - 2024 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional, Union  # noqa: F401

from . import ApiBase

if TYPE_CHECKING:
    import pathlib

    from ..models import *


class SchemaReplacementStringsApi(ApiBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def create_replacement_string(
        self, *, database_key: "str", body: "Optional[GsaCreateReplacementString]" = None
    ) -> "Union[GsaReplacementString, None]":
        """Create a new replacement string.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
            Database in which replacement string will be created
        body: GsaCreateReplacementString
            Replacement string to add to database

        Returns
        -------
        Union[GsaReplacementString, None]
        """
        data = self._create_replacement_string_with_http_info(
            database_key, body, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _create_replacement_string_with_http_info(
        self,
        database_key: "str",
        body: "Optional[GsaCreateReplacementString]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "body",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method create_replacement_string"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'create_replacement_string'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        if "body" in params and body is not None:
            body_params = params["body"]
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header 'Content-Type'
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            ["application/json-patch+json", "application/json", "text/json", "application/*+json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            201: "GsaReplacementString",
            400: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/replacement-strings",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def delete_replacement_string(
        self, *, database_key: "str", replacement_string_guid: "str"
    ) -> "None":
        """Delete a replacement string

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
            Database in which replacement string will be search for
        replacement_string_guid: str
            Guid of replacement string to delete

        Returns
        -------
        None
        """
        data = self._delete_replacement_string_with_http_info(
            database_key, replacement_string_guid, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _delete_replacement_string_with_http_info(
        self, database_key: "str", replacement_string_guid: "str", **kwargs: Any
    ) -> Any:
        all_params = [
            "database_key",
            "replacement_string_guid",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method delete_replacement_string"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'delete_replacement_string'"
            )
        # verify the required parameter "replacement_string_guid" is set
        if "replacement_string_guid" not in params or params["replacement_string_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'replacement_string_guid' when calling 'delete_replacement_string'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "replacement_string_guid" in params and replacement_string_guid is not None:
            path_params["replacement-string-guid"] = params["replacement_string_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None

        response_type_map: dict[int, Optional[str]] = {
            200: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/replacement-strings/{replacement-string-guid}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def get_replacement_string(
        self, *, database_key: "str", replacement_string_guid: "str"
    ) -> "Union[GsaReplacementString, None]":
        """Get individual replacement string

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
            Database in which replacement string will be searched for
        replacement_string_guid: str
            Guid of requested replacement string

        Returns
        -------
        Union[GsaReplacementString, None]
        """
        data = self._get_replacement_string_with_http_info(
            database_key, replacement_string_guid, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _get_replacement_string_with_http_info(
        self, database_key: "str", replacement_string_guid: "str", **kwargs: Any
    ) -> Any:
        all_params = [
            "database_key",
            "replacement_string_guid",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method get_replacement_string"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'get_replacement_string'"
            )
        # verify the required parameter "replacement_string_guid" is set
        if "replacement_string_guid" not in params or params["replacement_string_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'replacement_string_guid' when calling 'get_replacement_string'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "replacement_string_guid" in params and replacement_string_guid is not None:
            path_params["replacement-string-guid"] = params["replacement_string_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaReplacementString",
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/replacement-strings/{replacement-string-guid}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def get_replacement_strings(
        self, *, database_key: "str"
    ) -> "Union[GsaReplacementStringsInfo, None]":
        """Get all replacement strings

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
            Database in which replacement strings will be searched for

        Returns
        -------
        Union[GsaReplacementStringsInfo, None]
        """
        data = self._get_replacement_strings_with_http_info(
            database_key, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _get_replacement_strings_with_http_info(self, database_key: "str", **kwargs: Any) -> Any:
        all_params = [
            "database_key",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method get_replacement_strings"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'get_replacement_strings'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaReplacementStringsInfo",
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/replacement-strings",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def update_replacement_string(
        self,
        *,
        database_key: "str",
        replacement_string_guid: "str",
        body: "Optional[GsaUpdateReplacementString]" = None,
    ) -> "Union[GsaReplacementString, None]":
        """Update a replacement string.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
            Database in which replacement string will be search for
        replacement_string_guid: str
            Guid of replacement string to update
        body: GsaUpdateReplacementString
            Replacement string data to be updated

        Returns
        -------
        Union[GsaReplacementString, None]
        """
        data = self._update_replacement_string_with_http_info(
            database_key, replacement_string_guid, body, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _update_replacement_string_with_http_info(
        self,
        database_key: "str",
        replacement_string_guid: "str",
        body: "Optional[GsaUpdateReplacementString]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "replacement_string_guid",
            "body",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method update_replacement_string"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'update_replacement_string'"
            )
        # verify the required parameter "replacement_string_guid" is set
        if "replacement_string_guid" not in params or params["replacement_string_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'replacement_string_guid' when calling 'update_replacement_string'"
            )

        collection_formats: dict[str, Any] = {}

        path_params: dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "replacement_string_guid" in params and replacement_string_guid is not None:
            path_params["replacement-string-guid"] = params["replacement_string_guid"]

        query_params: list[Any] = []

        header_params: dict[str, Any] = {}

        form_params: list[Any] = []
        local_var_files: dict[str, Any] = {}

        body_params = None
        if "body" in params and body is not None:
            body_params = params["body"]
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # HTTP header 'Content-Type'
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            ["application/json-patch+json", "application/json", "text/json", "application/*+json"]
        )

        response_type_map: dict[int, Optional[str]] = {
            200: "GsaReplacementString",
            400: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/replacement-strings/{replacement-string-guid}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )
