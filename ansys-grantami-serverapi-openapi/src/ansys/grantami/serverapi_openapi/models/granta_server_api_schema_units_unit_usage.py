# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from . import ModelBase


class GrantaServerApiSchemaUnitsUnitUsage(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attributes': 'list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]',
        'parameters': 'list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]',
        'constants': 'list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]',
        'expressions': 'list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]',
        'units': 'list[GrantaServerApiSchemaSlimEntitiesSlimUnit]'
    }

    attribute_map = {
        'attributes': 'attributes',
        'parameters': 'parameters',
        'constants': 'constants',
        'expressions': 'expressions',
        'units': 'units'
    }

    subtype_mapping = {
        'attributes': 'GrantaServerApiSchemaSlimEntitiesSlimNamedEntity',
        'parameters': 'GrantaServerApiSchemaSlimEntitiesSlimNamedEntity',
        'constants': 'GrantaServerApiSchemaSlimEntitiesSlimNamedEntity',
        'expressions': 'GrantaServerApiSchemaSlimEntitiesSlimNamedEntity',
        'units': 'GrantaServerApiSchemaSlimEntitiesSlimUnit'
    }


    def __init__(self, attributes=None, parameters=None, constants=None, expressions=None, units=None):  # noqa: E501
        """GrantaServerApiSchemaUnitsUnitUsage - a model defined in Swagger"""  # noqa: E501
        self._attributes = None
        self._parameters = None
        self._constants = None
        self._expressions = None
        self._units = None
        self.discriminator = None
        if attributes is not None:
            self.attributes = attributes
        if parameters is not None:
            self.parameters = parameters
        if constants is not None:
            self.constants = constants
        if expressions is not None:
            self.expressions = expressions
        if units is not None:
            self.units = units

    @property
    def attributes(self):
        """Gets the attributes of this GrantaServerApiSchemaUnitsUnitUsage.  # noqa: E501

        :return: The attributes of this GrantaServerApiSchemaUnitsUnitUsage.  # noqa: E501
        :rtype: list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this GrantaServerApiSchemaUnitsUnitUsage.

        :param attributes: The attributes of this GrantaServerApiSchemaUnitsUnitUsage.  # noqa: E501
        :type: list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]
        """
        self._attributes = attributes

    @property
    def parameters(self):
        """Gets the parameters of this GrantaServerApiSchemaUnitsUnitUsage.  # noqa: E501

        :return: The parameters of this GrantaServerApiSchemaUnitsUnitUsage.  # noqa: E501
        :rtype: list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this GrantaServerApiSchemaUnitsUnitUsage.

        :param parameters: The parameters of this GrantaServerApiSchemaUnitsUnitUsage.  # noqa: E501
        :type: list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]
        """
        self._parameters = parameters

    @property
    def constants(self):
        """Gets the constants of this GrantaServerApiSchemaUnitsUnitUsage.  # noqa: E501

        :return: The constants of this GrantaServerApiSchemaUnitsUnitUsage.  # noqa: E501
        :rtype: list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]
        """
        return self._constants

    @constants.setter
    def constants(self, constants):
        """Sets the constants of this GrantaServerApiSchemaUnitsUnitUsage.

        :param constants: The constants of this GrantaServerApiSchemaUnitsUnitUsage.  # noqa: E501
        :type: list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]
        """
        self._constants = constants

    @property
    def expressions(self):
        """Gets the expressions of this GrantaServerApiSchemaUnitsUnitUsage.  # noqa: E501

        :return: The expressions of this GrantaServerApiSchemaUnitsUnitUsage.  # noqa: E501
        :rtype: list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]
        """
        return self._expressions

    @expressions.setter
    def expressions(self, expressions):
        """Sets the expressions of this GrantaServerApiSchemaUnitsUnitUsage.

        :param expressions: The expressions of this GrantaServerApiSchemaUnitsUnitUsage.  # noqa: E501
        :type: list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]
        """
        self._expressions = expressions

    @property
    def units(self):
        """Gets the units of this GrantaServerApiSchemaUnitsUnitUsage.  # noqa: E501

        :return: The units of this GrantaServerApiSchemaUnitsUnitUsage.  # noqa: E501
        :rtype: list[GrantaServerApiSchemaSlimEntitiesSlimUnit]
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this GrantaServerApiSchemaUnitsUnitUsage.

        :param units: The units of this GrantaServerApiSchemaUnitsUnitUsage.  # noqa: E501
        :type: list[GrantaServerApiSchemaSlimEntitiesSlimUnit]
        """
        self._units = units

    def get_real_child_model(self, data):
        """Raises a NotImplementedError for a type without a discriminator defined."""
        raise NotImplementedError()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiSchemaUnitsUnitUsage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiSchemaUnitsUnitUsage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
