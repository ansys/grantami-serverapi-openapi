# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from . import ModelBase


class GrantaServerApiAggregationsTableFilter(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identity': 'int',
        'name': 'str',
        'subset_identity': 'int',
        'attributes': 'list[GrantaServerApiAggregationsAggregationAttribute]'
    }

    attribute_map = {
        'identity': 'identity',
        'name': 'name',
        'subset_identity': 'subsetIdentity',
        'attributes': 'attributes'
    }

    subtype_mapping = {
        'attributes': 'GrantaServerApiAggregationsAggregationAttribute'
    }


    def __init__(self, identity=None, name=None, subset_identity=None, attributes=None):  # noqa: E501
        """GrantaServerApiAggregationsTableFilter - a model defined in Swagger"""  # noqa: E501
        self._identity = None
        self._name = None
        self._subset_identity = None
        self._attributes = None
        self.discriminator = None
        if identity is not None:
            self.identity = identity
        if name is not None:
            self.name = name
        if subset_identity is not None:
            self.subset_identity = subset_identity
        if attributes is not None:
            self.attributes = attributes

    @property
    def identity(self):
        """Gets the identity of this GrantaServerApiAggregationsTableFilter.  # noqa: E501

        :return: The identity of this GrantaServerApiAggregationsTableFilter.  # noqa: E501
        :rtype: int
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this GrantaServerApiAggregationsTableFilter.

        :param identity: The identity of this GrantaServerApiAggregationsTableFilter.  # noqa: E501
        :type: int
        """
        self._identity = identity

    @property
    def name(self):
        """Gets the name of this GrantaServerApiAggregationsTableFilter.  # noqa: E501

        :return: The name of this GrantaServerApiAggregationsTableFilter.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GrantaServerApiAggregationsTableFilter.

        :param name: The name of this GrantaServerApiAggregationsTableFilter.  # noqa: E501
        :type: str
        """
        self._name = name

    @property
    def subset_identity(self):
        """Gets the subset_identity of this GrantaServerApiAggregationsTableFilter.  # noqa: E501

        :return: The subset_identity of this GrantaServerApiAggregationsTableFilter.  # noqa: E501
        :rtype: int
        """
        return self._subset_identity

    @subset_identity.setter
    def subset_identity(self, subset_identity):
        """Sets the subset_identity of this GrantaServerApiAggregationsTableFilter.

        :param subset_identity: The subset_identity of this GrantaServerApiAggregationsTableFilter.  # noqa: E501
        :type: int
        """
        self._subset_identity = subset_identity

    @property
    def attributes(self):
        """Gets the attributes of this GrantaServerApiAggregationsTableFilter.  # noqa: E501

        :return: The attributes of this GrantaServerApiAggregationsTableFilter.  # noqa: E501
        :rtype: list[GrantaServerApiAggregationsAggregationAttribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this GrantaServerApiAggregationsTableFilter.

        :param attributes: The attributes of this GrantaServerApiAggregationsTableFilter.  # noqa: E501
        :type: list[GrantaServerApiAggregationsAggregationAttribute]
        """
        self._attributes = attributes

    def get_real_child_model(self, data):
        """Raises a NotImplementedError for a type without a discriminator defined."""
        raise NotImplementedError()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiAggregationsTableFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiAggregationsTableFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
