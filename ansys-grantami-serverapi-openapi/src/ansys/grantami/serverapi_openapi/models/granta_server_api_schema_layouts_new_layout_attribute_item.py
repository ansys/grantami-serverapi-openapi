# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from . import ModelBase

from ansys.grantami.serverapi_openapi.models.granta_server_api_schema_layouts_new_layout_item import GrantaServerApiSchemaLayoutsNewLayoutItem  # noqa: F401,E501

class GrantaServerApiSchemaLayoutsNewLayoutAttributeItem(GrantaServerApiSchemaLayoutsNewLayoutItem):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_type': 'str',
        'attribute_guid': 'str',
        'required': 'bool',
        'read_only': 'bool',
        'meta_attributes': 'list[GrantaServerApiSchemaLayoutsNewLayoutAttributeItem]',
        'tabular_column_guids': 'list[str]'
    }
    if hasattr(GrantaServerApiSchemaLayoutsNewLayoutItem, "swagger_types"):
        swagger_types.update(GrantaServerApiSchemaLayoutsNewLayoutItem.swagger_types)

    attribute_map = {
        'item_type': 'itemType',
        'attribute_guid': 'attributeGuid',
        'required': 'required',
        'read_only': 'readOnly',
        'meta_attributes': 'metaAttributes',
        'tabular_column_guids': 'tabularColumnGuids'
    }
    if hasattr(GrantaServerApiSchemaLayoutsNewLayoutItem, "attribute_map"):
        attribute_map.update(GrantaServerApiSchemaLayoutsNewLayoutItem.attribute_map)

    subtype_mapping = {
        'metaAttributes': 'GrantaServerApiSchemaLayoutsNewLayoutAttributeItem',
    }


    def __init__(self, item_type='attribute', attribute_guid=None, required=None, read_only=None, meta_attributes=None, tabular_column_guids=None, *args, **kwargs):  # noqa: E501
        """GrantaServerApiSchemaLayoutsNewLayoutAttributeItem - a model defined in Swagger"""  # noqa: E501
        GrantaServerApiSchemaLayoutsNewLayoutItem.__init__(self, *args, **kwargs)
        self._item_type = None
        self._attribute_guid = None
        self._required = None
        self._read_only = None
        self._meta_attributes = None
        self._tabular_column_guids = None
        self.discriminator = None
        self.item_type = item_type
        if attribute_guid is not None:
            self.attribute_guid = attribute_guid
        if required is not None:
            self.required = required
        if read_only is not None:
            self.read_only = read_only
        if meta_attributes is not None:
            self.meta_attributes = meta_attributes
        if tabular_column_guids is not None:
            self.tabular_column_guids = tabular_column_guids

    @property
    def item_type(self):
        """Gets the item_type of this GrantaServerApiSchemaLayoutsNewLayoutAttributeItem.  # noqa: E501

        :return: The item_type of this GrantaServerApiSchemaLayoutsNewLayoutAttributeItem.  # noqa: E501
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this GrantaServerApiSchemaLayoutsNewLayoutAttributeItem.

        :param item_type: The item_type of this GrantaServerApiSchemaLayoutsNewLayoutAttributeItem.  # noqa: E501
        :type: str
        """
        if item_type is None:
            raise ValueError("Invalid value for `item_type`, must not be `None`")  # noqa: E501
        self._item_type = item_type

    @property
    def attribute_guid(self):
        """Gets the attribute_guid of this GrantaServerApiSchemaLayoutsNewLayoutAttributeItem.  # noqa: E501

        :return: The attribute_guid of this GrantaServerApiSchemaLayoutsNewLayoutAttributeItem.  # noqa: E501
        :rtype: str
        """
        return self._attribute_guid

    @attribute_guid.setter
    def attribute_guid(self, attribute_guid):
        """Sets the attribute_guid of this GrantaServerApiSchemaLayoutsNewLayoutAttributeItem.

        :param attribute_guid: The attribute_guid of this GrantaServerApiSchemaLayoutsNewLayoutAttributeItem.  # noqa: E501
        :type: str
        """
        self._attribute_guid = attribute_guid

    @property
    def required(self):
        """Gets the required of this GrantaServerApiSchemaLayoutsNewLayoutAttributeItem.  # noqa: E501

        :return: The required of this GrantaServerApiSchemaLayoutsNewLayoutAttributeItem.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this GrantaServerApiSchemaLayoutsNewLayoutAttributeItem.

        :param required: The required of this GrantaServerApiSchemaLayoutsNewLayoutAttributeItem.  # noqa: E501
        :type: bool
        """
        self._required = required

    @property
    def read_only(self):
        """Gets the read_only of this GrantaServerApiSchemaLayoutsNewLayoutAttributeItem.  # noqa: E501

        :return: The read_only of this GrantaServerApiSchemaLayoutsNewLayoutAttributeItem.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this GrantaServerApiSchemaLayoutsNewLayoutAttributeItem.

        :param read_only: The read_only of this GrantaServerApiSchemaLayoutsNewLayoutAttributeItem.  # noqa: E501
        :type: bool
        """
        self._read_only = read_only

    @property
    def meta_attributes(self):
        """Gets the meta_attributes of this GrantaServerApiSchemaLayoutsNewLayoutAttributeItem.  # noqa: E501

        :return: The meta_attributes of this GrantaServerApiSchemaLayoutsNewLayoutAttributeItem.  # noqa: E501
        :rtype: list[GrantaServerApiSchemaLayoutsNewLayoutAttributeItem]
        """
        return self._meta_attributes

    @meta_attributes.setter
    def meta_attributes(self, meta_attributes):
        """Sets the meta_attributes of this GrantaServerApiSchemaLayoutsNewLayoutAttributeItem.

        :param meta_attributes: The meta_attributes of this GrantaServerApiSchemaLayoutsNewLayoutAttributeItem.  # noqa: E501
        :type: list[GrantaServerApiSchemaLayoutsNewLayoutAttributeItem]
        """
        self._meta_attributes = meta_attributes

    @property
    def tabular_column_guids(self):
        """Gets the tabular_column_guids of this GrantaServerApiSchemaLayoutsNewLayoutAttributeItem.  # noqa: E501

        :return: The tabular_column_guids of this GrantaServerApiSchemaLayoutsNewLayoutAttributeItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._tabular_column_guids

    @tabular_column_guids.setter
    def tabular_column_guids(self, tabular_column_guids):
        """Sets the tabular_column_guids of this GrantaServerApiSchemaLayoutsNewLayoutAttributeItem.

        :param tabular_column_guids: The tabular_column_guids of this GrantaServerApiSchemaLayoutsNewLayoutAttributeItem.  # noqa: E501
        :type: list[str]
        """
        self._tabular_column_guids = tabular_column_guids

    def get_real_child_model(self, data):
        """Raises a NotImplementedError for a type without a discriminator defined."""
        raise NotImplementedError()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiSchemaLayoutsNewLayoutAttributeItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiSchemaLayoutsNewLayoutAttributeItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
