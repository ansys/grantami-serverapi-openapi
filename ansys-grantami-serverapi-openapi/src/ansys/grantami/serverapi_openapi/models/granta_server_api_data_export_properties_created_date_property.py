"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import (
    TYPE_CHECKING,
    Any,
    Dict,
    List,
    BinaryIO,
    Optional,
    Union,
)  # noqa: F401

from . import ModelBase
from ansys.grantami.serverapi_openapi.models.granta_server_api_data_export_properties_property import (
    GrantaServerApiDataExportPropertiesProperty,
)  # noqa: F401


if TYPE_CHECKING:
    from datetime import datetime
    import pathlib
    from . import *


class GrantaServerApiDataExportPropertiesCreatedDateProperty(
    GrantaServerApiDataExportPropertiesProperty
):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: Dict[str, str] = {
        "created_date": "datetime",
        "property_name": "str",
    }

    attribute_map: Dict[str, str] = {
        "created_date": "createdDate",
        "property_name": "propertyName",
    }

    subtype_mapping: Dict[str, str] = {}

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        created_date: "Optional[datetime]" = None,
        property_name: "str" = "createdDate",
    ) -> None:
        """GrantaServerApiDataExportPropertiesCreatedDateProperty - a model defined in Swagger

        Parameters
        ----------
            created_date: datetime, optional
            property_name: str
        """
        super().__init__()
        self._property_name: str = None  # type: ignore[assignment]
        self._created_date = None

        self.property_name = property_name
        if created_date is not None:
            self.created_date = created_date

    @property
    def property_name(self) -> "str":
        """Gets the property_name of this GrantaServerApiDataExportPropertiesCreatedDateProperty.

        Returns
        -------
        str
            The property_name of this GrantaServerApiDataExportPropertiesCreatedDateProperty.
        """
        return self._property_name

    @property_name.setter
    def property_name(self, property_name: "str") -> None:
        """Sets the property_name of this GrantaServerApiDataExportPropertiesCreatedDateProperty.

        Parameters
        ----------
        property_name: str
            The property_name of this GrantaServerApiDataExportPropertiesCreatedDateProperty.
        """
        if property_name is None:
            raise ValueError("Invalid value for 'property_name', must not be 'None'")
        self._property_name = property_name

    @property
    def created_date(self) -> "Optional[datetime]":
        """Gets the created_date of this GrantaServerApiDataExportPropertiesCreatedDateProperty.

        Returns
        -------
        datetime
            The created_date of this GrantaServerApiDataExportPropertiesCreatedDateProperty.
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date: "Optional[datetime]") -> None:
        """Sets the created_date of this GrantaServerApiDataExportPropertiesCreatedDateProperty.

        Parameters
        ----------
        created_date: datetime
            The created_date of this GrantaServerApiDataExportPropertiesCreatedDateProperty.
        """
        self._created_date = created_date

    @classmethod
    def get_real_child_model(cls, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()  # type: ignore[no-any-return]

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(
            other, GrantaServerApiDataExportPropertiesCreatedDateProperty
        ):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
