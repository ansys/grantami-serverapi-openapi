# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from . import ModelBase


class GrantaServerApiListsDtoRecordListHeader(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'str',
        'metadata': 'dict(str, dict(str, object))',
        'parent_record_list_identifier': 'str',
        'created_timestamp': 'datetime',
        'created_user': 'GrantaServerApiListsDtoUserOrGroup',
        'last_modified_timestamp': 'datetime',
        'last_modified_user': 'GrantaServerApiListsDtoUserOrGroup',
        'published_timestamp': 'datetime',
        'published_user': 'GrantaServerApiListsDtoUserOrGroup',
        'is_revision': 'bool',
        'name': 'str',
        'description': 'str',
        'notes': 'str',
        'published': 'bool',
        'awaiting_approval': 'bool',
        'internal_use': 'bool'
    }

    attribute_map = {
        'identifier': 'identifier',
        'metadata': 'metadata',
        'parent_record_list_identifier': 'parentRecordListIdentifier',
        'created_timestamp': 'createdTimestamp',
        'created_user': 'createdUser',
        'last_modified_timestamp': 'lastModifiedTimestamp',
        'last_modified_user': 'lastModifiedUser',
        'published_timestamp': 'publishedTimestamp',
        'published_user': 'publishedUser',
        'is_revision': 'isRevision',
        'name': 'name',
        'description': 'description',
        'notes': 'notes',
        'published': 'published',
        'awaiting_approval': 'awaitingApproval',
        'internal_use': 'internalUse'
    }

    subtype_mapping = {
        'createdUser': 'GrantaServerApiListsDtoUserOrGroup',
        'lastModifiedUser': 'GrantaServerApiListsDtoUserOrGroup',
        'publishedUser': 'GrantaServerApiListsDtoUserOrGroup',
    }


    def __init__(self, identifier=None, metadata=None, parent_record_list_identifier=None, created_timestamp=None, created_user=None, last_modified_timestamp=None, last_modified_user=None, published_timestamp=None, published_user=None, is_revision=None, name=None, description=None, notes=None, published=None, awaiting_approval=None, internal_use=None):  # noqa: E501
        """GrantaServerApiListsDtoRecordListHeader - a model defined in Swagger"""  # noqa: E501
        self._identifier = None
        self._metadata = None
        self._parent_record_list_identifier = None
        self._created_timestamp = None
        self._created_user = None
        self._last_modified_timestamp = None
        self._last_modified_user = None
        self._published_timestamp = None
        self._published_user = None
        self._is_revision = None
        self._name = None
        self._description = None
        self._notes = None
        self._published = None
        self._awaiting_approval = None
        self._internal_use = None
        self.discriminator = None
        if identifier is not None:
            self.identifier = identifier
        if metadata is not None:
            self.metadata = metadata
        if parent_record_list_identifier is not None:
            self.parent_record_list_identifier = parent_record_list_identifier
        if created_timestamp is not None:
            self.created_timestamp = created_timestamp
        if created_user is not None:
            self.created_user = created_user
        if last_modified_timestamp is not None:
            self.last_modified_timestamp = last_modified_timestamp
        if last_modified_user is not None:
            self.last_modified_user = last_modified_user
        if published_timestamp is not None:
            self.published_timestamp = published_timestamp
        if published_user is not None:
            self.published_user = published_user
        if is_revision is not None:
            self.is_revision = is_revision
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if notes is not None:
            self.notes = notes
        if published is not None:
            self.published = published
        if awaiting_approval is not None:
            self.awaiting_approval = awaiting_approval
        if internal_use is not None:
            self.internal_use = internal_use

    @property
    def identifier(self):
        """Gets the identifier of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501

        :return: The identifier of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this GrantaServerApiListsDtoRecordListHeader.

        :param identifier: The identifier of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :type: str
        """
        self._identifier = identifier

    @property
    def metadata(self):
        """Gets the metadata of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501

        :return: The metadata of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :rtype: dict(str, dict(str, object))
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this GrantaServerApiListsDtoRecordListHeader.

        :param metadata: The metadata of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :type: dict(str, dict(str, object))
        """
        self._metadata = metadata

    @property
    def parent_record_list_identifier(self):
        """Gets the parent_record_list_identifier of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501

        :return: The parent_record_list_identifier of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :rtype: str
        """
        return self._parent_record_list_identifier

    @parent_record_list_identifier.setter
    def parent_record_list_identifier(self, parent_record_list_identifier):
        """Sets the parent_record_list_identifier of this GrantaServerApiListsDtoRecordListHeader.

        :param parent_record_list_identifier: The parent_record_list_identifier of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :type: str
        """
        self._parent_record_list_identifier = parent_record_list_identifier

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501

        :return: The created_timestamp of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :rtype: datetime
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this GrantaServerApiListsDtoRecordListHeader.

        :param created_timestamp: The created_timestamp of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :type: datetime
        """
        self._created_timestamp = created_timestamp

    @property
    def created_user(self):
        """Gets the created_user of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501

        :return: The created_user of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :rtype: GrantaServerApiListsDtoUserOrGroup
        """
        return self._created_user

    @created_user.setter
    def created_user(self, created_user):
        """Sets the created_user of this GrantaServerApiListsDtoRecordListHeader.

        :param created_user: The created_user of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :type: GrantaServerApiListsDtoUserOrGroup
        """
        self._created_user = created_user

    @property
    def last_modified_timestamp(self):
        """Gets the last_modified_timestamp of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501

        :return: The last_modified_timestamp of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_timestamp

    @last_modified_timestamp.setter
    def last_modified_timestamp(self, last_modified_timestamp):
        """Sets the last_modified_timestamp of this GrantaServerApiListsDtoRecordListHeader.

        :param last_modified_timestamp: The last_modified_timestamp of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :type: datetime
        """
        self._last_modified_timestamp = last_modified_timestamp

    @property
    def last_modified_user(self):
        """Gets the last_modified_user of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501

        :return: The last_modified_user of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :rtype: GrantaServerApiListsDtoUserOrGroup
        """
        return self._last_modified_user

    @last_modified_user.setter
    def last_modified_user(self, last_modified_user):
        """Sets the last_modified_user of this GrantaServerApiListsDtoRecordListHeader.

        :param last_modified_user: The last_modified_user of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :type: GrantaServerApiListsDtoUserOrGroup
        """
        self._last_modified_user = last_modified_user

    @property
    def published_timestamp(self):
        """Gets the published_timestamp of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501

        :return: The published_timestamp of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :rtype: datetime
        """
        return self._published_timestamp

    @published_timestamp.setter
    def published_timestamp(self, published_timestamp):
        """Sets the published_timestamp of this GrantaServerApiListsDtoRecordListHeader.

        :param published_timestamp: The published_timestamp of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :type: datetime
        """
        self._published_timestamp = published_timestamp

    @property
    def published_user(self):
        """Gets the published_user of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501

        :return: The published_user of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :rtype: GrantaServerApiListsDtoUserOrGroup
        """
        return self._published_user

    @published_user.setter
    def published_user(self, published_user):
        """Sets the published_user of this GrantaServerApiListsDtoRecordListHeader.

        :param published_user: The published_user of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :type: GrantaServerApiListsDtoUserOrGroup
        """
        self._published_user = published_user

    @property
    def is_revision(self):
        """Gets the is_revision of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501

        :return: The is_revision of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :rtype: bool
        """
        return self._is_revision

    @is_revision.setter
    def is_revision(self, is_revision):
        """Sets the is_revision of this GrantaServerApiListsDtoRecordListHeader.

        :param is_revision: The is_revision of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :type: bool
        """
        self._is_revision = is_revision

    @property
    def name(self):
        """Gets the name of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501

        :return: The name of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GrantaServerApiListsDtoRecordListHeader.

        :param name: The name of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :type: str
        """
        self._name = name

    @property
    def description(self):
        """Gets the description of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501

        :return: The description of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GrantaServerApiListsDtoRecordListHeader.

        :param description: The description of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :type: str
        """
        self._description = description

    @property
    def notes(self):
        """Gets the notes of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501

        :return: The notes of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this GrantaServerApiListsDtoRecordListHeader.

        :param notes: The notes of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :type: str
        """
        self._notes = notes

    @property
    def published(self):
        """Gets the published of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501

        :return: The published of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this GrantaServerApiListsDtoRecordListHeader.

        :param published: The published of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :type: bool
        """
        self._published = published

    @property
    def awaiting_approval(self):
        """Gets the awaiting_approval of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501

        :return: The awaiting_approval of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :rtype: bool
        """
        return self._awaiting_approval

    @awaiting_approval.setter
    def awaiting_approval(self, awaiting_approval):
        """Sets the awaiting_approval of this GrantaServerApiListsDtoRecordListHeader.

        :param awaiting_approval: The awaiting_approval of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :type: bool
        """
        self._awaiting_approval = awaiting_approval

    @property
    def internal_use(self):
        """Gets the internal_use of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501

        :return: The internal_use of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :rtype: bool
        """
        return self._internal_use

    @internal_use.setter
    def internal_use(self, internal_use):
        """Sets the internal_use of this GrantaServerApiListsDtoRecordListHeader.

        :param internal_use: The internal_use of this GrantaServerApiListsDtoRecordListHeader.  # noqa: E501
        :type: bool
        """
        self._internal_use = internal_use

    def get_real_child_model(self, data):
        """Raises a NotImplementedError for a type without a discriminator defined."""
        raise NotImplementedError()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiListsDtoRecordListHeader, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiListsDtoRecordListHeader):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
