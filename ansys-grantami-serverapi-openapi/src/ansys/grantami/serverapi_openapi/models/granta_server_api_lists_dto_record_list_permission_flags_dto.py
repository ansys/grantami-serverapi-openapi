# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from . import ModelBase


class GrantaServerApiListsDtoRecordListPermissionFlagsDto(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_owner': 'bool',
        'is_subscribed': 'bool',
        'is_curator': 'bool',
        'is_administrator': 'bool',
        'is_publisher': 'bool'
    }

    attribute_map = {
        'is_owner': 'isOwner',
        'is_subscribed': 'isSubscribed',
        'is_curator': 'isCurator',
        'is_administrator': 'isAdministrator',
        'is_publisher': 'isPublisher'
    }

    subtype_mapping = {
    }


    def __init__(self, is_owner=None, is_subscribed=None, is_curator=None, is_administrator=None, is_publisher=None):  # noqa: E501
        """GrantaServerApiListsDtoRecordListPermissionFlagsDto - a model defined in Swagger"""  # noqa: E501
        self._is_owner = None
        self._is_subscribed = None
        self._is_curator = None
        self._is_administrator = None
        self._is_publisher = None
        self.discriminator = None
        if is_owner is not None:
            self.is_owner = is_owner
        if is_subscribed is not None:
            self.is_subscribed = is_subscribed
        if is_curator is not None:
            self.is_curator = is_curator
        if is_administrator is not None:
            self.is_administrator = is_administrator
        if is_publisher is not None:
            self.is_publisher = is_publisher

    @property
    def is_owner(self):
        """Gets the is_owner of this GrantaServerApiListsDtoRecordListPermissionFlagsDto.  # noqa: E501
        Flag indicating if the user or group is an owner of this list.  Null means: do not change this flag's value when inserting into database.  # noqa: E501

        :return: The is_owner of this GrantaServerApiListsDtoRecordListPermissionFlagsDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_owner

    @is_owner.setter
    def is_owner(self, is_owner):
        """Sets the is_owner of this GrantaServerApiListsDtoRecordListPermissionFlagsDto.
        Flag indicating if the user or group is an owner of this list.  Null means: do not change this flag's value when inserting into database.  # noqa: E501

        :param is_owner: The is_owner of this GrantaServerApiListsDtoRecordListPermissionFlagsDto.  # noqa: E501
        :type: bool
        """
        self._is_owner = is_owner

    @property
    def is_subscribed(self):
        """Gets the is_subscribed of this GrantaServerApiListsDtoRecordListPermissionFlagsDto.  # noqa: E501
        Flag indicating if the user or group is subscribed to this list.  Null means: do not change this flag's value when inserting into database.  # noqa: E501

        :return: The is_subscribed of this GrantaServerApiListsDtoRecordListPermissionFlagsDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_subscribed

    @is_subscribed.setter
    def is_subscribed(self, is_subscribed):
        """Sets the is_subscribed of this GrantaServerApiListsDtoRecordListPermissionFlagsDto.
        Flag indicating if the user or group is subscribed to this list.  Null means: do not change this flag's value when inserting into database.  # noqa: E501

        :param is_subscribed: The is_subscribed of this GrantaServerApiListsDtoRecordListPermissionFlagsDto.  # noqa: E501
        :type: bool
        """
        self._is_subscribed = is_subscribed

    @property
    def is_curator(self):
        """Gets the is_curator of this GrantaServerApiListsDtoRecordListPermissionFlagsDto.  # noqa: E501
        Flag indicating if the user or group is a curator of this list.  Null means: do not change this flag's value when inserting into database.  # noqa: E501

        :return: The is_curator of this GrantaServerApiListsDtoRecordListPermissionFlagsDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_curator

    @is_curator.setter
    def is_curator(self, is_curator):
        """Sets the is_curator of this GrantaServerApiListsDtoRecordListPermissionFlagsDto.
        Flag indicating if the user or group is a curator of this list.  Null means: do not change this flag's value when inserting into database.  # noqa: E501

        :param is_curator: The is_curator of this GrantaServerApiListsDtoRecordListPermissionFlagsDto.  # noqa: E501
        :type: bool
        """
        self._is_curator = is_curator

    @property
    def is_administrator(self):
        """Gets the is_administrator of this GrantaServerApiListsDtoRecordListPermissionFlagsDto.  # noqa: E501
        Flag indicating if the user or group is an administrator of this list.  Null means: do not change this flag's value when inserting into database.  # noqa: E501

        :return: The is_administrator of this GrantaServerApiListsDtoRecordListPermissionFlagsDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_administrator

    @is_administrator.setter
    def is_administrator(self, is_administrator):
        """Sets the is_administrator of this GrantaServerApiListsDtoRecordListPermissionFlagsDto.
        Flag indicating if the user or group is an administrator of this list.  Null means: do not change this flag's value when inserting into database.  # noqa: E501

        :param is_administrator: The is_administrator of this GrantaServerApiListsDtoRecordListPermissionFlagsDto.  # noqa: E501
        :type: bool
        """
        self._is_administrator = is_administrator

    @property
    def is_publisher(self):
        """Gets the is_publisher of this GrantaServerApiListsDtoRecordListPermissionFlagsDto.  # noqa: E501
        Flag indicating if this user or group is a publisher of this list.  Null means: do not change this flag's value when inserting into database.  # noqa: E501

        :return: The is_publisher of this GrantaServerApiListsDtoRecordListPermissionFlagsDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_publisher

    @is_publisher.setter
    def is_publisher(self, is_publisher):
        """Sets the is_publisher of this GrantaServerApiListsDtoRecordListPermissionFlagsDto.
        Flag indicating if this user or group is a publisher of this list.  Null means: do not change this flag's value when inserting into database.  # noqa: E501

        :param is_publisher: The is_publisher of this GrantaServerApiListsDtoRecordListPermissionFlagsDto.  # noqa: E501
        :type: bool
        """
        self._is_publisher = is_publisher

    def get_real_child_model(self, data):
        """Raises a NotImplementedError for a type without a discriminator defined."""
        raise NotImplementedError()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiListsDtoRecordListPermissionFlagsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiListsDtoRecordListPermissionFlagsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
