"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional, Union  # noqa: F401

from . import ModelBase, Unset, Unset_Type


if TYPE_CHECKING:
    from datetime import datetime
    import pathlib
    from . import *


class GsaDatumCriterion(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator_class_map: dict[str, str]
        They key is discriminator value and the value is associated subtype.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "type": "GsaDatumCriterionType",
    }

    attribute_map: dict[str, str] = {
        "type": "type",
    }

    subtype_mapping: dict[str, str] = {
        "type": "GsaDatumCriterionType",
    }

    discriminator_value_class_map = {
        "dateTime".lower(): "#/components/schemas/GsaDateTimeDatumCriterion",
        "discreteFunctionalRange".lower(): "#/components/schemas/GsaDiscreteFunctionalRangeDatumCriterion",
        "discreteFunctionalValues".lower(): "#/components/schemas/GsaDiscreteFunctionalValuesDatumCriterion",
        "discreteIdentity".lower(): "#/components/schemas/GsaDiscreteIdentityDatumCriterion",
        "discreteIdentityValues".lower(): "#/components/schemas/GsaDiscreteIdentityValuesDatumCriterion",
        "discreteGuid".lower(): "#/components/schemas/GsaDiscreteGuidDatumCriterion",
        "discreteGuidValues".lower(): "#/components/schemas/GsaDiscreteGuidValuesDatumCriterion",
        "discreteRange".lower(): "#/components/schemas/GsaDiscreteRangeDatumCriterion",
        "discreteText".lower(): "#/components/schemas/GsaDiscreteTextDatumCriterion",
        "discreteTextPrefix".lower(): "#/components/schemas/GsaDiscreteTextPrefixDatumCriterion",
        "discreteTextValues".lower(): "#/components/schemas/GsaDiscreteTextValuesDatumCriterion",
        "file".lower(): "#/components/schemas/GsaFileDatumCriterion",
        "filePrefix".lower(): "#/components/schemas/GsaFilePrefixDatumCriterion",
        "floatFunctionalData".lower(): "#/components/schemas/GsaFloatFunctionalDatumCriterion",
        "floatFunctionalGraph".lower(): "#/components/schemas/GsaFloatFunctionalGraphDatumCriterion",
        "hyperlink".lower(): "#/components/schemas/GsaHyperlinkDatumCriterion",
        "hyperlinkPrefix".lower(): "#/components/schemas/GsaHyperlinkPrefixDatumCriterion",
        "integer".lower(): "#/components/schemas/GsaIntegerDatumCriterion",
        "link".lower(): "#/components/schemas/GsaLinkDatumCriterion",
        "logical".lower(): "#/components/schemas/GsaLogicalDatumCriterion",
        "longText".lower(): "#/components/schemas/GsaLongTextDatumCriterion",
        "longTextPrefix".lower(): "#/components/schemas/GsaLongTextPrefixDatumCriterion",
        "mathsFunctional".lower(): "#/components/schemas/GsaMathsFunctionalDatumCriterion",
        "picture".lower(): "#/components/schemas/GsaPictureDatumCriterion",
        "point".lower(): "#/components/schemas/GsaPointDatumCriterion",
        "range".lower(): "#/components/schemas/GsaRangeDatumCriterion",
        "shortText".lower(): "#/components/schemas/GsaShortTextDatumCriterion",
        "shortTextPrefix".lower(): "#/components/schemas/GsaShortTextPrefixDatumCriterion",
        "dynamicLinkingValue".lower(): "#/components/schemas/GsaLinkingValueExistsDatumCriterion",
    }

    discriminator: Optional[str] = "type"

    def __init__(self, *, type: "GsaDatumCriterionType",) -> None:
        """GsaDatumCriterion - a model defined in Swagger

        Parameters
        ----------
        type: GsaDatumCriterionType
        """
        self._type: GsaDatumCriterionType

        self.type = type

    @property
    def type(self) -> "GsaDatumCriterionType":
        """Gets the type of this GsaDatumCriterion.

        Returns
        -------
        GsaDatumCriterionType
            The type of this GsaDatumCriterion.
        """
        return self._type

    @type.setter
    def type(self, type: "GsaDatumCriterionType") -> None:
        """Sets the type of this GsaDatumCriterion.

        Parameters
        ----------
        type: GsaDatumCriterionType
            The type of this GsaDatumCriterion.
        """
        # Field is not nullable
        if type is None:
            raise ValueError("Invalid value for 'type', must not be 'None'")
        # Field is required
        if type is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'type', must not be 'Unset'")
        self._type = type

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Returns the real base class as determined by the discriminator

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class
        """
        discriminator_value = str(data[cls._get_discriminator_field_name()]).lower()
        # The actual class name is not available in swagger-codegen,
        # so we have to extract it from the JSON reference
        return cls.discriminator_value_class_map[discriminator_value].rsplit("/", 1)[-1]

    @classmethod
    def _get_discriminator_field_name(cls) -> str:
        assert cls.discriminator
        name_tokens = cls.discriminator.split("_")
        later_tokens = [element.capitalize() for element in name_tokens[1:]]
        return "".join([name_tokens[0], *later_tokens])

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaDatumCriterion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other

