"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING, Any, Dict, List, Optional  # noqa: F401

from . import ModelBase


if TYPE_CHECKING:
    from . import *

class GrantaServerApiDataExportExportFailure(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.

    """
    swagger_types = {
        "failed_records": "list[GrantaServerApiIntegrationDataExportRecordReference]",
        "failure_reason": "str",
    }

    attribute_map = {
        "failed_records": "failedRecords",
        "failure_reason": "failureReason",
    }

    subtype_mapping = {
        "failedRecords": "GrantaServerApiIntegrationDataExportRecordReference",
    }

    def __init__(self, *, failed_records: "Optional[List[GrantaServerApiIntegrationDataExportRecordReference]]" = None, failure_reason: "Optional[str]" = None,) -> None:
        """GrantaServerApiDataExportExportFailure - a model defined in Swagger

        Parameters
        ----------
            failed_records: List[GrantaServerApiIntegrationDataExportRecordReference], optional
            failure_reason: str, optional
        """
        self._failure_reason = None
        self._failed_records = None
        self.discriminator = None
        if failure_reason is not None:
            self.failure_reason = failure_reason
        if failed_records is not None:
            self.failed_records = failed_records

    @property
    def failure_reason(self) -> "str":
        """Gets the failure_reason of this GrantaServerApiDataExportExportFailure.

        Returns
        -------
        str
            The failure_reason of this GrantaServerApiDataExportExportFailure.
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason: "str") -> None:
        """Sets the failure_reason of this GrantaServerApiDataExportExportFailure.

        Parameters
        ----------
        failure_reason: str
            The failure_reason of this GrantaServerApiDataExportExportFailure.
        """
        self._failure_reason = failure_reason

    @property
    def failed_records(self) -> "list[GrantaServerApiIntegrationDataExportRecordReference]":
        """Gets the failed_records of this GrantaServerApiDataExportExportFailure.

        Returns
        -------
        list[GrantaServerApiIntegrationDataExportRecordReference]
            The failed_records of this GrantaServerApiDataExportExportFailure.
        """
        return self._failed_records

    @failed_records.setter
    def failed_records(self, failed_records: "list[GrantaServerApiIntegrationDataExportRecordReference]") -> None:
        """Sets the failed_records of this GrantaServerApiDataExportExportFailure.

        Parameters
        ----------
        failed_records: list[GrantaServerApiIntegrationDataExportRecordReference]
            The failed_records of this GrantaServerApiDataExportExportFailure.
        """
        self._failed_records = failed_records

    def get_real_child_model(self, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def to_dict(self) -> Dict:
        """Returns the model properties as a dict

        Returns
        -------
        Dict
            Dictionary indexed by property name containing all the model properties
        """
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiDataExportExportFailure, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model

        Returns
        -------
        str
            String representation of the model as a dictionary
        """
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiDataExportExportFailure):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
