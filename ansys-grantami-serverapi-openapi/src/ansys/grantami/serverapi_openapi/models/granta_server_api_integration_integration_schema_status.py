# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from . import ModelBase


class GrantaServerApiIntegrationIntegrationSchemaStatus(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'loaded_databases': 'list[str]',
        'loading_databases': 'list[str]',
        'not_loaded_databases': 'list[str]',
        'out_of_sync_databases': 'dict(str, list[GrantaServerApiIntegrationIndexRecordFailure])',
        'errored_databases': 'dict(str, str)'
    }

    attribute_map = {
        'loaded_databases': 'loadedDatabases',
        'loading_databases': 'loadingDatabases',
        'not_loaded_databases': 'notLoadedDatabases',
        'out_of_sync_databases': 'outOfSyncDatabases',
        'errored_databases': 'erroredDatabases'
    }

    subtype_mapping = {
    }


    def __init__(self, loaded_databases=None, loading_databases=None, not_loaded_databases=None, out_of_sync_databases=None, errored_databases=None):  # noqa: E501
        """GrantaServerApiIntegrationIntegrationSchemaStatus - a model defined in Swagger"""  # noqa: E501
        self._loaded_databases = None
        self._loading_databases = None
        self._not_loaded_databases = None
        self._out_of_sync_databases = None
        self._errored_databases = None
        self.discriminator = None
        if loaded_databases is not None:
            self.loaded_databases = loaded_databases
        if loading_databases is not None:
            self.loading_databases = loading_databases
        if not_loaded_databases is not None:
            self.not_loaded_databases = not_loaded_databases
        if out_of_sync_databases is not None:
            self.out_of_sync_databases = out_of_sync_databases
        if errored_databases is not None:
            self.errored_databases = errored_databases

    @property
    def loaded_databases(self):
        """Gets the loaded_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        Loaded databases have been successfully indexed into the integration schema. Data from them will be available in searches.  # noqa: E501

        :return: The loaded_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._loaded_databases

    @loaded_databases.setter
    def loaded_databases(self, loaded_databases):
        """Sets the loaded_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.
        Loaded databases have been successfully indexed into the integration schema. Data from them will be available in searches.  # noqa: E501

        :param loaded_databases: The loaded_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :type: list[str]
        """
        self._loaded_databases = loaded_databases

    @property
    def loading_databases(self):
        """Gets the loading_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        Databases which are in the process of loading.  # noqa: E501

        :return: The loading_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._loading_databases

    @loading_databases.setter
    def loading_databases(self, loading_databases):
        """Sets the loading_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.
        Databases which are in the process of loading.  # noqa: E501

        :param loading_databases: The loading_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :type: list[str]
        """
        self._loading_databases = loading_databases

    @property
    def not_loaded_databases(self):
        """Gets the not_loaded_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        Databases that are referenced in the schema but that are not yet loaded. This could be because they are still queued for  load in the MI system, or because they have not yet been added.  # noqa: E501

        :return: The not_loaded_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._not_loaded_databases

    @not_loaded_databases.setter
    def not_loaded_databases(self, not_loaded_databases):
        """Sets the not_loaded_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.
        Databases that are referenced in the schema but that are not yet loaded. This could be because they are still queued for  load in the MI system, or because they have not yet been added.  # noqa: E501

        :param not_loaded_databases: The not_loaded_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :type: list[str]
        """
        self._not_loaded_databases = not_loaded_databases

    @property
    def out_of_sync_databases(self):
        """Gets the out_of_sync_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        These databases have been loaded, but some data has not made it to Elasticsearch. They are available for searching, but results  may not be accurate.  # noqa: E501

        :return: The out_of_sync_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :rtype: dict(str, list[GrantaServerApiIntegrationIndexRecordFailure])
        """
        return self._out_of_sync_databases

    @out_of_sync_databases.setter
    def out_of_sync_databases(self, out_of_sync_databases):
        """Sets the out_of_sync_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.
        These databases have been loaded, but some data has not made it to Elasticsearch. They are available for searching, but results  may not be accurate.  # noqa: E501

        :param out_of_sync_databases: The out_of_sync_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :type: dict(str, list[GrantaServerApiIntegrationIndexRecordFailure])
        """
        self._out_of_sync_databases = out_of_sync_databases

    @property
    def errored_databases(self):
        """Gets the errored_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        Databases that encountered an error while loading. These databases will not be available for searches.  # noqa: E501

        :return: The errored_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._errored_databases

    @errored_databases.setter
    def errored_databases(self, errored_databases):
        """Sets the errored_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.
        Databases that encountered an error while loading. These databases will not be available for searches.  # noqa: E501

        :param errored_databases: The errored_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :type: dict(str, str)
        """
        self._errored_databases = errored_databases


    def get_real_child_model(self, data):
        """Raises a NotImplementedError for a type without a discriminator defined."""
        raise NotImplementedError()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiIntegrationIntegrationSchemaStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiIntegrationIntegrationSchemaStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
