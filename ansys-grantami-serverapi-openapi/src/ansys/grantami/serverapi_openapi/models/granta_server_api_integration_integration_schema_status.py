# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from . import ModelBase


class GrantaServerApiIntegrationIntegrationSchemaStatus(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'loaded_databases': 'list[str]',
        'loading_databases': 'list[str]',
        'not_loaded_databases': 'list[str]',
        'errored_databases': 'dict(str, str)',
        'loaded_database_index_statuses': 'dict(str, GrantaServerApiSearchIndexStatus)',
        'search_index_up_to_date': 'bool',
        'search_index_in_sync': 'bool',
        'search_index_location': 'str',
        'search_index_is_read_only': 'bool',
        'disk_status': 'GrantaServerApiDiskStatus',
        'disk_threshold': 'str',
        'search_index_unavailable': 'bool',
        'records_that_failed_to_index': 'list[GrantaServerApiIndexRecordFailure]'
    }

    attribute_map = {
        'loaded_databases': 'loadedDatabases',
        'loading_databases': 'loadingDatabases',
        'not_loaded_databases': 'notLoadedDatabases',
        'errored_databases': 'erroredDatabases',
        'loaded_database_index_statuses': 'loadedDatabaseIndexStatuses',
        'search_index_up_to_date': 'searchIndexUpToDate',
        'search_index_in_sync': 'searchIndexInSync',
        'search_index_location': 'searchIndexLocation',
        'search_index_is_read_only': 'searchIndexIsReadOnly',
        'disk_status': 'diskStatus',
        'disk_threshold': 'diskThreshold',
        'search_index_unavailable': 'searchIndexUnavailable',
        'records_that_failed_to_index': 'recordsThatFailedToIndex'
    }

    subtype_mapping = {
        'loadedDatabaseIndexStatuses': 'GrantaServerApiSearchIndexStatus',
        'diskStatus': 'GrantaServerApiDiskStatus',
        'recordsThatFailedToIndex': 'GrantaServerApiIndexRecordFailure'
    }


    def __init__(self, loaded_databases=None, loading_databases=None, not_loaded_databases=None, errored_databases=None, loaded_database_index_statuses=None, search_index_up_to_date=None, search_index_in_sync=None, search_index_location=None, search_index_is_read_only=None, disk_status=None, disk_threshold=None, search_index_unavailable=None, records_that_failed_to_index=None):  # noqa: E501
        """GrantaServerApiIntegrationIntegrationSchemaStatus - a model defined in Swagger"""  # noqa: E501
        self._loaded_databases = None
        self._loading_databases = None
        self._not_loaded_databases = None
        self._errored_databases = None
        self._loaded_database_index_statuses = None
        self._search_index_up_to_date = None
        self._search_index_in_sync = None
        self._search_index_location = None
        self._search_index_is_read_only = None
        self._disk_status = None
        self._disk_threshold = None
        self._search_index_unavailable = None
        self._records_that_failed_to_index = None
        self.discriminator = None
        if loaded_databases is not None:
            self.loaded_databases = loaded_databases
        if loading_databases is not None:
            self.loading_databases = loading_databases
        if not_loaded_databases is not None:
            self.not_loaded_databases = not_loaded_databases
        if errored_databases is not None:
            self.errored_databases = errored_databases
        if loaded_database_index_statuses is not None:
            self.loaded_database_index_statuses = loaded_database_index_statuses
        if search_index_up_to_date is not None:
            self.search_index_up_to_date = search_index_up_to_date
        if search_index_in_sync is not None:
            self.search_index_in_sync = search_index_in_sync
        if search_index_location is not None:
            self.search_index_location = search_index_location
        if search_index_is_read_only is not None:
            self.search_index_is_read_only = search_index_is_read_only
        if disk_status is not None:
            self.disk_status = disk_status
        if disk_threshold is not None:
            self.disk_threshold = disk_threshold
        if search_index_unavailable is not None:
            self.search_index_unavailable = search_index_unavailable
        if records_that_failed_to_index is not None:
            self.records_that_failed_to_index = records_that_failed_to_index

    @property
    def loaded_databases(self):
        """Gets the loaded_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        Loaded databases have been successfully indexed into the integration schema.  # noqa: E501

        :return: The loaded_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._loaded_databases

    @loaded_databases.setter
    def loaded_databases(self, loaded_databases):
        """Sets the loaded_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.
        Loaded databases have been successfully indexed into the integration schema.  # noqa: E501

        :param loaded_databases: The loaded_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :type: list[str]
        """
        self._loaded_databases = loaded_databases

    @property
    def loading_databases(self):
        """Gets the loading_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        Databases which are in the process of loading.  # noqa: E501

        :return: The loading_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._loading_databases

    @loading_databases.setter
    def loading_databases(self, loading_databases):
        """Sets the loading_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.
        Databases which are in the process of loading.  # noqa: E501

        :param loading_databases: The loading_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :type: list[str]
        """
        self._loading_databases = loading_databases

    @property
    def not_loaded_databases(self):
        """Gets the not_loaded_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        Databases that are referenced in the schema but that are not yet loaded. This could be because they are still queued for  load in the MI system, or because they have not yet been added.  # noqa: E501

        :return: The not_loaded_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._not_loaded_databases

    @not_loaded_databases.setter
    def not_loaded_databases(self, not_loaded_databases):
        """Sets the not_loaded_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.
        Databases that are referenced in the schema but that are not yet loaded. This could be because they are still queued for  load in the MI system, or because they have not yet been added.  # noqa: E501

        :param not_loaded_databases: The not_loaded_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :type: list[str]
        """
        self._not_loaded_databases = not_loaded_databases

    @property
    def errored_databases(self):
        """Gets the errored_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        Databases that encountered an error while loading. These databases will not be available for searches.  # noqa: E501

        :return: The errored_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._errored_databases

    @errored_databases.setter
    def errored_databases(self, errored_databases):
        """Sets the errored_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.
        Databases that encountered an error while loading. These databases will not be available for searches.  # noqa: E501

        :param errored_databases: The errored_databases of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :type: dict(str, str)
        """
        self._errored_databases = errored_databases

    @property
    def loaded_database_index_statuses(self):
        """Gets the loaded_database_index_statuses of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        Index information about all loaded databases, including the out of sync status.  # noqa: E501

        :return: The loaded_database_index_statuses of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :rtype: dict(str, GrantaServerApiSearchIndexStatus)
        """
        return self._loaded_database_index_statuses

    @loaded_database_index_statuses.setter
    def loaded_database_index_statuses(self, loaded_database_index_statuses):
        """Sets the loaded_database_index_statuses of this GrantaServerApiIntegrationIntegrationSchemaStatus.
        Index information about all loaded databases, including the out of sync status.  # noqa: E501

        :param loaded_database_index_statuses: The loaded_database_index_statuses of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :type: dict(str, GrantaServerApiSearchIndexStatus)
        """
        self._loaded_database_index_statuses = loaded_database_index_statuses

    @property
    def search_index_up_to_date(self):
        """Gets the search_index_up_to_date of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        Whether all changes up to and including the most recent database revision have been sent to the search index. This will return true  even if some of those revisions could not be indexed  # noqa: E501

        :return: The search_index_up_to_date of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :rtype: bool
        """
        return self._search_index_up_to_date

    @search_index_up_to_date.setter
    def search_index_up_to_date(self, search_index_up_to_date):
        """Sets the search_index_up_to_date of this GrantaServerApiIntegrationIntegrationSchemaStatus.
        Whether all changes up to and including the most recent database revision have been sent to the search index. This will return true  even if some of those revisions could not be indexed  # noqa: E501

        :param search_index_up_to_date: The search_index_up_to_date of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :type: bool
        """
        self._search_index_up_to_date = search_index_up_to_date

    @property
    def search_index_in_sync(self):
        """Gets the search_index_in_sync of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        Returns false if the search index is out of sync with the database (i.e. because changes were made that could not be indexed)  # noqa: E501

        :return: The search_index_in_sync of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :rtype: bool
        """
        return self._search_index_in_sync

    @search_index_in_sync.setter
    def search_index_in_sync(self, search_index_in_sync):
        """Sets the search_index_in_sync of this GrantaServerApiIntegrationIntegrationSchemaStatus.
        Returns false if the search index is out of sync with the database (i.e. because changes were made that could not be indexed)  # noqa: E501

        :param search_index_in_sync: The search_index_in_sync of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :type: bool
        """
        self._search_index_in_sync = search_index_in_sync

    @property
    def search_index_location(self):
        """Gets the search_index_location of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        The location of the index.  # noqa: E501

        :return: The search_index_location of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :rtype: str
        """
        return self._search_index_location

    @search_index_location.setter
    def search_index_location(self, search_index_location):
        """Sets the search_index_location of this GrantaServerApiIntegrationIntegrationSchemaStatus.
        The location of the index.  # noqa: E501

        :param search_index_location: The search_index_location of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :type: str
        """
        self._search_index_location = search_index_location

    @property
    def search_index_is_read_only(self):
        """Gets the search_index_is_read_only of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        True if the index is read only.  # noqa: E501

        :return: The search_index_is_read_only of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :rtype: bool
        """
        return self._search_index_is_read_only

    @search_index_is_read_only.setter
    def search_index_is_read_only(self, search_index_is_read_only):
        """Sets the search_index_is_read_only of this GrantaServerApiIntegrationIntegrationSchemaStatus.
        True if the index is read only.  # noqa: E501

        :param search_index_is_read_only: The search_index_is_read_only of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :type: bool
        """
        self._search_index_is_read_only = search_index_is_read_only

    @property
    def disk_status(self):
        """Gets the disk_status of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501

        :return: The disk_status of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :rtype: GrantaServerApiDiskStatus
        """
        return self._disk_status

    @disk_status.setter
    def disk_status(self, disk_status):
        """Sets the disk_status of this GrantaServerApiIntegrationIntegrationSchemaStatus.

        :param disk_status: The disk_status of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :type: GrantaServerApiDiskStatus
        """
        self._disk_status = disk_status

    @property
    def disk_threshold(self):
        """Gets the disk_threshold of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        The 'flood stage' threshold from Elasticsearch.  # noqa: E501

        :return: The disk_threshold of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :rtype: str
        """
        return self._disk_threshold

    @disk_threshold.setter
    def disk_threshold(self, disk_threshold):
        """Sets the disk_threshold of this GrantaServerApiIntegrationIntegrationSchemaStatus.
        The 'flood stage' threshold from Elasticsearch.  # noqa: E501

        :param disk_threshold: The disk_threshold of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :type: str
        """
        self._disk_threshold = disk_threshold

    @property
    def search_index_unavailable(self):
        """Gets the search_index_unavailable of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        True if the index could not be contacted.  # noqa: E501

        :return: The search_index_unavailable of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :rtype: bool
        """
        return self._search_index_unavailable

    @search_index_unavailable.setter
    def search_index_unavailable(self, search_index_unavailable):
        """Sets the search_index_unavailable of this GrantaServerApiIntegrationIntegrationSchemaStatus.
        True if the index could not be contacted.  # noqa: E501

        :param search_index_unavailable: The search_index_unavailable of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :type: bool
        """
        self._search_index_unavailable = search_index_unavailable

    @property
    def records_that_failed_to_index(self):
        """Gets the records_that_failed_to_index of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        Details of any records that failed to index.  # noqa: E501

        :return: The records_that_failed_to_index of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :rtype: list[GrantaServerApiIndexRecordFailure]
        """
        return self._records_that_failed_to_index

    @records_that_failed_to_index.setter
    def records_that_failed_to_index(self, records_that_failed_to_index):
        """Sets the records_that_failed_to_index of this GrantaServerApiIntegrationIntegrationSchemaStatus.
        Details of any records that failed to index.  # noqa: E501

        :param records_that_failed_to_index: The records_that_failed_to_index of this GrantaServerApiIntegrationIntegrationSchemaStatus.  # noqa: E501
        :type: list[GrantaServerApiIndexRecordFailure]
        """
        self._records_that_failed_to_index = records_that_failed_to_index

    def get_real_child_model(self, data):
        """Raises a NotImplementedError for a type without a discriminator defined."""
        raise NotImplementedError()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiIntegrationIntegrationSchemaStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiIntegrationIntegrationSchemaStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
