"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING, Any, Dict, List, Optional  # noqa: F401

from . import ModelBase

from ansys.grantami.serverapi_openapi.models.granta_server_api_aggregations_aggregation_criterion import (
    GrantaServerApiAggregationsAggregationCriterion,
)  # noqa: F401

if TYPE_CHECKING:
    from . import *


class GrantaServerApiAggregationsFreeTextAggregationCriterion(
    GrantaServerApiAggregationsAggregationCriterion
):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.

    """
    swagger_types = {
        "criterion_guid": "str",
        "guids": "list[str]",
        "guids_to_exclude": "list[str]",
        "identities": "list[int]",
        "identities_to_exclude": "list[int]",
        "number_of_terms": "int",
        "prefix": "str",
        "type": "str",
    }

    attribute_map = {
        "criterion_guid": "criterionGuid",
        "guids": "guids",
        "guids_to_exclude": "guidsToExclude",
        "identities": "identities",
        "identities_to_exclude": "identitiesToExclude",
        "number_of_terms": "numberOfTerms",
        "prefix": "prefix",
        "type": "type",
    }

    subtype_mapping = {}

    def __init__(
        self,
        *,
        criterion_guid: "Optional[str]" = None,
        guids: "Optional[List[str]]" = None,
        guids_to_exclude: "Optional[List[str]]" = None,
        identities: "Optional[List[int]]" = None,
        identities_to_exclude: "Optional[List[int]]" = None,
        number_of_terms: "Optional[int]" = None,
        prefix: "Optional[str]" = None,
        type: "str" = "text",
    ) -> None:
        """GrantaServerApiAggregationsFreeTextAggregationCriterion - a model defined in Swagger

        Parameters
        ----------
            criterion_guid: str, optional
            guids: List[str], optional
            guids_to_exclude: List[str], optional
            identities: List[int], optional
            identities_to_exclude: List[int], optional
            number_of_terms: int, optional
            prefix: str, optional
            type: str
        """
        super().__init__()
        self._criterion_guid = None
        self._identities = None
        self._identities_to_exclude = None
        self._guids = None
        self._guids_to_exclude = None
        self._number_of_terms = None
        self._prefix = None
        self._type = None
        self.discriminator = None
        if criterion_guid is not None:
            self.criterion_guid = criterion_guid
        if identities is not None:
            self.identities = identities
        if identities_to_exclude is not None:
            self.identities_to_exclude = identities_to_exclude
        if guids is not None:
            self.guids = guids
        if guids_to_exclude is not None:
            self.guids_to_exclude = guids_to_exclude
        if number_of_terms is not None:
            self.number_of_terms = number_of_terms
        if prefix is not None:
            self.prefix = prefix
        self.type = type

    @property
    def criterion_guid(self) -> "str":
        """Gets the criterion_guid of this GrantaServerApiAggregationsFreeTextAggregationCriterion.
        A GUID to identify this free-text criterion, so that its results can be determined in the output.  For each input free-text aggregation criterion, there will be a free-text aggregation in the output  with a matching GUID.

        Returns
        -------
        str
            The criterion_guid of this GrantaServerApiAggregationsFreeTextAggregationCriterion.
        """
        return self._criterion_guid

    @criterion_guid.setter
    def criterion_guid(self, criterion_guid: "str") -> None:
        """Sets the criterion_guid of this GrantaServerApiAggregationsFreeTextAggregationCriterion.
        A GUID to identify this free-text criterion, so that its results can be determined in the output.  For each input free-text aggregation criterion, there will be a free-text aggregation in the output  with a matching GUID.

        Parameters
        ----------
        criterion_guid: str
            The criterion_guid of this GrantaServerApiAggregationsFreeTextAggregationCriterion.
        """
        self._criterion_guid = criterion_guid

    @property
    def identities(self) -> "list[int]":
        """Gets the identities of this GrantaServerApiAggregationsFreeTextAggregationCriterion.

        Returns
        -------
        list[int]
            The identities of this GrantaServerApiAggregationsFreeTextAggregationCriterion.
        """
        return self._identities

    @identities.setter
    def identities(self, identities: "list[int]") -> None:
        """Sets the identities of this GrantaServerApiAggregationsFreeTextAggregationCriterion.

        Parameters
        ----------
        identities: list[int]
            The identities of this GrantaServerApiAggregationsFreeTextAggregationCriterion.
        """
        self._identities = identities

    @property
    def identities_to_exclude(self) -> "list[int]":
        """Gets the identities_to_exclude of this GrantaServerApiAggregationsFreeTextAggregationCriterion.

        Returns
        -------
        list[int]
            The identities_to_exclude of this GrantaServerApiAggregationsFreeTextAggregationCriterion.
        """
        return self._identities_to_exclude

    @identities_to_exclude.setter
    def identities_to_exclude(self, identities_to_exclude: "list[int]") -> None:
        """Sets the identities_to_exclude of this GrantaServerApiAggregationsFreeTextAggregationCriterion.

        Parameters
        ----------
        identities_to_exclude: list[int]
            The identities_to_exclude of this GrantaServerApiAggregationsFreeTextAggregationCriterion.
        """
        self._identities_to_exclude = identities_to_exclude

    @property
    def guids(self) -> "list[str]":
        """Gets the guids of this GrantaServerApiAggregationsFreeTextAggregationCriterion.

        Returns
        -------
        list[str]
            The guids of this GrantaServerApiAggregationsFreeTextAggregationCriterion.
        """
        return self._guids

    @guids.setter
    def guids(self, guids: "list[str]") -> None:
        """Sets the guids of this GrantaServerApiAggregationsFreeTextAggregationCriterion.

        Parameters
        ----------
        guids: list[str]
            The guids of this GrantaServerApiAggregationsFreeTextAggregationCriterion.
        """
        self._guids = guids

    @property
    def guids_to_exclude(self) -> "list[str]":
        """Gets the guids_to_exclude of this GrantaServerApiAggregationsFreeTextAggregationCriterion.

        Returns
        -------
        list[str]
            The guids_to_exclude of this GrantaServerApiAggregationsFreeTextAggregationCriterion.
        """
        return self._guids_to_exclude

    @guids_to_exclude.setter
    def guids_to_exclude(self, guids_to_exclude: "list[str]") -> None:
        """Sets the guids_to_exclude of this GrantaServerApiAggregationsFreeTextAggregationCriterion.

        Parameters
        ----------
        guids_to_exclude: list[str]
            The guids_to_exclude of this GrantaServerApiAggregationsFreeTextAggregationCriterion.
        """
        self._guids_to_exclude = guids_to_exclude

    @property
    def number_of_terms(self) -> "int":
        """Gets the number_of_terms of this GrantaServerApiAggregationsFreeTextAggregationCriterion.
        The number of terms that should be returned

        Returns
        -------
        int
            The number_of_terms of this GrantaServerApiAggregationsFreeTextAggregationCriterion.
        """
        return self._number_of_terms

    @number_of_terms.setter
    def number_of_terms(self, number_of_terms: "int") -> None:
        """Sets the number_of_terms of this GrantaServerApiAggregationsFreeTextAggregationCriterion.
        The number of terms that should be returned

        Parameters
        ----------
        number_of_terms: int
            The number_of_terms of this GrantaServerApiAggregationsFreeTextAggregationCriterion.
        """
        self._number_of_terms = number_of_terms

    @property
    def prefix(self) -> "str":
        """Gets the prefix of this GrantaServerApiAggregationsFreeTextAggregationCriterion.

        Returns
        -------
        str
            The prefix of this GrantaServerApiAggregationsFreeTextAggregationCriterion.
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix: "str") -> None:
        """Sets the prefix of this GrantaServerApiAggregationsFreeTextAggregationCriterion.

        Parameters
        ----------
        prefix: str
            The prefix of this GrantaServerApiAggregationsFreeTextAggregationCriterion.
        """
        self._prefix = prefix

    @property
    def type(self) -> "str":
        """Gets the type of this GrantaServerApiAggregationsFreeTextAggregationCriterion.

        Returns
        -------
        str
            The type of this GrantaServerApiAggregationsFreeTextAggregationCriterion.
        """
        return self._type

    @type.setter
    def type(self, type: "str") -> None:
        """Sets the type of this GrantaServerApiAggregationsFreeTextAggregationCriterion.

        Parameters
        ----------
        type: str
            The type of this GrantaServerApiAggregationsFreeTextAggregationCriterion.
        """
        if type is None:
            raise ValueError("Invalid value for 'type', must not be 'None'")
        self._type = type

    def get_real_child_model(self, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def to_dict(self) -> Dict:
        """Returns the model properties as a dict

        Returns
        -------
        Dict
            Dictionary indexed by property name containing all the model properties
        """
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(GrantaServerApiAggregationsFreeTextAggregationCriterion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model

        Returns
        -------
        str
            String representation of the model as a dictionary
        """
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(
            other, GrantaServerApiAggregationsFreeTextAggregationCriterion
        ):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
