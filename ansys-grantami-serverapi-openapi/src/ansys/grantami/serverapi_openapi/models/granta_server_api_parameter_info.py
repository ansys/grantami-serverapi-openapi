# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from . import ModelBase


class GrantaServerApiParameterInfo(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'identity': 'int',
        'unit_symbol': 'str',
        'scale_type': 'str',
        'interpolation_type': 'str',
        'parameter_type': 'str',
        'default_value': 'GrantaServerApiDataExportDatumsParameterValue'
    }

    attribute_map = {
        'name': 'name',
        'identity': 'identity',
        'unit_symbol': 'unitSymbol',
        'scale_type': 'scaleType',
        'interpolation_type': 'interpolationType',
        'parameter_type': 'parameterType',
        'default_value': 'defaultValue'
    }

    subtype_mapping = {
        'defaultValue': 'GrantaServerApiDataExportDatumsParameterValue'
    }


    def __init__(self, name=None, identity=None, unit_symbol=None, scale_type=None, interpolation_type=None, parameter_type=None, default_value=None):  # noqa: E501
        """GrantaServerApiParameterInfo - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._identity = None
        self._unit_symbol = None
        self._scale_type = None
        self._interpolation_type = None
        self._parameter_type = None
        self._default_value = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if identity is not None:
            self.identity = identity
        if unit_symbol is not None:
            self.unit_symbol = unit_symbol
        if scale_type is not None:
            self.scale_type = scale_type
        if interpolation_type is not None:
            self.interpolation_type = interpolation_type
        if parameter_type is not None:
            self.parameter_type = parameter_type
        if default_value is not None:
            self.default_value = default_value

    @property
    def name(self):
        """Gets the name of this GrantaServerApiParameterInfo.  # noqa: E501

        :return: The name of this GrantaServerApiParameterInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GrantaServerApiParameterInfo.

        :param name: The name of this GrantaServerApiParameterInfo.  # noqa: E501
        :type: str
        """
        self._name = name

    @property
    def identity(self):
        """Gets the identity of this GrantaServerApiParameterInfo.  # noqa: E501

        :return: The identity of this GrantaServerApiParameterInfo.  # noqa: E501
        :rtype: int
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this GrantaServerApiParameterInfo.

        :param identity: The identity of this GrantaServerApiParameterInfo.  # noqa: E501
        :type: int
        """
        self._identity = identity

    @property
    def unit_symbol(self):
        """Gets the unit_symbol of this GrantaServerApiParameterInfo.  # noqa: E501

        :return: The unit_symbol of this GrantaServerApiParameterInfo.  # noqa: E501
        :rtype: str
        """
        return self._unit_symbol

    @unit_symbol.setter
    def unit_symbol(self, unit_symbol):
        """Sets the unit_symbol of this GrantaServerApiParameterInfo.

        :param unit_symbol: The unit_symbol of this GrantaServerApiParameterInfo.  # noqa: E501
        :type: str
        """
        self._unit_symbol = unit_symbol

    @property
    def scale_type(self):
        """Gets the scale_type of this GrantaServerApiParameterInfo.  # noqa: E501
        Linear or Log  # noqa: E501

        :return: The scale_type of this GrantaServerApiParameterInfo.  # noqa: E501
        :rtype: str
        """
        return self._scale_type

    @scale_type.setter
    def scale_type(self, scale_type):
        """Sets the scale_type of this GrantaServerApiParameterInfo.
        Linear or Log  # noqa: E501

        :param scale_type: The scale_type of this GrantaServerApiParameterInfo.  # noqa: E501
        :type: str
        """
        self._scale_type = scale_type

    @property
    def interpolation_type(self):
        """Gets the interpolation_type of this GrantaServerApiParameterInfo.  # noqa: E501
        Auto, None, Linear or CubicSpline  # noqa: E501

        :return: The interpolation_type of this GrantaServerApiParameterInfo.  # noqa: E501
        :rtype: str
        """
        return self._interpolation_type

    @interpolation_type.setter
    def interpolation_type(self, interpolation_type):
        """Sets the interpolation_type of this GrantaServerApiParameterInfo.
        Auto, None, Linear or CubicSpline  # noqa: E501

        :param interpolation_type: The interpolation_type of this GrantaServerApiParameterInfo.  # noqa: E501
        :type: str
        """
        self._interpolation_type = interpolation_type

    @property
    def parameter_type(self):
        """Gets the parameter_type of this GrantaServerApiParameterInfo.  # noqa: E501

        :return: The parameter_type of this GrantaServerApiParameterInfo.  # noqa: E501
        :rtype: str
        """
        return self._parameter_type

    @parameter_type.setter
    def parameter_type(self, parameter_type):
        """Sets the parameter_type of this GrantaServerApiParameterInfo.

        :param parameter_type: The parameter_type of this GrantaServerApiParameterInfo.  # noqa: E501
        :type: str
        """
        self._parameter_type = parameter_type

    @property
    def default_value(self):
        """Gets the default_value of this GrantaServerApiParameterInfo.  # noqa: E501

        :return: The default_value of this GrantaServerApiParameterInfo.  # noqa: E501
        :rtype: GrantaServerApiDataExportDatumsParameterValue
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this GrantaServerApiParameterInfo.

        :param default_value: The default_value of this GrantaServerApiParameterInfo.  # noqa: E501
        :type: GrantaServerApiDataExportDatumsParameterValue
        """
        self._default_value = default_value

    def get_real_child_model(self, data):
        """Raises a NotImplementedError for a type without a discriminator defined."""
        raise NotImplementedError()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiParameterInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiParameterInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
