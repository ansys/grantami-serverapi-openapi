# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from . import ModelBase


class GrantaServerApiIntegrationSchemaAttribute(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'identity': 'int',
        'type': 'GrantaServerApiAttributeType',
        'unit_symbol': 'str',
        'is_unitted': 'bool',
        'discrete_type_identity': 'int',
        'parameters': 'list[GrantaServerApiParameterInfo]',
        'target_database': 'GrantaServerApiObjectIdentifier',
        'target_table': 'GrantaServerApiObjectIdentifier',
        'graph_type': 'str',
        'x_axis_parameter': 'str'
    }

    attribute_map = {
        'name': 'name',
        'identity': 'identity',
        'type': 'type',
        'unit_symbol': 'unitSymbol',
        'is_unitted': 'isUnitted',
        'discrete_type_identity': 'discreteTypeIdentity',
        'parameters': 'parameters',
        'target_database': 'targetDatabase',
        'target_table': 'targetTable',
        'graph_type': 'graphType',
        'x_axis_parameter': 'xAxisParameter'
    }

    subtype_mapping = {
        'type': 'GrantaServerApiAttributeType',
        'parameters': 'GrantaServerApiParameterInfo',
        'targetDatabase': 'GrantaServerApiObjectIdentifier',
        'targetTable': 'GrantaServerApiObjectIdentifier',
    }


    def __init__(self, name=None, identity=None, type=None, unit_symbol=None, is_unitted=None, discrete_type_identity=None, parameters=None, target_database=None, target_table=None, graph_type=None, x_axis_parameter=None):  # noqa: E501
        """GrantaServerApiIntegrationSchemaAttribute - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._identity = None
        self._type = None
        self._unit_symbol = None
        self._is_unitted = None
        self._discrete_type_identity = None
        self._parameters = None
        self._target_database = None
        self._target_table = None
        self._graph_type = None
        self._x_axis_parameter = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if identity is not None:
            self.identity = identity
        self.type = type
        if unit_symbol is not None:
            self.unit_symbol = unit_symbol
        if is_unitted is not None:
            self.is_unitted = is_unitted
        if discrete_type_identity is not None:
            self.discrete_type_identity = discrete_type_identity
        if parameters is not None:
            self.parameters = parameters
        if target_database is not None:
            self.target_database = target_database
        if target_table is not None:
            self.target_table = target_table
        if graph_type is not None:
            self.graph_type = graph_type
        if x_axis_parameter is not None:
            self.x_axis_parameter = x_axis_parameter

    @property
    def name(self):
        """Gets the name of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501

        :return: The name of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GrantaServerApiIntegrationSchemaAttribute.

        :param name: The name of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        :type: str
        """
        self._name = name

    @property
    def identity(self):
        """Gets the identity of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501

        :return: The identity of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        :rtype: int
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this GrantaServerApiIntegrationSchemaAttribute.

        :param identity: The identity of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        :type: int
        """
        self._identity = identity

    @property
    def type(self):
        """Gets the type of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501

        :return: The type of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        :rtype: GrantaServerApiAttributeType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GrantaServerApiIntegrationSchemaAttribute.

        :param type: The type of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        :type: GrantaServerApiAttributeType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        self._type = type

    @property
    def unit_symbol(self):
        """Gets the unit_symbol of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        If isUnitted is true, then this must have a non empty value  # noqa: E501

        :return: The unit_symbol of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        :rtype: str
        """
        return self._unit_symbol

    @unit_symbol.setter
    def unit_symbol(self, unit_symbol):
        """Sets the unit_symbol of this GrantaServerApiIntegrationSchemaAttribute.
        If isUnitted is true, then this must have a non empty value  # noqa: E501

        :param unit_symbol: The unit_symbol of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        :type: str
        """
        self._unit_symbol = unit_symbol

    @property
    def is_unitted(self):
        """Gets the is_unitted of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501

        :return: The is_unitted of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._is_unitted

    @is_unitted.setter
    def is_unitted(self, is_unitted):
        """Sets the is_unitted of this GrantaServerApiIntegrationSchemaAttribute.

        :param is_unitted: The is_unitted of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        :type: bool
        """
        self._is_unitted = is_unitted

    @property
    def discrete_type_identity(self):
        """Gets the discrete_type_identity of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        A discrete attribute must define the identity of its discrete type (i.e. list of possible values)  # noqa: E501

        :return: The discrete_type_identity of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        :rtype: int
        """
        return self._discrete_type_identity

    @discrete_type_identity.setter
    def discrete_type_identity(self, discrete_type_identity):
        """Sets the discrete_type_identity of this GrantaServerApiIntegrationSchemaAttribute.
        A discrete attribute must define the identity of its discrete type (i.e. list of possible values)  # noqa: E501

        :param discrete_type_identity: The discrete_type_identity of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        :type: int
        """
        self._discrete_type_identity = discrete_type_identity

    @property
    def parameters(self):
        """Gets the parameters of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        A float functional attribute must define a list of parameters.  # noqa: E501

        :return: The parameters of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        :rtype: list[GrantaServerApiParameterInfo]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this GrantaServerApiIntegrationSchemaAttribute.
        A float functional attribute must define a list of parameters.  # noqa: E501

        :param parameters: The parameters of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        :type: list[GrantaServerApiParameterInfo]
        """
        self._parameters = parameters

    @property
    def target_database(self):
        """Gets the target_database of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501

        :return: The target_database of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        :rtype: GrantaServerApiObjectIdentifier
        """
        return self._target_database

    @target_database.setter
    def target_database(self, target_database):
        """Sets the target_database of this GrantaServerApiIntegrationSchemaAttribute.

        :param target_database: The target_database of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        :type: GrantaServerApiObjectIdentifier
        """
        self._target_database = target_database

    @property
    def target_table(self):
        """Gets the target_table of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501

        :return: The target_table of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        :rtype: GrantaServerApiObjectIdentifier
        """
        return self._target_table

    @target_table.setter
    def target_table(self, target_table):
        """Sets the target_table of this GrantaServerApiIntegrationSchemaAttribute.

        :param target_table: The target_table of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        :type: GrantaServerApiObjectIdentifier
        """
        self._target_table = target_table

    @property
    def graph_type(self):
        """Gets the graph_type of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        A float functional attribute must be either a Series or a Grid type graph.  # noqa: E501

        :return: The graph_type of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        :rtype: str
        """
        return self._graph_type

    @graph_type.setter
    def graph_type(self, graph_type):
        """Sets the graph_type of this GrantaServerApiIntegrationSchemaAttribute.
        A float functional attribute must be either a Series or a Grid type graph.  # noqa: E501

        :param graph_type: The graph_type of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        :type: str
        """
        self._graph_type = graph_type

    @property
    def x_axis_parameter(self):
        """Gets the x_axis_parameter of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        A float functional attribute must define an x-axis. This will be one of the parameters listed in parameters  # noqa: E501

        :return: The x_axis_parameter of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        :rtype: str
        """
        return self._x_axis_parameter

    @x_axis_parameter.setter
    def x_axis_parameter(self, x_axis_parameter):
        """Sets the x_axis_parameter of this GrantaServerApiIntegrationSchemaAttribute.
        A float functional attribute must define an x-axis. This will be one of the parameters listed in parameters  # noqa: E501

        :param x_axis_parameter: The x_axis_parameter of this GrantaServerApiIntegrationSchemaAttribute.  # noqa: E501
        :type: str
        """
        self._x_axis_parameter = x_axis_parameter

    def get_real_child_model(self, data):
        """Raises a NotImplementedError for a type without a discriminator defined."""
        raise NotImplementedError()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiIntegrationSchemaAttribute, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiIntegrationSchemaAttribute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
