"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import (
    TYPE_CHECKING,
    Any,
    Dict,
    List,
    BinaryIO,
    Optional,
    Union,
)  # noqa: F401

from . import ModelBase
from ansys.grantami.serverapi_openapi.models.granta_server_api_data_applicable_datum import (
    GrantaServerApiDataApplicableDatum,
)  # noqa: F401


if TYPE_CHECKING:
    from datetime import datetime
    import pathlib
    from . import *


class GrantaServerApiDataDateTimeDatum(GrantaServerApiDataApplicableDatum):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: Dict[str, str] = {
        "date_time": "datetime",
        "datum_type": "str",
        "not_applicable": "str",
    }

    attribute_map: Dict[str, str] = {
        "date_time": "dateTime",
        "datum_type": "datumType",
        "not_applicable": "notApplicable",
    }

    subtype_mapping: Dict[str, str] = {}

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        date_time: "datetime",
        datum_type: "str" = "dateTime",
        not_applicable: "str" = "applicable",
    ) -> None:
        """GrantaServerApiDataDateTimeDatum - a model defined in Swagger

        Parameters
        ----------
            date_time: datetime
            datum_type: str
            not_applicable: str
        """
        super().__init__(not_applicable=not_applicable)
        self._datum_type: str = None  # type: ignore[assignment]
        self._date_time: datetime = None  # type: ignore[assignment]

        self.datum_type = datum_type
        self.date_time = date_time

    @property
    def datum_type(self) -> "str":
        """Gets the datum_type of this GrantaServerApiDataDateTimeDatum.

        Returns
        -------
        str
            The datum_type of this GrantaServerApiDataDateTimeDatum.
        """
        return self._datum_type

    @datum_type.setter
    def datum_type(self, datum_type: "str") -> None:
        """Sets the datum_type of this GrantaServerApiDataDateTimeDatum.

        Parameters
        ----------
        datum_type: str
            The datum_type of this GrantaServerApiDataDateTimeDatum.
        """
        if datum_type is None:
            raise ValueError("Invalid value for 'datum_type', must not be 'None'")
        self._datum_type = datum_type

    @property
    def date_time(self) -> "datetime":
        """Gets the date_time of this GrantaServerApiDataDateTimeDatum.

        Returns
        -------
        datetime
            The date_time of this GrantaServerApiDataDateTimeDatum.
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time: "datetime") -> None:
        """Sets the date_time of this GrantaServerApiDataDateTimeDatum.

        Parameters
        ----------
        date_time: datetime
            The date_time of this GrantaServerApiDataDateTimeDatum.
        """
        if date_time is None:
            raise ValueError("Invalid value for 'date_time', must not be 'None'")
        self._date_time = date_time

    @classmethod
    def get_real_child_model(cls, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()  # type: ignore[no-any-return]

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiDataDateTimeDatum):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
