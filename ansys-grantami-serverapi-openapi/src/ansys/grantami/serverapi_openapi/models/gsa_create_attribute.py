# Copyright (C) 2023 - 2024 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional, Union  # noqa: F401

from . import ModelBase, Unset, Unset_Type

if TYPE_CHECKING:
    from datetime import datetime
    import pathlib

    from . import *


class GsaCreateAttribute(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator_class_map: dict[str, str]
        They key is discriminator value and the value is associated subtype.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "name": "str",
        "type": "GsaAttributeType",
        "about_attribute": "GsaSlimEntity",
        "default_threshold_type": "GsaAttributeThresholdType",
        "guid": "str",
        "help_path": "str",
        "is_hidden_from_search_criteria": "bool",
    }

    attribute_map: dict[str, str] = {
        "name": "name",
        "type": "type",
        "about_attribute": "aboutAttribute",
        "default_threshold_type": "defaultThresholdType",
        "guid": "guid",
        "help_path": "helpPath",
        "is_hidden_from_search_criteria": "isHiddenFromSearchCriteria",
    }

    subtype_mapping: dict[str, str] = {
        "type": "GsaAttributeType",
        "defaultThresholdType": "GsaAttributeThresholdType",
        "aboutAttribute": "GsaSlimEntity",
    }

    discriminator_value_class_map = {
        "point".lower(): "#/components/schemas/GsaCreatePointAttribute",
        "integer".lower(): "#/components/schemas/GsaCreateIntegerAttribute",
        "range".lower(): "#/components/schemas/GsaCreateRangeAttribute",
        "logical".lower(): "#/components/schemas/GsaCreateLogicalAttribute",
        "shortText".lower(): "#/components/schemas/GsaCreateShortTextAttribute",
        "longText".lower(): "#/components/schemas/GsaCreateLongTextAttribute",
        "dateTime".lower(): "#/components/schemas/GsaCreateDateTimeAttribute",
        "discrete".lower(): "#/components/schemas/GsaCreateDiscreteAttribute",
        "hyperlink".lower(): "#/components/schemas/GsaCreateHyperlinkAttribute",
        "file".lower(): "#/components/schemas/GsaCreateFileAttribute",
        "picture".lower(): "#/components/schemas/GsaCreatePictureAttribute",
        "link".lower(): "#/components/schemas/GsaCreateTabularAttribute",
        "floatFunctional".lower(): "#/components/schemas/GsaCreateFloatFunctionalAttribute",
        "discreteFunctional".lower(): "#/components/schemas/GsaCreateDiscreteFunctionalAttribute",
        "mathsFunctional".lower(): "#/components/schemas/GsaCreateMathsFunctionalAttribute",
    }

    discriminator: Optional[str] = "type"

    def __init__(
        self,
        *,
        name: "str",
        type: "GsaAttributeType",
        about_attribute: "Union[GsaSlimEntity, Unset_Type]" = Unset,
        default_threshold_type: "Union[GsaAttributeThresholdType, Unset_Type]" = Unset,
        guid: "Union[str, Unset_Type]" = Unset,
        help_path: "Union[str, None, Unset_Type]" = Unset,
        is_hidden_from_search_criteria: "Union[bool, None, Unset_Type]" = Unset,
    ) -> None:
        """GsaCreateAttribute - a model defined in Swagger

        Parameters
        ----------
        name: str
        type: GsaAttributeType
        about_attribute: GsaSlimEntity, optional
        default_threshold_type: GsaAttributeThresholdType, optional
        guid: str, optional
        help_path: str, optional
        is_hidden_from_search_criteria: bool, optional
        """
        self._type: GsaAttributeType
        self._default_threshold_type: Union[GsaAttributeThresholdType, Unset_Type] = Unset
        self._help_path: Union[str, None, Unset_Type] = Unset
        self._about_attribute: Union[GsaSlimEntity, Unset_Type] = Unset
        self._is_hidden_from_search_criteria: Union[bool, None, Unset_Type] = Unset
        self._name: str
        self._guid: Union[str, Unset_Type] = Unset

        self.type = type
        if default_threshold_type is not Unset:
            self.default_threshold_type = default_threshold_type
        if help_path is not Unset:
            self.help_path = help_path
        if about_attribute is not Unset:
            self.about_attribute = about_attribute
        if is_hidden_from_search_criteria is not Unset:
            self.is_hidden_from_search_criteria = is_hidden_from_search_criteria
        self.name = name
        if guid is not Unset:
            self.guid = guid

    @property
    def type(self) -> "GsaAttributeType":
        """Gets the type of this GsaCreateAttribute.

        Returns
        -------
        GsaAttributeType
            The type of this GsaCreateAttribute.
        """
        return self._type

    @type.setter
    def type(self, type: "GsaAttributeType") -> None:
        """Sets the type of this GsaCreateAttribute.

        Parameters
        ----------
        type: GsaAttributeType
            The type of this GsaCreateAttribute.
        """
        # Field is not nullable
        if type is None:
            raise ValueError("Invalid value for 'type', must not be 'None'")
        # Field is required
        if type is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'type', must not be 'Unset'")
        self._type = type

    @property
    def default_threshold_type(self) -> "Union[GsaAttributeThresholdType, Unset_Type]":
        """Gets the default_threshold_type of this GsaCreateAttribute.

        Returns
        -------
        Union[GsaAttributeThresholdType, Unset_Type]
            The default_threshold_type of this GsaCreateAttribute.
        """
        return self._default_threshold_type

    @default_threshold_type.setter
    def default_threshold_type(
        self, default_threshold_type: "Union[GsaAttributeThresholdType, Unset_Type]"
    ) -> None:
        """Sets the default_threshold_type of this GsaCreateAttribute.

        Parameters
        ----------
        default_threshold_type: Union[GsaAttributeThresholdType, Unset_Type]
            The default_threshold_type of this GsaCreateAttribute.
        """
        # Field is not nullable
        if default_threshold_type is None:
            raise ValueError("Invalid value for 'default_threshold_type', must not be 'None'")
        self._default_threshold_type = default_threshold_type

    @property
    def help_path(self) -> "Union[str, None, Unset_Type]":
        """Gets the help_path of this GsaCreateAttribute.

        Returns
        -------
        Union[str, None, Unset_Type]
            The help_path of this GsaCreateAttribute.
        """
        return self._help_path

    @help_path.setter
    def help_path(self, help_path: "Union[str, None, Unset_Type]") -> None:
        """Sets the help_path of this GsaCreateAttribute.

        Parameters
        ----------
        help_path: Union[str, None, Unset_Type]
            The help_path of this GsaCreateAttribute.
        """
        self._help_path = help_path

    @property
    def about_attribute(self) -> "Union[GsaSlimEntity, Unset_Type]":
        """Gets the about_attribute of this GsaCreateAttribute.

        Returns
        -------
        Union[GsaSlimEntity, Unset_Type]
            The about_attribute of this GsaCreateAttribute.
        """
        return self._about_attribute

    @about_attribute.setter
    def about_attribute(self, about_attribute: "Union[GsaSlimEntity, Unset_Type]") -> None:
        """Sets the about_attribute of this GsaCreateAttribute.

        Parameters
        ----------
        about_attribute: Union[GsaSlimEntity, Unset_Type]
            The about_attribute of this GsaCreateAttribute.
        """
        # Field is not nullable
        if about_attribute is None:
            raise ValueError("Invalid value for 'about_attribute', must not be 'None'")
        self._about_attribute = about_attribute

    @property
    def is_hidden_from_search_criteria(self) -> "Union[bool, None, Unset_Type]":
        """Gets the is_hidden_from_search_criteria of this GsaCreateAttribute.
        If true, the attribute should not be shown in search UIs.  It will still be included in text searches.  If not specified, it will be set to the default value for the attribute type.

        Returns
        -------
        Union[bool, None, Unset_Type]
            The is_hidden_from_search_criteria of this GsaCreateAttribute.
        """
        return self._is_hidden_from_search_criteria

    @is_hidden_from_search_criteria.setter
    def is_hidden_from_search_criteria(
        self, is_hidden_from_search_criteria: "Union[bool, None, Unset_Type]"
    ) -> None:
        """Sets the is_hidden_from_search_criteria of this GsaCreateAttribute.
        If true, the attribute should not be shown in search UIs.  It will still be included in text searches.  If not specified, it will be set to the default value for the attribute type.

        Parameters
        ----------
        is_hidden_from_search_criteria: Union[bool, None, Unset_Type]
            The is_hidden_from_search_criteria of this GsaCreateAttribute.
        """
        self._is_hidden_from_search_criteria = is_hidden_from_search_criteria

    @property
    def name(self) -> "str":
        """Gets the name of this GsaCreateAttribute.

        Returns
        -------
        str
            The name of this GsaCreateAttribute.
        """
        return self._name

    @name.setter
    def name(self, name: "str") -> None:
        """Sets the name of this GsaCreateAttribute.

        Parameters
        ----------
        name: str
            The name of this GsaCreateAttribute.
        """
        # Field is not nullable
        if name is None:
            raise ValueError("Invalid value for 'name', must not be 'None'")
        # Field is required
        if name is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'name', must not be 'Unset'")
        self._name = name

    @property
    def guid(self) -> "Union[str, Unset_Type]":
        """Gets the guid of this GsaCreateAttribute.

        Returns
        -------
        Union[str, Unset_Type]
            The guid of this GsaCreateAttribute.
        """
        return self._guid

    @guid.setter
    def guid(self, guid: "Union[str, Unset_Type]") -> None:
        """Sets the guid of this GsaCreateAttribute.

        Parameters
        ----------
        guid: Union[str, Unset_Type]
            The guid of this GsaCreateAttribute.
        """
        # Field is not nullable
        if guid is None:
            raise ValueError("Invalid value for 'guid', must not be 'None'")
        self._guid = guid

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Returns the real base class as determined by the discriminator

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class
        """
        discriminator_value = str(data[cls._get_discriminator_field_name()]).lower()
        # The actual class name is not available in swagger-codegen,
        # so we have to extract it from the JSON reference
        return cls.discriminator_value_class_map[discriminator_value].rsplit("/", 1)[-1]

    @classmethod
    def _get_discriminator_field_name(cls) -> str:
        assert cls.discriminator
        name_tokens = cls.discriminator.split("_")
        later_tokens = [element.capitalize() for element in name_tokens[1:]]
        return "".join([name_tokens[0], *later_tokens])

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaCreateAttribute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
