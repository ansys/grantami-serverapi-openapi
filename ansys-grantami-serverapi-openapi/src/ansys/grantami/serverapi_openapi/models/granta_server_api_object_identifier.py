# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from . import ModelBase


class GrantaServerApiObjectIdentifier(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'guid': 'str',
        'name': 'str',
        'identity': 'int'
    }

    attribute_map = {
        'guid': 'guid',
        'name': 'name',
        'identity': 'identity'
    }

    subtype_mapping = {
    }


    def __init__(self, guid=None, name=None, identity=None):  # noqa: E501
        """GrantaServerApiObjectIdentifier - a model defined in Swagger"""  # noqa: E501
        self._guid = None
        self._name = None
        self._identity = None
        self.discriminator = None
        if guid is not None:
            self.guid = guid
        if name is not None:
            self.name = name
        if identity is not None:
            self.identity = identity

    @property
    def guid(self):
        """Gets the guid of this GrantaServerApiObjectIdentifier.  # noqa: E501
        The GUID of this object. The GUID represents the object on a semantic level, and two objects of  the same type with the same GUID are considered to represent \"the same concept\". GUIDs should be  robust against data changes and database upgrades, and should be preferred where possible.  # noqa: E501

        :return: The guid of this GrantaServerApiObjectIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this GrantaServerApiObjectIdentifier.
        The GUID of this object. The GUID represents the object on a semantic level, and two objects of  the same type with the same GUID are considered to represent \"the same concept\". GUIDs should be  robust against data changes and database upgrades, and should be preferred where possible.  # noqa: E501

        :param guid: The guid of this GrantaServerApiObjectIdentifier.  # noqa: E501
        :type: str
        """
        self._guid = guid

    @property
    def name(self):
        """Gets the name of this GrantaServerApiObjectIdentifier.  # noqa: E501
        The name of this object. The name represents the object at a human-readable level, but two objects of  the same type with the same need not represent \"the same concept\". Because the name is less uniquely identifying,  clients should prefer GUIDs where possible, and operations based on name instead of GUID may fail if the name  cannot be uniquely resolved. Certain object types may consider names to be equivalent  # noqa: E501

        :return: The name of this GrantaServerApiObjectIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GrantaServerApiObjectIdentifier.
        The name of this object. The name represents the object at a human-readable level, but two objects of  the same type with the same need not represent \"the same concept\". Because the name is less uniquely identifying,  clients should prefer GUIDs where possible, and operations based on name instead of GUID may fail if the name  cannot be uniquely resolved. Certain object types may consider names to be equivalent  # noqa: E501

        :param name: The name of this GrantaServerApiObjectIdentifier.  # noqa: E501
        :type: str
        """
        self._name = name

    @property
    def identity(self):
        """Gets the identity of this GrantaServerApiObjectIdentifier.  # noqa: E501
        The underlying identity of this object. This represents the object at a data level, and two objects  of the same type with the same identity are considered to represent \"the same object\". However, identities  are not robust against database upgrades, and are only reliable and consistent within a currently-  loaded database in a running MI instance. Clients should prefer GUIDs where possible, and operations  based on identity which persist data will be resolved to GUIDs instead (and may fail if this cannot  be done).  # noqa: E501

        :return: The identity of this GrantaServerApiObjectIdentifier.  # noqa: E501
        :rtype: int
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this GrantaServerApiObjectIdentifier.
        The underlying identity of this object. This represents the object at a data level, and two objects  of the same type with the same identity are considered to represent \"the same object\". However, identities  are not robust against database upgrades, and are only reliable and consistent within a currently-  loaded database in a running MI instance. Clients should prefer GUIDs where possible, and operations  based on identity which persist data will be resolved to GUIDs instead (and may fail if this cannot  be done).  # noqa: E501

        :param identity: The identity of this GrantaServerApiObjectIdentifier.  # noqa: E501
        :type: int
        """
        self._identity = identity

    def get_real_child_model(self, data):
        """Raises a NotImplementedError for a type without a discriminator defined."""
        raise NotImplementedError()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiObjectIdentifier, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiObjectIdentifier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
