# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from . import ModelBase

from ansys.grantami.serverapi_openapi.models.granta_server_api_search_criterion import GrantaServerApiSearchCriterion  # noqa: F401,E501

class GrantaServerApiSearchAttributeCriterion(GrantaServerApiSearchCriterion):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identity': 'int',
        'guid': 'str',
        'is_meta_attribute': 'bool',
        'type': 'str'
    }
    if hasattr(GrantaServerApiSearchCriterion, "swagger_types"):
        swagger_types.update(GrantaServerApiSearchCriterion.swagger_types)

    attribute_map = {
        'identity': 'identity',
        'guid': 'guid',
        'is_meta_attribute': 'isMetaAttribute',
        'type': 'type'
    }
    if hasattr(GrantaServerApiSearchCriterion, "attribute_map"):
        attribute_map.update(GrantaServerApiSearchCriterion.attribute_map)

    subtype_mapping = {
    }

    discriminator_value_class_map = {
        'matches'.lower(): '#/components/schemas/GrantaServerApiSearchAttributeMatchesCriterion',
        'exists'.lower(): '#/components/schemas/GrantaServerApiSearchAttributeExistsCriterion',
        'notApplicable'.lower(): '#/components/schemas/GrantaServerApiSearchAttributeNotApplicableCriterion',
    }

    def __init__(self, identity=None, guid=None, is_meta_attribute=None, type='attribute', *args, **kwargs):  # noqa: E501
        """GrantaServerApiSearchAttributeCriterion - a model defined in Swagger"""  # noqa: E501
        GrantaServerApiSearchCriterion.__init__(self, *args, **kwargs)
        self._identity = None
        self._guid = None
        self._is_meta_attribute = None
        self._type = None
        self.discriminator = 'attribute_criterion_type'
        if identity is not None:
            self.identity = identity
        if guid is not None:
            self.guid = guid
        if is_meta_attribute is not None:
            self.is_meta_attribute = is_meta_attribute
        self.type = type

    @property
    def identity(self):
        """Gets the identity of this GrantaServerApiSearchAttributeCriterion.  # noqa: E501

        :return: The identity of this GrantaServerApiSearchAttributeCriterion.  # noqa: E501
        :rtype: int
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this GrantaServerApiSearchAttributeCriterion.

        :param identity: The identity of this GrantaServerApiSearchAttributeCriterion.  # noqa: E501
        :type: int
        """
        self._identity = identity

    @property
    def guid(self):
        """Gets the guid of this GrantaServerApiSearchAttributeCriterion.  # noqa: E501

        :return: The guid of this GrantaServerApiSearchAttributeCriterion.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this GrantaServerApiSearchAttributeCriterion.

        :param guid: The guid of this GrantaServerApiSearchAttributeCriterion.  # noqa: E501
        :type: str
        """
        self._guid = guid

    @property
    def is_meta_attribute(self):
        """Gets the is_meta_attribute of this GrantaServerApiSearchAttributeCriterion.  # noqa: E501

        :return: The is_meta_attribute of this GrantaServerApiSearchAttributeCriterion.  # noqa: E501
        :rtype: bool
        """
        return self._is_meta_attribute

    @is_meta_attribute.setter
    def is_meta_attribute(self, is_meta_attribute):
        """Sets the is_meta_attribute of this GrantaServerApiSearchAttributeCriterion.

        :param is_meta_attribute: The is_meta_attribute of this GrantaServerApiSearchAttributeCriterion.  # noqa: E501
        :type: bool
        """
        self._is_meta_attribute = is_meta_attribute

    @property
    def type(self):
        """Gets the type of this GrantaServerApiSearchAttributeCriterion.  # noqa: E501

        :return: The type of this GrantaServerApiSearchAttributeCriterion.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GrantaServerApiSearchAttributeCriterion.

        :param type: The type of this GrantaServerApiSearchAttributeCriterion.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        self._type = type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = str(data[self._get_discriminator_field_name()]).lower()
        # The actual class name is not available in swagger-codegen, 
        # so we have to extract it from the JSON reference
        return self.discriminator_value_class_map.get(discriminator_value).rsplit("/", 1)[-1]

    def _get_discriminator_field_name(self):
        name_tokens = self.discriminator.split("_")
        later_tokens = [element.capitalize() for element in name_tokens[1:]]
        return "".join([name_tokens[0], *later_tokens])

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiSearchAttributeCriterion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiSearchAttributeCriterion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
