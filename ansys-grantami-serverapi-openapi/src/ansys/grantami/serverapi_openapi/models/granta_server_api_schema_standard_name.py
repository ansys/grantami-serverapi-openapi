# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from . import ModelBase


class GrantaServerApiSchemaStandardName(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mapped_attributes': 'list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]',
        'mapped_parameters': 'list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]',
        'mapped_record_link_groups': 'list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]',
        'mapped_cross_database_record_link_groups': 'list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]',
        'name': 'str',
        'guid': 'str'
    }

    attribute_map = {
        'mapped_attributes': 'mappedAttributes',
        'mapped_parameters': 'mappedParameters',
        'mapped_record_link_groups': 'mappedRecordLinkGroups',
        'mapped_cross_database_record_link_groups': 'mappedCrossDatabaseRecordLinkGroups',
        'name': 'name',
        'guid': 'guid'
    }

    subtype_mapping = {
        'mappedAttributes': 'GrantaServerApiSchemaSlimEntitiesSlimNamedEntity',
        'mappedParameters': 'GrantaServerApiSchemaSlimEntitiesSlimNamedEntity',
        'mappedRecordLinkGroups': 'GrantaServerApiSchemaSlimEntitiesSlimNamedEntity',
        'mappedCrossDatabaseRecordLinkGroups': 'GrantaServerApiSchemaSlimEntitiesSlimNamedEntity',
    }


    def __init__(self, mapped_attributes=None, mapped_parameters=None, mapped_record_link_groups=None, mapped_cross_database_record_link_groups=None, name=None, guid=None):  # noqa: E501
        """GrantaServerApiSchemaStandardName - a model defined in Swagger"""  # noqa: E501
        self._mapped_attributes = None
        self._mapped_parameters = None
        self._mapped_record_link_groups = None
        self._mapped_cross_database_record_link_groups = None
        self._name = None
        self._guid = None
        self.discriminator = None
        if mapped_attributes is not None:
            self.mapped_attributes = mapped_attributes
        if mapped_parameters is not None:
            self.mapped_parameters = mapped_parameters
        if mapped_record_link_groups is not None:
            self.mapped_record_link_groups = mapped_record_link_groups
        if mapped_cross_database_record_link_groups is not None:
            self.mapped_cross_database_record_link_groups = mapped_cross_database_record_link_groups
        if name is not None:
            self.name = name
        if guid is not None:
            self.guid = guid

    @property
    def mapped_attributes(self):
        """Gets the mapped_attributes of this GrantaServerApiSchemaStandardName.  # noqa: E501

        :return: The mapped_attributes of this GrantaServerApiSchemaStandardName.  # noqa: E501
        :rtype: list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]
        """
        return self._mapped_attributes

    @mapped_attributes.setter
    def mapped_attributes(self, mapped_attributes):
        """Sets the mapped_attributes of this GrantaServerApiSchemaStandardName.

        :param mapped_attributes: The mapped_attributes of this GrantaServerApiSchemaStandardName.  # noqa: E501
        :type: list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]
        """
        self._mapped_attributes = mapped_attributes

    @property
    def mapped_parameters(self):
        """Gets the mapped_parameters of this GrantaServerApiSchemaStandardName.  # noqa: E501

        :return: The mapped_parameters of this GrantaServerApiSchemaStandardName.  # noqa: E501
        :rtype: list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]
        """
        return self._mapped_parameters

    @mapped_parameters.setter
    def mapped_parameters(self, mapped_parameters):
        """Sets the mapped_parameters of this GrantaServerApiSchemaStandardName.

        :param mapped_parameters: The mapped_parameters of this GrantaServerApiSchemaStandardName.  # noqa: E501
        :type: list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]
        """
        self._mapped_parameters = mapped_parameters

    @property
    def mapped_record_link_groups(self):
        """Gets the mapped_record_link_groups of this GrantaServerApiSchemaStandardName.  # noqa: E501

        :return: The mapped_record_link_groups of this GrantaServerApiSchemaStandardName.  # noqa: E501
        :rtype: list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]
        """
        return self._mapped_record_link_groups

    @mapped_record_link_groups.setter
    def mapped_record_link_groups(self, mapped_record_link_groups):
        """Sets the mapped_record_link_groups of this GrantaServerApiSchemaStandardName.

        :param mapped_record_link_groups: The mapped_record_link_groups of this GrantaServerApiSchemaStandardName.  # noqa: E501
        :type: list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]
        """
        self._mapped_record_link_groups = mapped_record_link_groups

    @property
    def mapped_cross_database_record_link_groups(self):
        """Gets the mapped_cross_database_record_link_groups of this GrantaServerApiSchemaStandardName.  # noqa: E501

        :return: The mapped_cross_database_record_link_groups of this GrantaServerApiSchemaStandardName.  # noqa: E501
        :rtype: list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]
        """
        return self._mapped_cross_database_record_link_groups

    @mapped_cross_database_record_link_groups.setter
    def mapped_cross_database_record_link_groups(self, mapped_cross_database_record_link_groups):
        """Sets the mapped_cross_database_record_link_groups of this GrantaServerApiSchemaStandardName.

        :param mapped_cross_database_record_link_groups: The mapped_cross_database_record_link_groups of this GrantaServerApiSchemaStandardName.  # noqa: E501
        :type: list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]
        """
        self._mapped_cross_database_record_link_groups = mapped_cross_database_record_link_groups

    @property
    def name(self):
        """Gets the name of this GrantaServerApiSchemaStandardName.  # noqa: E501

        :return: The name of this GrantaServerApiSchemaStandardName.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GrantaServerApiSchemaStandardName.

        :param name: The name of this GrantaServerApiSchemaStandardName.  # noqa: E501
        :type: str
        """
        self._name = name

    @property
    def guid(self):
        """Gets the guid of this GrantaServerApiSchemaStandardName.  # noqa: E501

        :return: The guid of this GrantaServerApiSchemaStandardName.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this GrantaServerApiSchemaStandardName.

        :param guid: The guid of this GrantaServerApiSchemaStandardName.  # noqa: E501
        :type: str
        """
        self._guid = guid

    def get_real_child_model(self, data):
        """Raises a NotImplementedError for a type without a discriminator defined."""
        raise NotImplementedError()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiSchemaStandardName, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiSchemaStandardName):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
