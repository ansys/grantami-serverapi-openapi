# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from . import ModelBase

from ansys.grantami.serverapi_openapi.models.granta_server_api_schema_attributes_update_attributes_update_attribute import GrantaServerApiSchemaAttributesUpdateAttributesUpdateAttribute  # noqa: F401,E501

class GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute(GrantaServerApiSchemaAttributesUpdateAttributesUpdateAttribute):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'unit': 'GrantaServerApiSchemaSlimEntitiesSlimUnit',
        'attribute_parameters': 'list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]',
        'expressions': 'list[GrantaServerApiSchemaSlimEntitiesSlimExpression]',
        'allow_extrapolation': 'bool',
        'is_range': 'bool',
        'default_content': 'GrantaServerApiSchemaAttributesMathsContent',
        'allow_all_compatible_expressions': 'bool'
    }
    if hasattr(GrantaServerApiSchemaAttributesUpdateAttributesUpdateAttribute, "swagger_types"):
        swagger_types.update(GrantaServerApiSchemaAttributesUpdateAttributesUpdateAttribute.swagger_types)

    attribute_map = {
        'type': 'type',
        'unit': 'unit',
        'attribute_parameters': 'attributeParameters',
        'expressions': 'expressions',
        'allow_extrapolation': 'allowExtrapolation',
        'is_range': 'isRange',
        'default_content': 'defaultContent',
        'allow_all_compatible_expressions': 'allowAllCompatibleExpressions'
    }
    if hasattr(GrantaServerApiSchemaAttributesUpdateAttributesUpdateAttribute, "attribute_map"):
        attribute_map.update(GrantaServerApiSchemaAttributesUpdateAttributesUpdateAttribute.attribute_map)

    subtype_mapping = {
        'unit': 'GrantaServerApiSchemaSlimEntitiesSlimUnit',
        'attributeParameters': 'GrantaServerApiSchemaSlimEntitiesSlimNamedEntity',
        'expressions': 'GrantaServerApiSchemaSlimEntitiesSlimExpression',
        'defaultContent': 'GrantaServerApiSchemaAttributesMathsContent',
    }


    def __init__(self, type='mathsFunctional', unit=None, attribute_parameters=None, expressions=None, allow_extrapolation=None, is_range=None, default_content=None, allow_all_compatible_expressions=None, *args, **kwargs):  # noqa: E501
        """GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute - a model defined in Swagger"""  # noqa: E501
        GrantaServerApiSchemaAttributesUpdateAttributesUpdateAttribute.__init__(self, *args, **kwargs)
        self._type = None
        self._unit = None
        self._attribute_parameters = None
        self._expressions = None
        self._allow_extrapolation = None
        self._is_range = None
        self._default_content = None
        self._allow_all_compatible_expressions = None
        self.discriminator = None
        self.type = type
        if unit is not None:
            self.unit = unit
        if attribute_parameters is not None:
            self.attribute_parameters = attribute_parameters
        if expressions is not None:
            self.expressions = expressions
        if allow_extrapolation is not None:
            self.allow_extrapolation = allow_extrapolation
        if is_range is not None:
            self.is_range = is_range
        if default_content is not None:
            self.default_content = default_content
        if allow_all_compatible_expressions is not None:
            self.allow_all_compatible_expressions = allow_all_compatible_expressions

    @property
    def type(self):
        """Gets the type of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.  # noqa: E501

        :return: The type of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.

        :param type: The type of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        self._type = type

    @property
    def unit(self):
        """Gets the unit of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.  # noqa: E501

        :return: The unit of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.  # noqa: E501
        :rtype: GrantaServerApiSchemaSlimEntitiesSlimUnit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.

        :param unit: The unit of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.  # noqa: E501
        :type: GrantaServerApiSchemaSlimEntitiesSlimUnit
        """
        self._unit = unit

    @property
    def attribute_parameters(self):
        """Gets the attribute_parameters of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.  # noqa: E501

        :return: The attribute_parameters of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.  # noqa: E501
        :rtype: list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]
        """
        return self._attribute_parameters

    @attribute_parameters.setter
    def attribute_parameters(self, attribute_parameters):
        """Sets the attribute_parameters of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.

        :param attribute_parameters: The attribute_parameters of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.  # noqa: E501
        :type: list[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]
        """
        self._attribute_parameters = attribute_parameters

    @property
    def expressions(self):
        """Gets the expressions of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.  # noqa: E501

        :return: The expressions of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.  # noqa: E501
        :rtype: list[GrantaServerApiSchemaSlimEntitiesSlimExpression]
        """
        return self._expressions

    @expressions.setter
    def expressions(self, expressions):
        """Sets the expressions of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.

        :param expressions: The expressions of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.  # noqa: E501
        :type: list[GrantaServerApiSchemaSlimEntitiesSlimExpression]
        """
        self._expressions = expressions

    @property
    def allow_extrapolation(self):
        """Gets the allow_extrapolation of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.  # noqa: E501

        :return: The allow_extrapolation of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._allow_extrapolation

    @allow_extrapolation.setter
    def allow_extrapolation(self, allow_extrapolation):
        """Sets the allow_extrapolation of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.

        :param allow_extrapolation: The allow_extrapolation of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.  # noqa: E501
        :type: bool
        """
        self._allow_extrapolation = allow_extrapolation

    @property
    def is_range(self):
        """Gets the is_range of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.  # noqa: E501

        :return: The is_range of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._is_range

    @is_range.setter
    def is_range(self, is_range):
        """Sets the is_range of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.

        :param is_range: The is_range of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.  # noqa: E501
        :type: bool
        """
        self._is_range = is_range

    @property
    def default_content(self):
        """Gets the default_content of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.  # noqa: E501

        :return: The default_content of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.  # noqa: E501
        :rtype: GrantaServerApiSchemaAttributesMathsContent
        """
        return self._default_content

    @default_content.setter
    def default_content(self, default_content):
        """Sets the default_content of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.

        :param default_content: The default_content of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.  # noqa: E501
        :type: GrantaServerApiSchemaAttributesMathsContent
        """
        self._default_content = default_content

    @property
    def allow_all_compatible_expressions(self):
        """Gets the allow_all_compatible_expressions of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.  # noqa: E501

        :return: The allow_all_compatible_expressions of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._allow_all_compatible_expressions

    @allow_all_compatible_expressions.setter
    def allow_all_compatible_expressions(self, allow_all_compatible_expressions):
        """Sets the allow_all_compatible_expressions of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.

        :param allow_all_compatible_expressions: The allow_all_compatible_expressions of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute.  # noqa: E501
        :type: bool
        """
        self._allow_all_compatible_expressions = allow_all_compatible_expressions

    def get_real_child_model(self, data):
        """Raises a NotImplementedError for a type without a discriminator defined."""
        raise NotImplementedError()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsFunctionalAttribute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
