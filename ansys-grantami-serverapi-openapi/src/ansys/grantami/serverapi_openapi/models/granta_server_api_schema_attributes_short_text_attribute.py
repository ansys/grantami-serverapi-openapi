"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import (
    TYPE_CHECKING,
    Any,
    Dict,
    List,
    BinaryIO,
    Optional,
    Union,
)  # noqa: F401

from . import ModelBase
from ansys.grantami.serverapi_openapi.models.granta_server_api_schema_attributes_attribute import (
    GrantaServerApiSchemaAttributesAttribute,
)  # noqa: F401


if TYPE_CHECKING:
    from datetime import datetime
    import pathlib
    from . import *


class GrantaServerApiSchemaAttributesShortTextAttribute(
    GrantaServerApiSchemaAttributesAttribute
):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: Dict[str, str] = {
        "default_threshold_type": "GrantaServerApiSchemaAttributesAttributeThresholdType",
        "display_names": "dict(str, str)",
        "guid": "str",
        "info": "GrantaServerApiSchemaAttributesAttributeAttributeInfo",
        "is_unique": "bool",
        "name": "str",
        "about_attribute": "GrantaServerApiSchemaSlimEntitiesSlimNamedEntity",
        "axis_name": "str",
        "data_rule": "GrantaServerApiSchemaSlimEntitiesSlimNamedEntity",
        "help_path": "str",
        "type": "str",
    }

    attribute_map: Dict[str, str] = {
        "default_threshold_type": "defaultThresholdType",
        "display_names": "displayNames",
        "guid": "guid",
        "info": "info",
        "is_unique": "isUnique",
        "name": "name",
        "about_attribute": "aboutAttribute",
        "axis_name": "axisName",
        "data_rule": "dataRule",
        "help_path": "helpPath",
        "type": "type",
    }

    subtype_mapping: Dict[str, str] = {
        "dataRule": "GrantaServerApiSchemaSlimEntitiesSlimNamedEntity",
    }

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        default_threshold_type: "GrantaServerApiSchemaAttributesAttributeThresholdType",
        display_names: "Dict[str, str]",
        guid: "str",
        info: "GrantaServerApiSchemaAttributesAttributeAttributeInfo",
        is_unique: "bool",
        name: "str",
        about_attribute: "Optional[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]" = None,
        axis_name: "Optional[str]" = None,
        data_rule: "Optional[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]" = None,
        help_path: "Optional[str]" = None,
        type: "str" = "shortText",
    ) -> None:
        """GrantaServerApiSchemaAttributesShortTextAttribute - a model defined in Swagger

        Parameters
        ----------
            default_threshold_type: GrantaServerApiSchemaAttributesAttributeThresholdType
            display_names: Dict[str, str]
            guid: str
            info: GrantaServerApiSchemaAttributesAttributeAttributeInfo
            is_unique: bool
            name: str
            about_attribute: GrantaServerApiSchemaSlimEntitiesSlimNamedEntity, optional
            axis_name: str, optional
            data_rule: GrantaServerApiSchemaSlimEntitiesSlimNamedEntity, optional
            help_path: str, optional
            type: str
        """
        super().__init__(
            default_threshold_type=default_threshold_type,
            display_names=display_names,
            guid=guid,
            info=info,
            name=name,
            about_attribute=about_attribute,
            axis_name=axis_name,
            help_path=help_path,
        )
        self._type: str = None  # type: ignore[assignment]
        self._is_unique: bool = None  # type: ignore[assignment]
        self._data_rule = None

        self.type = type
        self.is_unique = is_unique
        if data_rule is not None:
            self.data_rule = data_rule

    @property
    def type(self) -> "str":
        """Gets the type of this GrantaServerApiSchemaAttributesShortTextAttribute.

        Returns
        -------
        str
            The type of this GrantaServerApiSchemaAttributesShortTextAttribute.
        """
        return self._type

    @type.setter
    def type(self, type: "str") -> None:
        """Sets the type of this GrantaServerApiSchemaAttributesShortTextAttribute.

        Parameters
        ----------
        type: str
            The type of this GrantaServerApiSchemaAttributesShortTextAttribute.
        """
        if type is None:
            raise ValueError("Invalid value for 'type', must not be 'None'")
        self._type = type

    @property
    def is_unique(self) -> "bool":
        """Gets the is_unique of this GrantaServerApiSchemaAttributesShortTextAttribute.
        Whether or not the attribute is constrained to contain a unique value

        Returns
        -------
        bool
            The is_unique of this GrantaServerApiSchemaAttributesShortTextAttribute.
        """
        return self._is_unique

    @is_unique.setter
    def is_unique(self, is_unique: "bool") -> None:
        """Sets the is_unique of this GrantaServerApiSchemaAttributesShortTextAttribute.
        Whether or not the attribute is constrained to contain a unique value

        Parameters
        ----------
        is_unique: bool
            The is_unique of this GrantaServerApiSchemaAttributesShortTextAttribute.
        """
        if is_unique is None:
            raise ValueError("Invalid value for 'is_unique', must not be 'None'")
        self._is_unique = is_unique

    @property
    def data_rule(self) -> "Optional[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]":
        """Gets the data_rule of this GrantaServerApiSchemaAttributesShortTextAttribute.

        Returns
        -------
        GrantaServerApiSchemaSlimEntitiesSlimNamedEntity
            The data_rule of this GrantaServerApiSchemaAttributesShortTextAttribute.
        """
        return self._data_rule

    @data_rule.setter
    def data_rule(
        self, data_rule: "Optional[GrantaServerApiSchemaSlimEntitiesSlimNamedEntity]"
    ) -> None:
        """Sets the data_rule of this GrantaServerApiSchemaAttributesShortTextAttribute.

        Parameters
        ----------
        data_rule: GrantaServerApiSchemaSlimEntitiesSlimNamedEntity
            The data_rule of this GrantaServerApiSchemaAttributesShortTextAttribute.
        """
        self._data_rule = data_rule

    @classmethod
    def get_real_child_model(cls, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()  # type: ignore[no-any-return]

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiSchemaAttributesShortTextAttribute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
