"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import (
    TYPE_CHECKING,
    Any,
    Dict,
    List,
    BinaryIO,
    Optional,
    Union,
)  # noqa: F401

from . import ModelBase
from ansys.grantami.serverapi_openapi.models.granta_server_api_aggregations_aggregation_datum_criterion import (
    GrantaServerApiAggregationsAggregationDatumCriterion,
)  # noqa: F401


if TYPE_CHECKING:
    from datetime import datetime
    import pathlib
    from . import *


class GrantaServerApiAggregationsDateTimeHistogramAggregationDatumCriterion(
    GrantaServerApiAggregationsAggregationDatumCriterion
):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: Dict[str, str] = {
        "maximum_number_of_buckets": "int",
        "type": "str",
    }

    attribute_map: Dict[str, str] = {
        "maximum_number_of_buckets": "maximumNumberOfBuckets",
        "type": "type",
    }

    subtype_mapping: Dict[str, str] = {}

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        maximum_number_of_buckets: "Optional[int]" = None,
        type: "str" = "dateTimeHistogram",
    ) -> None:
        """GrantaServerApiAggregationsDateTimeHistogramAggregationDatumCriterion - a model defined in Swagger

        Parameters
        ----------
            maximum_number_of_buckets: int, optional
            type: str
        """
        super().__init__()
        self._maximum_number_of_buckets = None
        self._type: str = None  # type: ignore[assignment]

        if maximum_number_of_buckets is not None:
            self.maximum_number_of_buckets = maximum_number_of_buckets
        self.type = type

    @property
    def maximum_number_of_buckets(self) -> "Optional[int]":
        """Gets the maximum_number_of_buckets of this GrantaServerApiAggregationsDateTimeHistogramAggregationDatumCriterion.
        The maximum number of buckets to return.

        Returns
        -------
        int
            The maximum_number_of_buckets of this GrantaServerApiAggregationsDateTimeHistogramAggregationDatumCriterion.
        """
        return self._maximum_number_of_buckets

    @maximum_number_of_buckets.setter
    def maximum_number_of_buckets(
        self, maximum_number_of_buckets: "Optional[int]"
    ) -> None:
        """Sets the maximum_number_of_buckets of this GrantaServerApiAggregationsDateTimeHistogramAggregationDatumCriterion.
        The maximum number of buckets to return.

        Parameters
        ----------
        maximum_number_of_buckets: int
            The maximum_number_of_buckets of this GrantaServerApiAggregationsDateTimeHistogramAggregationDatumCriterion.
        """
        self._maximum_number_of_buckets = maximum_number_of_buckets

    @property
    def type(self) -> "str":
        """Gets the type of this GrantaServerApiAggregationsDateTimeHistogramAggregationDatumCriterion.

        Returns
        -------
        str
            The type of this GrantaServerApiAggregationsDateTimeHistogramAggregationDatumCriterion.
        """
        return self._type

    @type.setter
    def type(self, type: "str") -> None:
        """Sets the type of this GrantaServerApiAggregationsDateTimeHistogramAggregationDatumCriterion.

        Parameters
        ----------
        type: str
            The type of this GrantaServerApiAggregationsDateTimeHistogramAggregationDatumCriterion.
        """
        if type is None:
            raise ValueError("Invalid value for 'type', must not be 'None'")
        self._type = type

    @classmethod
    def get_real_child_model(cls, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()  # type: ignore[no-any-return]

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(
            other, GrantaServerApiAggregationsDateTimeHistogramAggregationDatumCriterion
        ):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
