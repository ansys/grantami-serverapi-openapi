"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING, Any, Dict, List, Optional  # noqa: F401

from . import ModelBase


if TYPE_CHECKING:
    from . import *

class GrantaServerApiDataExportDatumsSeries(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.

    """
    swagger_types = {
        "parameter_values": "list[GrantaServerApiDataExportDatumsParameterValue]",
        "points": "list[GrantaServerApiDataExportDatumsSeriesPoint]",
        "graph_decoration": "GrantaServerApiDataExportDatumsGraphDecoration",
    }

    attribute_map = {
        "parameter_values": "parameterValues",
        "points": "points",
        "graph_decoration": "graphDecoration",
    }

    subtype_mapping = {
        "parameterValues": "GrantaServerApiDataExportDatumsParameterValue",
        "points": "GrantaServerApiDataExportDatumsSeriesPoint",
        "graphDecoration": "GrantaServerApiDataExportDatumsGraphDecoration",
    }

    def __init__(self, *, graph_decoration: "Optional[GrantaServerApiDataExportDatumsGraphDecoration]" = None, parameter_values: "Optional[List[GrantaServerApiDataExportDatumsParameterValue]]" = None, points: "Optional[List[GrantaServerApiDataExportDatumsSeriesPoint]]" = None) -> None:
        """GrantaServerApiDataExportDatumsSeries - a model defined in Swagger

        Parameters
        ----------
            graph_decoration: GrantaServerApiDataExportDatumsGraphDecoration, optional
            parameter_values: List[GrantaServerApiDataExportDatumsParameterValue], optional
            points: List[GrantaServerApiDataExportDatumsSeriesPoint], optional
        """
        self._parameter_values = None
        self._points = None
        self._graph_decoration = None
        self.discriminator = None
        if parameter_values is not None:
            self.parameter_values = parameter_values
        if points is not None:
            self.points = points
        if graph_decoration is not None:
            self.graph_decoration = graph_decoration

    @property
    def parameter_values(self) -> "list[GrantaServerApiDataExportDatumsParameterValue]":
        """Gets the parameter_values of this GrantaServerApiDataExportDatumsSeries.

        Returns
        -------
        list[GrantaServerApiDataExportDatumsParameterValue]
            The parameter_values of this GrantaServerApiDataExportDatumsSeries.
        """
        return self._parameter_values

    @parameter_values.setter
    def parameter_values(self, parameter_values: "list[GrantaServerApiDataExportDatumsParameterValue]") -> None:
        """Sets the parameter_values of this GrantaServerApiDataExportDatumsSeries.

        Parameters
        ----------
        parameter_values: list[GrantaServerApiDataExportDatumsParameterValue]
            The parameter_values of this GrantaServerApiDataExportDatumsSeries.
        """
        self._parameter_values = parameter_values

    @property
    def points(self) -> "list[GrantaServerApiDataExportDatumsSeriesPoint]":
        """Gets the points of this GrantaServerApiDataExportDatumsSeries.

        Returns
        -------
        list[GrantaServerApiDataExportDatumsSeriesPoint]
            The points of this GrantaServerApiDataExportDatumsSeries.
        """
        return self._points

    @points.setter
    def points(self, points: "list[GrantaServerApiDataExportDatumsSeriesPoint]") -> None:
        """Sets the points of this GrantaServerApiDataExportDatumsSeries.

        Parameters
        ----------
        points: list[GrantaServerApiDataExportDatumsSeriesPoint]
            The points of this GrantaServerApiDataExportDatumsSeries.
        """
        self._points = points

    @property
    def graph_decoration(self) -> "GrantaServerApiDataExportDatumsGraphDecoration":
        """Gets the graph_decoration of this GrantaServerApiDataExportDatumsSeries.

        Returns
        -------
        GrantaServerApiDataExportDatumsGraphDecoration
            The graph_decoration of this GrantaServerApiDataExportDatumsSeries.
        """
        return self._graph_decoration

    @graph_decoration.setter
    def graph_decoration(self, graph_decoration: "GrantaServerApiDataExportDatumsGraphDecoration") -> None:
        """Sets the graph_decoration of this GrantaServerApiDataExportDatumsSeries.

        Parameters
        ----------
        graph_decoration: GrantaServerApiDataExportDatumsGraphDecoration
            The graph_decoration of this GrantaServerApiDataExportDatumsSeries.
        """
        self._graph_decoration = graph_decoration

    def get_real_child_model(self, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def to_dict(self) -> Dict:
        """Returns the model properties as a dict

        Returns
        -------
        Dict
            Dictionary indexed by property name containing all the model properties
        """
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiDataExportDatumsSeries, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model

        Returns
        -------
        str
            String representation of the model as a dictionary
        """
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiDataExportDatumsSeries):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
