"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING, Any, Dict, List, Optional  # noqa: F401

from . import ModelBase

from ansys.grantami.serverapi_openapi.models.granta_server_api_aggregations_attribute_value_aggregation import GrantaServerApiAggregationsAttributeValueAggregation  # noqa: F401

if TYPE_CHECKING:
    from . import *

class GrantaServerApiAggregationsDateTimeAttributeAggregation(GrantaServerApiAggregationsAttributeValueAggregation):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.

    """
    swagger_types = {
        "minimum": "datetime",
        "maximum": "datetime",
        "datum_type": "str",
    }

    attribute_map = {
        "minimum": "minimum",
        "maximum": "maximum",
        "datum_type": "datumType",
    }

    subtype_mapping = {
    }

    def __init__(self, *, attribute_aggregation_type: "str" = 'value', attribute_guid: "Optional[str]" = None, attribute_identity: "Optional[int]" = None, count: "Optional[int]" = None, datum_type: "str" = 'dateTime', maximum: "Optional[datetime]" = None, minimum: "Optional[datetime]" = None, type: "str" = 'attribute') -> None:
        """GrantaServerApiAggregationsDateTimeAttributeAggregation - a model defined in Swagger

        Parameters
        ----------
            attribute_aggregation_type: str
            attribute_guid: str, optional
            attribute_identity: int, optional
            count: int, optional
            datum_type: str
            maximum: datetime, optional
            minimum: datetime, optional
            type: str
        """
        super().__init__(attribute_aggregation_type=attribute_aggregation_type, attribute_guid=attribute_guid, attribute_identity=attribute_identity, count=count, type=type)
        self._minimum = None
        self._maximum = None
        self._datum_type = None
        self.discriminator = None
        if minimum is not None:
            self.minimum = minimum
        if maximum is not None:
            self.maximum = maximum
        self.datum_type = datum_type

    @property
    def minimum(self) -> "datetime":
        """Gets the minimum of this GrantaServerApiAggregationsDateTimeAttributeAggregation.

        Returns
        -------
        datetime
            The minimum of this GrantaServerApiAggregationsDateTimeAttributeAggregation.
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum: "datetime") -> None:
        """Sets the minimum of this GrantaServerApiAggregationsDateTimeAttributeAggregation.

        Parameters
        ----------
        minimum: datetime
            The minimum of this GrantaServerApiAggregationsDateTimeAttributeAggregation.
        """
        self._minimum = minimum

    @property
    def maximum(self) -> "datetime":
        """Gets the maximum of this GrantaServerApiAggregationsDateTimeAttributeAggregation.

        Returns
        -------
        datetime
            The maximum of this GrantaServerApiAggregationsDateTimeAttributeAggregation.
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum: "datetime") -> None:
        """Sets the maximum of this GrantaServerApiAggregationsDateTimeAttributeAggregation.

        Parameters
        ----------
        maximum: datetime
            The maximum of this GrantaServerApiAggregationsDateTimeAttributeAggregation.
        """
        self._maximum = maximum

    @property
    def datum_type(self) -> "str":
        """Gets the datum_type of this GrantaServerApiAggregationsDateTimeAttributeAggregation.

        Returns
        -------
        str
            The datum_type of this GrantaServerApiAggregationsDateTimeAttributeAggregation.
        """
        return self._datum_type

    @datum_type.setter
    def datum_type(self, datum_type: "str") -> None:
        """Sets the datum_type of this GrantaServerApiAggregationsDateTimeAttributeAggregation.

        Parameters
        ----------
        datum_type: str
            The datum_type of this GrantaServerApiAggregationsDateTimeAttributeAggregation.
        """
        if datum_type is None:
            raise ValueError("Invalid value for 'datum_type', must not be 'None'")
        self._datum_type = datum_type

    def get_real_child_model(self, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def to_dict(self) -> Dict:
        """Returns the model properties as a dict

        Returns
        -------
        Dict
            Dictionary indexed by property name containing all the model properties
        """
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiAggregationsDateTimeAttributeAggregation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model

        Returns
        -------
        str
            String representation of the model as a dictionary
        """
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiAggregationsDateTimeAttributeAggregation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
