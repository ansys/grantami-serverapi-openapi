"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import (
    TYPE_CHECKING,
    Any,
    Dict,
    List,
    BinaryIO,
    Optional,
    Union,
)  # noqa: F401

from . import ModelBase
from ansys.grantami.serverapi_openapi.models.granta_server_api_aggregations_aggregation_datum import (
    GrantaServerApiAggregationsAggregationDatum,
)  # noqa: F401


if TYPE_CHECKING:
    from datetime import datetime
    import pathlib
    from . import *


class GrantaServerApiAggregationsFloatFunctionalAggregation(
    GrantaServerApiAggregationsAggregationDatum
):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: Dict[str, str] = {
        "datum_type": "str",
        "grid_graphs": "GrantaServerApiAggregationsFloatFunctionalGridGraphAggregation",
        "series_graphs": "GrantaServerApiAggregationsFloatFunctionalSeriesGraphAggregation",
    }

    attribute_map: Dict[str, str] = {
        "datum_type": "datumType",
        "grid_graphs": "gridGraphs",
        "series_graphs": "seriesGraphs",
    }

    subtype_mapping: Dict[str, str] = {
        "seriesGraphs": "GrantaServerApiAggregationsFloatFunctionalSeriesGraphAggregation",
        "gridGraphs": "GrantaServerApiAggregationsFloatFunctionalGridGraphAggregation",
    }

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        datum_type: "str" = "floatFunctionalGraph",
        grid_graphs: "Optional[GrantaServerApiAggregationsFloatFunctionalGridGraphAggregation]" = None,
        series_graphs: "Optional[GrantaServerApiAggregationsFloatFunctionalSeriesGraphAggregation]" = None,
    ) -> None:
        """GrantaServerApiAggregationsFloatFunctionalAggregation - a model defined in Swagger

        Parameters
        ----------
            datum_type: str
            grid_graphs: GrantaServerApiAggregationsFloatFunctionalGridGraphAggregation, optional
            series_graphs: GrantaServerApiAggregationsFloatFunctionalSeriesGraphAggregation, optional
        """
        super().__init__()
        self._series_graphs = None
        self._grid_graphs = None
        self._datum_type: str = None  # type: ignore[assignment]

        if series_graphs is not None:
            self.series_graphs = series_graphs
        if grid_graphs is not None:
            self.grid_graphs = grid_graphs
        self.datum_type = datum_type

    @property
    def series_graphs(
        self,
    ) -> "Optional[GrantaServerApiAggregationsFloatFunctionalSeriesGraphAggregation]":
        """Gets the series_graphs of this GrantaServerApiAggregationsFloatFunctionalAggregation.

        Returns
        -------
        GrantaServerApiAggregationsFloatFunctionalSeriesGraphAggregation
            The series_graphs of this GrantaServerApiAggregationsFloatFunctionalAggregation.
        """
        return self._series_graphs

    @series_graphs.setter
    def series_graphs(
        self,
        series_graphs: "Optional[GrantaServerApiAggregationsFloatFunctionalSeriesGraphAggregation]",
    ) -> None:
        """Sets the series_graphs of this GrantaServerApiAggregationsFloatFunctionalAggregation.

        Parameters
        ----------
        series_graphs: GrantaServerApiAggregationsFloatFunctionalSeriesGraphAggregation
            The series_graphs of this GrantaServerApiAggregationsFloatFunctionalAggregation.
        """
        self._series_graphs = series_graphs

    @property
    def grid_graphs(
        self,
    ) -> "Optional[GrantaServerApiAggregationsFloatFunctionalGridGraphAggregation]":
        """Gets the grid_graphs of this GrantaServerApiAggregationsFloatFunctionalAggregation.

        Returns
        -------
        GrantaServerApiAggregationsFloatFunctionalGridGraphAggregation
            The grid_graphs of this GrantaServerApiAggregationsFloatFunctionalAggregation.
        """
        return self._grid_graphs

    @grid_graphs.setter
    def grid_graphs(
        self,
        grid_graphs: "Optional[GrantaServerApiAggregationsFloatFunctionalGridGraphAggregation]",
    ) -> None:
        """Sets the grid_graphs of this GrantaServerApiAggregationsFloatFunctionalAggregation.

        Parameters
        ----------
        grid_graphs: GrantaServerApiAggregationsFloatFunctionalGridGraphAggregation
            The grid_graphs of this GrantaServerApiAggregationsFloatFunctionalAggregation.
        """
        self._grid_graphs = grid_graphs

    @property
    def datum_type(self) -> "str":
        """Gets the datum_type of this GrantaServerApiAggregationsFloatFunctionalAggregation.

        Returns
        -------
        str
            The datum_type of this GrantaServerApiAggregationsFloatFunctionalAggregation.
        """
        return self._datum_type

    @datum_type.setter
    def datum_type(self, datum_type: "str") -> None:
        """Sets the datum_type of this GrantaServerApiAggregationsFloatFunctionalAggregation.

        Parameters
        ----------
        datum_type: str
            The datum_type of this GrantaServerApiAggregationsFloatFunctionalAggregation.
        """
        if datum_type is None:
            raise ValueError("Invalid value for 'datum_type', must not be 'None'")
        self._datum_type = datum_type

    @classmethod
    def get_real_child_model(cls, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()  # type: ignore[no-any-return]

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiAggregationsFloatFunctionalAggregation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
