"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional, Union  # noqa: F401

from . import ModelBase, Unset, Unset_Type


if TYPE_CHECKING:
    from datetime import datetime
    import pathlib
    from . import *


class GsaQueryAttributesRequest(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "properties": "GsaQueryAttributeProperties",
        "filter": "GsaQueryAttributeFilter",
    }

    attribute_map: dict[str, str] = {
        "properties": "properties",
        "filter": "filter",
    }

    subtype_mapping: dict[str, str] = {
        "properties": "GsaQueryAttributeProperties",
        "filter": "GsaQueryAttributeFilter",
    }

    discriminator: Optional[str] = None

    def __init__(self, *, properties: "GsaQueryAttributeProperties", filter: "Union[GsaQueryAttributeFilter, Unset_Type]" = Unset,) -> None:
        """GsaQueryAttributesRequest - a model defined in Swagger

        Parameters
        ----------
        properties: GsaQueryAttributeProperties
        filter: GsaQueryAttributeFilter, optional
        """
        self._properties: GsaQueryAttributeProperties
        self._filter: Union[GsaQueryAttributeFilter, Unset_Type] = Unset

        self.properties = properties
        if filter is not Unset:
            self.filter = filter

    @property
    def properties(self) -> "GsaQueryAttributeProperties":
        """Gets the properties of this GsaQueryAttributesRequest.

        Returns
        -------
        GsaQueryAttributeProperties
            The properties of this GsaQueryAttributesRequest.
        """
        return self._properties

    @properties.setter
    def properties(self, properties: "GsaQueryAttributeProperties") -> None:
        """Sets the properties of this GsaQueryAttributesRequest.

        Parameters
        ----------
        properties: GsaQueryAttributeProperties
            The properties of this GsaQueryAttributesRequest.
        """
        # Field is not nullable
        if properties is None:
            raise ValueError("Invalid value for 'properties', must not be 'None'")
        # Field is required
        if properties is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'properties', must not be 'Unset'")
        self._properties = properties

    @property
    def filter(self) -> "Union[GsaQueryAttributeFilter, Unset_Type]":
        """Gets the filter of this GsaQueryAttributesRequest.

        Returns
        -------
        Union[GsaQueryAttributeFilter, Unset_Type]
            The filter of this GsaQueryAttributesRequest.
        """
        return self._filter

    @filter.setter
    def filter(self, filter: "Union[GsaQueryAttributeFilter, Unset_Type]") -> None:
        """Sets the filter of this GsaQueryAttributesRequest.

        Parameters
        ----------
        filter: Union[GsaQueryAttributeFilter, Unset_Type]
            The filter of this GsaQueryAttributesRequest.
        """
        # Field is not nullable
        if filter is None:
            raise ValueError("Invalid value for 'filter', must not be 'None'")
        self._filter = filter

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaQueryAttributesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other

