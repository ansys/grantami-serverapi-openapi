# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from . import ModelBase

from ansys.grantami.serverapi_openapi.models.granta_server_api_data_export_datums_link_datum import GrantaServerApiDataExportDatumsLinkDatum  # noqa: F401,E501

class GrantaServerApiDataExportDatumsTabularDatum(GrantaServerApiDataExportDatumsLinkDatum):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute_name': 'str',
        'tabular_rows': 'list[GrantaServerApiDataExportDatumsTabularRow]',
        'link_datum_type': 'str'
    }
    if hasattr(GrantaServerApiDataExportDatumsLinkDatum, "swagger_types"):
        swagger_types.update(GrantaServerApiDataExportDatumsLinkDatum.swagger_types)

    attribute_map = {
        'attribute_name': 'attributeName',
        'tabular_rows': 'tabularRows',
        'link_datum_type': 'linkDatumType'
    }
    if hasattr(GrantaServerApiDataExportDatumsLinkDatum, "attribute_map"):
        attribute_map.update(GrantaServerApiDataExportDatumsLinkDatum.attribute_map)

    subtype_mapping = {
        'tabularRows': 'GrantaServerApiDataExportDatumsTabularRow',
    }


    def __init__(self, attribute_name=None, tabular_rows=None, link_datum_type='tabular', *args, **kwargs):  # noqa: E501
        """GrantaServerApiDataExportDatumsTabularDatum - a model defined in Swagger"""  # noqa: E501
        GrantaServerApiDataExportDatumsLinkDatum.__init__(self, *args, **kwargs)
        self._attribute_name = None
        self._tabular_rows = None
        self._link_datum_type = None
        self.discriminator = None
        if attribute_name is not None:
            self.attribute_name = attribute_name
        if tabular_rows is not None:
            self.tabular_rows = tabular_rows
        self.link_datum_type = link_datum_type

    @property
    def attribute_name(self):
        """Gets the attribute_name of this GrantaServerApiDataExportDatumsTabularDatum.  # noqa: E501

        :return: The attribute_name of this GrantaServerApiDataExportDatumsTabularDatum.  # noqa: E501
        :rtype: str
        """
        return self._attribute_name

    @attribute_name.setter
    def attribute_name(self, attribute_name):
        """Sets the attribute_name of this GrantaServerApiDataExportDatumsTabularDatum.

        :param attribute_name: The attribute_name of this GrantaServerApiDataExportDatumsTabularDatum.  # noqa: E501
        :type: str
        """
        self._attribute_name = attribute_name

    @property
    def tabular_rows(self):
        """Gets the tabular_rows of this GrantaServerApiDataExportDatumsTabularDatum.  # noqa: E501

        :return: The tabular_rows of this GrantaServerApiDataExportDatumsTabularDatum.  # noqa: E501
        :rtype: list[GrantaServerApiDataExportDatumsTabularRow]
        """
        return self._tabular_rows

    @tabular_rows.setter
    def tabular_rows(self, tabular_rows):
        """Sets the tabular_rows of this GrantaServerApiDataExportDatumsTabularDatum.

        :param tabular_rows: The tabular_rows of this GrantaServerApiDataExportDatumsTabularDatum.  # noqa: E501
        :type: list[GrantaServerApiDataExportDatumsTabularRow]
        """
        self._tabular_rows = tabular_rows

    @property
    def link_datum_type(self):
        """Gets the link_datum_type of this GrantaServerApiDataExportDatumsTabularDatum.  # noqa: E501

        :return: The link_datum_type of this GrantaServerApiDataExportDatumsTabularDatum.  # noqa: E501
        :rtype: str
        """
        return self._link_datum_type

    @link_datum_type.setter
    def link_datum_type(self, link_datum_type):
        """Sets the link_datum_type of this GrantaServerApiDataExportDatumsTabularDatum.

        :param link_datum_type: The link_datum_type of this GrantaServerApiDataExportDatumsTabularDatum.  # noqa: E501
        :type: str
        """
        if link_datum_type is None:
            raise ValueError("Invalid value for `link_datum_type`, must not be `None`")  # noqa: E501
        self._link_datum_type = link_datum_type

    def get_real_child_model(self, data):
        """Raises a NotImplementedError for a type without a discriminator defined."""
        raise NotImplementedError()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiDataExportDatumsTabularDatum, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiDataExportDatumsTabularDatum):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
