"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING, Any, Dict, List, Optional  # noqa: F401

from . import ModelBase

from ansys.grantami.serverapi_openapi.models.granta_server_api_data_export_datums_link_datum import GrantaServerApiDataExportDatumsLinkDatum  # noqa: F401

if TYPE_CHECKING:
    from . import *

class GrantaServerApiDataExportDatumsTabularDatum(GrantaServerApiDataExportDatumsLinkDatum):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.

    """
    swagger_types = {
        "attribute_name": "str",
        "tabular_rows": "list[GrantaServerApiDataExportDatumsTabularRow]",
        "link_datum_type": "str",
    }

    attribute_map = {
        "attribute_name": "attributeName",
        "tabular_rows": "tabularRows",
        "link_datum_type": "linkDatumType",
    }

    subtype_mapping = {
        "tabularRows": "GrantaServerApiDataExportDatumsTabularRow",
    }

    def __init__(self, *, attribute_guid: "Optional[str]" = None, attribute_identity: "Optional[int]" = None, attribute_name: "Optional[str]" = None, datum_type: "str" = 'link', link_datum_type: "str" = 'tabular', meta_datums: "Optional[List[GrantaServerApiDataExportDatumsDatum]]" = None, not_applicable: "Optional[bool]" = None, tabular_rows: "Optional[List[GrantaServerApiDataExportDatumsTabularRow]]" = None) -> None:
        """GrantaServerApiDataExportDatumsTabularDatum - a model defined in Swagger

        Parameters
        ----------
            attribute_guid: str, optional
            attribute_identity: int, optional
            attribute_name: str, optional
            datum_type: str
            link_datum_type: str
            meta_datums: List[GrantaServerApiDataExportDatumsDatum], optional
            not_applicable: bool, optional
            tabular_rows: List[GrantaServerApiDataExportDatumsTabularRow], optional
        """
        super().__init__(attribute_guid=attribute_guid, attribute_identity=attribute_identity, datum_type=datum_type, meta_datums=meta_datums, not_applicable=not_applicable)
        self._attribute_name = None
        self._tabular_rows = None
        self._link_datum_type = None
        self.discriminator = None
        if attribute_name is not None:
            self.attribute_name = attribute_name
        if tabular_rows is not None:
            self.tabular_rows = tabular_rows
        self.link_datum_type = link_datum_type

    @property
    def attribute_name(self) -> "str":
        """Gets the attribute_name of this GrantaServerApiDataExportDatumsTabularDatum.

        Returns
        -------
        str
            The attribute_name of this GrantaServerApiDataExportDatumsTabularDatum.
        """
        return self._attribute_name

    @attribute_name.setter
    def attribute_name(self, attribute_name: "str") -> None:
        """Sets the attribute_name of this GrantaServerApiDataExportDatumsTabularDatum.

        Parameters
        ----------
        attribute_name: str
            The attribute_name of this GrantaServerApiDataExportDatumsTabularDatum.
        """
        self._attribute_name = attribute_name

    @property
    def tabular_rows(self) -> "list[GrantaServerApiDataExportDatumsTabularRow]":
        """Gets the tabular_rows of this GrantaServerApiDataExportDatumsTabularDatum.

        Returns
        -------
        list[GrantaServerApiDataExportDatumsTabularRow]
            The tabular_rows of this GrantaServerApiDataExportDatumsTabularDatum.
        """
        return self._tabular_rows

    @tabular_rows.setter
    def tabular_rows(self, tabular_rows: "list[GrantaServerApiDataExportDatumsTabularRow]") -> None:
        """Sets the tabular_rows of this GrantaServerApiDataExportDatumsTabularDatum.

        Parameters
        ----------
        tabular_rows: list[GrantaServerApiDataExportDatumsTabularRow]
            The tabular_rows of this GrantaServerApiDataExportDatumsTabularDatum.
        """
        self._tabular_rows = tabular_rows

    @property
    def link_datum_type(self) -> "str":
        """Gets the link_datum_type of this GrantaServerApiDataExportDatumsTabularDatum.

        Returns
        -------
        str
            The link_datum_type of this GrantaServerApiDataExportDatumsTabularDatum.
        """
        return self._link_datum_type

    @link_datum_type.setter
    def link_datum_type(self, link_datum_type: "str") -> None:
        """Sets the link_datum_type of this GrantaServerApiDataExportDatumsTabularDatum.

        Parameters
        ----------
        link_datum_type: str
            The link_datum_type of this GrantaServerApiDataExportDatumsTabularDatum.
        """
        if link_datum_type is None:
            raise ValueError("Invalid value for 'link_datum_type', must not be 'None'")
        self._link_datum_type = link_datum_type

    def get_real_child_model(self, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def to_dict(self) -> Dict:
        """Returns the model properties as a dict

        Returns
        -------
        Dict
            Dictionary indexed by property name containing all the model properties
        """
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiDataExportDatumsTabularDatum, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model

        Returns
        -------
        str
            String representation of the model as a dictionary
        """
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiDataExportDatumsTabularDatum):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
