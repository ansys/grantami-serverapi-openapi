# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from . import ModelBase


class GrantaServerApiSchemaRecordLinkGroupsAttributeLinkPair(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute_source': 'GrantaServerApiSchemaSlimEntitiesSlimAttribute',
        'attribute_target': 'GrantaServerApiSchemaSlimEntitiesSlimAttribute'
    }

    attribute_map = {
        'attribute_source': 'attributeSource',
        'attribute_target': 'attributeTarget'
    }

    subtype_mapping = {
        'attributeSource': 'GrantaServerApiSchemaSlimEntitiesSlimAttribute',
        'attributeTarget': 'GrantaServerApiSchemaSlimEntitiesSlimAttribute'
    }


    def __init__(self, attribute_source=None, attribute_target=None):  # noqa: E501
        """GrantaServerApiSchemaRecordLinkGroupsAttributeLinkPair - a model defined in Swagger"""  # noqa: E501
        self._attribute_source = None
        self._attribute_target = None
        self.discriminator = None
        if attribute_source is not None:
            self.attribute_source = attribute_source
        if attribute_target is not None:
            self.attribute_target = attribute_target

    @property
    def attribute_source(self):
        """Gets the attribute_source of this GrantaServerApiSchemaRecordLinkGroupsAttributeLinkPair.  # noqa: E501

        :return: The attribute_source of this GrantaServerApiSchemaRecordLinkGroupsAttributeLinkPair.  # noqa: E501
        :rtype: GrantaServerApiSchemaSlimEntitiesSlimAttribute
        """
        return self._attribute_source

    @attribute_source.setter
    def attribute_source(self, attribute_source):
        """Sets the attribute_source of this GrantaServerApiSchemaRecordLinkGroupsAttributeLinkPair.

        :param attribute_source: The attribute_source of this GrantaServerApiSchemaRecordLinkGroupsAttributeLinkPair.  # noqa: E501
        :type: GrantaServerApiSchemaSlimEntitiesSlimAttribute
        """
        self._attribute_source = attribute_source

    @property
    def attribute_target(self):
        """Gets the attribute_target of this GrantaServerApiSchemaRecordLinkGroupsAttributeLinkPair.  # noqa: E501

        :return: The attribute_target of this GrantaServerApiSchemaRecordLinkGroupsAttributeLinkPair.  # noqa: E501
        :rtype: GrantaServerApiSchemaSlimEntitiesSlimAttribute
        """
        return self._attribute_target

    @attribute_target.setter
    def attribute_target(self, attribute_target):
        """Sets the attribute_target of this GrantaServerApiSchemaRecordLinkGroupsAttributeLinkPair.

        :param attribute_target: The attribute_target of this GrantaServerApiSchemaRecordLinkGroupsAttributeLinkPair.  # noqa: E501
        :type: GrantaServerApiSchemaSlimEntitiesSlimAttribute
        """
        self._attribute_target = attribute_target

    def get_real_child_model(self, data):
        """Raises a NotImplementedError for a type without a discriminator defined."""
        raise NotImplementedError()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiSchemaRecordLinkGroupsAttributeLinkPair, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiSchemaRecordLinkGroupsAttributeLinkPair):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
