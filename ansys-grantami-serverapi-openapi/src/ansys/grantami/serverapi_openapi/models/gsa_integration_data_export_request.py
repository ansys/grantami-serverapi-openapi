"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional, Union  # noqa: F401

from . import ModelBase, Unset, Unset_Type


if TYPE_CHECKING:
    from datetime import datetime
    import pathlib
    from . import *


class GsaIntegrationDataExportRequest(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "attribute_identities": "list[int]",
        "record_history_references": "list[GsaRecordHistoryReference]",
        "record_version_references": "list[GsaRecordVersionReference]",
    }

    attribute_map: dict[str, str] = {
        "attribute_identities": "attributeIdentities",
        "record_history_references": "recordHistoryReferences",
        "record_version_references": "recordVersionReferences",
    }

    subtype_mapping: dict[str, str] = {
        "recordHistoryReferences": "GsaRecordHistoryReference",
        "recordVersionReferences": "GsaRecordVersionReference",
    }

    discriminator: Optional[str] = None

    def __init__(self, *, attribute_identities: "list[int]", record_history_references: "Union[list[GsaRecordHistoryReference], None, Unset_Type]" = Unset, record_version_references: "Union[list[GsaRecordVersionReference], None, Unset_Type]" = Unset,) -> None:
        """GsaIntegrationDataExportRequest - a model defined in Swagger

        Parameters
        ----------
        attribute_identities: list[int]
        record_history_references: list[GsaRecordHistoryReference], optional
        record_version_references: list[GsaRecordVersionReference], optional
        """
        self._record_history_references: Union[list[GsaRecordHistoryReference], None, Unset_Type] = Unset
        self._record_version_references: Union[list[GsaRecordVersionReference], None, Unset_Type] = Unset
        self._attribute_identities: list[int]

        if record_history_references is not Unset:
            self.record_history_references = record_history_references
        if record_version_references is not Unset:
            self.record_version_references = record_version_references
        self.attribute_identities = attribute_identities

    @property
    def record_history_references(self) -> "Union[list[GsaRecordHistoryReference], None, Unset_Type]":
        """Gets the record_history_references of this GsaIntegrationDataExportRequest.
        A list of record histories to export. These are references to the underlying records in the source database.  Data can be exported for either record histories or record versions in each request, not both.

        Returns
        -------
        Union[list[GsaRecordHistoryReference], None, Unset_Type]
            The record_history_references of this GsaIntegrationDataExportRequest.
        """
        return self._record_history_references

    @record_history_references.setter
    def record_history_references(self, record_history_references: "Union[list[GsaRecordHistoryReference], None, Unset_Type]") -> None:
        """Sets the record_history_references of this GsaIntegrationDataExportRequest.
        A list of record histories to export. These are references to the underlying records in the source database.  Data can be exported for either record histories or record versions in each request, not both.

        Parameters
        ----------
        record_history_references: Union[list[GsaRecordHistoryReference], None, Unset_Type]
            The record_history_references of this GsaIntegrationDataExportRequest.
        """
        self._record_history_references = record_history_references

    @property
    def record_version_references(self) -> "Union[list[GsaRecordVersionReference], None, Unset_Type]":
        """Gets the record_version_references of this GsaIntegrationDataExportRequest.
        A list of record versions to export. These are references to the underlying records in the source database.  Data can be exported for either record histories or record versions in each request, not both.

        Returns
        -------
        Union[list[GsaRecordVersionReference], None, Unset_Type]
            The record_version_references of this GsaIntegrationDataExportRequest.
        """
        return self._record_version_references

    @record_version_references.setter
    def record_version_references(self, record_version_references: "Union[list[GsaRecordVersionReference], None, Unset_Type]") -> None:
        """Sets the record_version_references of this GsaIntegrationDataExportRequest.
        A list of record versions to export. These are references to the underlying records in the source database.  Data can be exported for either record histories or record versions in each request, not both.

        Parameters
        ----------
        record_version_references: Union[list[GsaRecordVersionReference], None, Unset_Type]
            The record_version_references of this GsaIntegrationDataExportRequest.
        """
        self._record_version_references = record_version_references

    @property
    def attribute_identities(self) -> "list[int]":
        """Gets the attribute_identities of this GsaIntegrationDataExportRequest.
        A list of attribute to export. These are the attribute identities from the integration schema.

        Returns
        -------
        list[int]
            The attribute_identities of this GsaIntegrationDataExportRequest.
        """
        return self._attribute_identities

    @attribute_identities.setter
    def attribute_identities(self, attribute_identities: "list[int]") -> None:
        """Sets the attribute_identities of this GsaIntegrationDataExportRequest.
        A list of attribute to export. These are the attribute identities from the integration schema.

        Parameters
        ----------
        attribute_identities: list[int]
            The attribute_identities of this GsaIntegrationDataExportRequest.
        """
        # Field is not nullable
        if attribute_identities is None:
            raise ValueError("Invalid value for 'attribute_identities', must not be 'None'")
        # Field is required
        if attribute_identities is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'attribute_identities', must not be 'Unset'")
        self._attribute_identities = attribute_identities

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaIntegrationDataExportRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other

