"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING, Any, Dict, List, Optional  # noqa: F401

from . import ModelBase


if TYPE_CHECKING:
    from . import *


class GrantaServerApiDataExportDatumsApplicableDatum(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator_class_map: Dict[str, str]
        They key is discriminator value and the value is associated subtype.
    """
    swagger_types = {
        "attribute_guid": "str",
        "attribute_identity": "int",
        "meta_datums": "list[GrantaServerApiDataExportDatumsDatum]",
        "not_applicable": "bool",
    }

    attribute_map = {
        "attribute_guid": "attributeGuid",
        "attribute_identity": "attributeIdentity",
        "meta_datums": "metaDatums",
        "not_applicable": "notApplicable",
    }

    subtype_mapping = {
        "metaDatums": "GrantaServerApiDataExportDatumsDatum",
    }

    discriminator_value_class_map = {
        "logical".lower(): "#/components/schemas/GrantaServerApiDataExportDatumsBooleanDatum",
        "dateTime".lower(): "#/components/schemas/GrantaServerApiDataExportDatumsDateTimeDatum",
        "discrete".lower(): "#/components/schemas/GrantaServerApiDataExportDatumsDiscreteDatum",
        "file".lower(): "#/components/schemas/GrantaServerApiDataExportDatumsFileDatum",
        "floatFunctional".lower(): "#/components/schemas/GrantaServerApiDataExportDatumsFloatFunctionalDatum",
        "discreteFunctional".lower(): "#/components/schemas/GrantaServerApiDataExportDatumsDiscreteFunctionalDatum",
        "hyperlink".lower(): "#/components/schemas/GrantaServerApiDataExportDatumsHyperlinkDatum",
        "link".lower(): "#/components/schemas/GrantaServerApiDataExportDatumsLinkDatum",
        "longText".lower(): "#/components/schemas/GrantaServerApiDataExportDatumsLongTextDatum",
        "integer".lower(): "#/components/schemas/GrantaServerApiDataExportDatumsNumericDatum",
        "picture".lower(): "#/components/schemas/GrantaServerApiDataExportDatumsPictureDatum",
        "point".lower(): "#/components/schemas/GrantaServerApiDataExportDatumsPointDatum",
        "range".lower(): "#/components/schemas/GrantaServerApiDataExportDatumsRangeDatum",
        "shortText".lower(): "#/components/schemas/GrantaServerApiDataExportDatumsShortTextDatum",
    }

    def __init__(
        self,
        *,
        attribute_guid: "Optional[str]" = None,
        attribute_identity: "Optional[int]" = None,
        meta_datums: "Optional[List[GrantaServerApiDataExportDatumsDatum]]" = None,
        not_applicable: "Optional[bool]" = None,
    ) -> None:
        """GrantaServerApiDataExportDatumsApplicableDatum - a model defined in Swagger

        Parameters
        ----------
            attribute_guid: str, optional
            attribute_identity: int, optional
            meta_datums: List[GrantaServerApiDataExportDatumsDatum], optional
            not_applicable: bool, optional
        """
        self._not_applicable = None
        self._attribute_identity = None
        self._attribute_guid = None
        self._meta_datums = None
        self.discriminator = "datumType"
        if not_applicable is not None:
            self.not_applicable = not_applicable
        if attribute_identity is not None:
            self.attribute_identity = attribute_identity
        if attribute_guid is not None:
            self.attribute_guid = attribute_guid
        if meta_datums is not None:
            self.meta_datums = meta_datums

    @property
    def not_applicable(self) -> "bool":
        """Gets the not_applicable of this GrantaServerApiDataExportDatumsApplicableDatum.

        Returns
        -------
        bool
            The not_applicable of this GrantaServerApiDataExportDatumsApplicableDatum.
        """
        return self._not_applicable

    @not_applicable.setter
    def not_applicable(self, not_applicable: "bool") -> None:
        """Sets the not_applicable of this GrantaServerApiDataExportDatumsApplicableDatum.

        Parameters
        ----------
        not_applicable: bool
            The not_applicable of this GrantaServerApiDataExportDatumsApplicableDatum.
        """
        self._not_applicable = not_applicable

    @property
    def attribute_identity(self) -> "int":
        """Gets the attribute_identity of this GrantaServerApiDataExportDatumsApplicableDatum.

        Returns
        -------
        int
            The attribute_identity of this GrantaServerApiDataExportDatumsApplicableDatum.
        """
        return self._attribute_identity

    @attribute_identity.setter
    def attribute_identity(self, attribute_identity: "int") -> None:
        """Sets the attribute_identity of this GrantaServerApiDataExportDatumsApplicableDatum.

        Parameters
        ----------
        attribute_identity: int
            The attribute_identity of this GrantaServerApiDataExportDatumsApplicableDatum.
        """
        self._attribute_identity = attribute_identity

    @property
    def attribute_guid(self) -> "str":
        """Gets the attribute_guid of this GrantaServerApiDataExportDatumsApplicableDatum.

        Returns
        -------
        str
            The attribute_guid of this GrantaServerApiDataExportDatumsApplicableDatum.
        """
        return self._attribute_guid

    @attribute_guid.setter
    def attribute_guid(self, attribute_guid: "str") -> None:
        """Sets the attribute_guid of this GrantaServerApiDataExportDatumsApplicableDatum.

        Parameters
        ----------
        attribute_guid: str
            The attribute_guid of this GrantaServerApiDataExportDatumsApplicableDatum.
        """
        self._attribute_guid = attribute_guid

    @property
    def meta_datums(self) -> "list[GrantaServerApiDataExportDatumsDatum]":
        """Gets the meta_datums of this GrantaServerApiDataExportDatumsApplicableDatum.

        Returns
        -------
        list[GrantaServerApiDataExportDatumsDatum]
            The meta_datums of this GrantaServerApiDataExportDatumsApplicableDatum.
        """
        return self._meta_datums

    @meta_datums.setter
    def meta_datums(
        self, meta_datums: "list[GrantaServerApiDataExportDatumsDatum]"
    ) -> None:
        """Sets the meta_datums of this GrantaServerApiDataExportDatumsApplicableDatum.

        Parameters
        ----------
        meta_datums: list[GrantaServerApiDataExportDatumsDatum]
            The meta_datums of this GrantaServerApiDataExportDatumsApplicableDatum.
        """
        self._meta_datums = meta_datums

    def get_real_child_model(self, data: ModelBase) -> str:
        """Returns the real base class as determined by the discriminator

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class
        """
        discriminator_value = str(data[self._get_discriminator_field_name()]).lower()
        # The actual class name is not available in swagger-codegen,
        # so we have to extract it from the JSON reference
        return self.discriminator_value_class_map.get(discriminator_value).rsplit(
            "/", 1
        )[-1]

    def _get_discriminator_field_name(self) -> str:
        name_tokens = self.discriminator.split("_")
        later_tokens = [element.capitalize() for element in name_tokens[1:]]
        return "".join([name_tokens[0], *later_tokens])

    def to_dict(self) -> Dict:
        """Returns the model properties as a dict

        Returns
        -------
        Dict
            Dictionary indexed by property name containing all the model properties
        """
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(GrantaServerApiDataExportDatumsApplicableDatum, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model

        Returns
        -------
        str
            String representation of the model as a dictionary
        """
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiDataExportDatumsApplicableDatum):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
