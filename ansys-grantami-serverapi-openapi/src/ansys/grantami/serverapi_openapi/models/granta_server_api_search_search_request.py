"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import (
    TYPE_CHECKING,
    Any,
    Dict,
    List,
    BinaryIO,
    Optional,
    Union,
)  # noqa: F401

from . import ModelBase


if TYPE_CHECKING:
    from datetime import datetime
    import pathlib
    from . import *


class GrantaServerApiSearchSearchRequest(ModelBase):  # type: ignore[misc]
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: Dict[str, str] = {
        "criterion": "GrantaServerApiSearchCriterion",
        "paging_options": "GrantaServerApiSearchPagingOptions",
        "sort_criteria": "list[GrantaServerApiSearchSortCriterion]",
    }

    attribute_map: Dict[str, str] = {
        "criterion": "criterion",
        "paging_options": "pagingOptions",
        "sort_criteria": "sortCriteria",
    }

    subtype_mapping: Dict[str, str] = {
        "criterion": "GrantaServerApiSearchCriterion",
        "sortCriteria": "GrantaServerApiSearchSortCriterion",
        "pagingOptions": "GrantaServerApiSearchPagingOptions",
    }

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        criterion: "Optional[GrantaServerApiSearchCriterion]" = None,
        paging_options: "Optional[GrantaServerApiSearchPagingOptions]" = None,
        sort_criteria: "Optional[List[GrantaServerApiSearchSortCriterion]]" = None,
    ) -> None:
        """GrantaServerApiSearchSearchRequest - a model defined in Swagger

        Parameters
        ----------
            criterion: GrantaServerApiSearchCriterion, optional
            paging_options: GrantaServerApiSearchPagingOptions, optional
            sort_criteria: List[GrantaServerApiSearchSortCriterion], optional
        """
        self._criterion = None
        self._sort_criteria = None
        self._paging_options = None

        if criterion is not None:
            self.criterion = criterion
        if sort_criteria is not None:
            self.sort_criteria = sort_criteria
        if paging_options is not None:
            self.paging_options = paging_options

    @property
    def criterion(self) -> "Optional[GrantaServerApiSearchCriterion]":
        """Gets the criterion of this GrantaServerApiSearchSearchRequest.

        Returns
        -------
        GrantaServerApiSearchCriterion
            The criterion of this GrantaServerApiSearchSearchRequest.
        """
        return self._criterion

    @criterion.setter
    def criterion(self, criterion: "Optional[GrantaServerApiSearchCriterion]") -> None:
        """Sets the criterion of this GrantaServerApiSearchSearchRequest.

        Parameters
        ----------
        criterion: GrantaServerApiSearchCriterion
            The criterion of this GrantaServerApiSearchSearchRequest.
        """
        self._criterion = criterion

    @property
    def sort_criteria(self) -> "Optional[List[GrantaServerApiSearchSortCriterion]]":
        """Gets the sort_criteria of this GrantaServerApiSearchSearchRequest.
        An optional set of attribute based sort criteria. If none are provided, the results will be sorted in descending relevance order.

        Returns
        -------
        list[GrantaServerApiSearchSortCriterion]
            The sort_criteria of this GrantaServerApiSearchSearchRequest.
        """
        return self._sort_criteria

    @sort_criteria.setter
    def sort_criteria(
        self, sort_criteria: "Optional[List[GrantaServerApiSearchSortCriterion]]"
    ) -> None:
        """Sets the sort_criteria of this GrantaServerApiSearchSearchRequest.
        An optional set of attribute based sort criteria. If none are provided, the results will be sorted in descending relevance order.

        Parameters
        ----------
        sort_criteria: List[GrantaServerApiSearchSortCriterion]
            The sort_criteria of this GrantaServerApiSearchSearchRequest.
        """
        self._sort_criteria = sort_criteria

    @property
    def paging_options(self) -> "Optional[GrantaServerApiSearchPagingOptions]":
        """Gets the paging_options of this GrantaServerApiSearchSearchRequest.

        Returns
        -------
        GrantaServerApiSearchPagingOptions
            The paging_options of this GrantaServerApiSearchSearchRequest.
        """
        return self._paging_options

    @paging_options.setter
    def paging_options(
        self, paging_options: "Optional[GrantaServerApiSearchPagingOptions]"
    ) -> None:
        """Sets the paging_options of this GrantaServerApiSearchSearchRequest.

        Parameters
        ----------
        paging_options: GrantaServerApiSearchPagingOptions
            The paging_options of this GrantaServerApiSearchSearchRequest.
        """
        self._paging_options = paging_options

    @classmethod
    def get_real_child_model(cls, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()  # type: ignore[no-any-return]

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiSearchSearchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
