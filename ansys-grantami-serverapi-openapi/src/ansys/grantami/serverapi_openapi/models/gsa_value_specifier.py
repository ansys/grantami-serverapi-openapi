"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional, Union  # noqa: F401

from . import ModelBase, Unset, Unset_Type


if TYPE_CHECKING:
    from datetime import datetime
    import pathlib
    from . import *


class GsaValueSpecifier(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator_class_map: dict[str, str]
        They key is discriminator value and the value is associated subtype.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "filter_on": "GsaValueSpecifierType",
    }

    attribute_map: dict[str, str] = {
        "filter_on": "filterOn",
    }

    subtype_mapping: dict[str, str] = {
        "filterOn": "GsaValueSpecifierType",
    }

    discriminator_value_class_map = {
        "all".lower(): "#/components/schemas/GsaAllValuesSpecifier",
        "exclude".lower(): "#/components/schemas/GsaExcludeValuesSpecifier",
        "specific".lower(): "#/components/schemas/GsaSpecificValuesSpecifier",
        "none".lower(): "#/components/schemas/GsaNoValuesSpecifier",
    }

    discriminator: Optional[str] = "filterOn"

    def __init__(self, *, filter_on: "GsaValueSpecifierType",) -> None:
        """GsaValueSpecifier - a model defined in Swagger

        Parameters
        ----------
        filter_on: GsaValueSpecifierType
        """
        self._filter_on: GsaValueSpecifierType

        self.filter_on = filter_on

    @property
    def filter_on(self) -> "GsaValueSpecifierType":
        """Gets the filter_on of this GsaValueSpecifier.

        Returns
        -------
        GsaValueSpecifierType
            The filter_on of this GsaValueSpecifier.
        """
        return self._filter_on

    @filter_on.setter
    def filter_on(self, filter_on: "GsaValueSpecifierType") -> None:
        """Sets the filter_on of this GsaValueSpecifier.

        Parameters
        ----------
        filter_on: GsaValueSpecifierType
            The filter_on of this GsaValueSpecifier.
        """
        # Field is not nullable
        if filter_on is None:
            raise ValueError("Invalid value for 'filter_on', must not be 'None'")
        # Field is required
        if filter_on is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'filter_on', must not be 'Unset'")
        self._filter_on = filter_on

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Returns the real base class as determined by the discriminator

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class
        """
        discriminator_value = str(data[cls._get_discriminator_field_name()]).lower()
        # The actual class name is not available in swagger-codegen,
        # so we have to extract it from the JSON reference
        return cls.discriminator_value_class_map[discriminator_value].rsplit("/", 1)[-1]

    @classmethod
    def _get_discriminator_field_name(cls) -> str:
        assert cls.discriminator
        name_tokens = cls.discriminator.split("_")
        later_tokens = [element.capitalize() for element in name_tokens[1:]]
        return "".join([name_tokens[0], *later_tokens])

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaValueSpecifier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other

