# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from . import ModelBase

from ansys.grantami.serverapi_openapi.models.granta_server_api_schema_layouts_layout_item import GrantaServerApiSchemaLayoutsLayoutItem  # noqa: F401,E501

class GrantaServerApiSchemaLayoutsLayoutLinkItem(GrantaServerApiSchemaLayoutsLayoutItem):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_type': 'str',
        'link_type': 'GrantaServerApiSchemaLayoutsLayoutItemLinkType',
        'target_database': 'str',
        'target_table': 'str',
        'forwards': 'bool',
        'next_link': 'GrantaServerApiSchemaLayoutsLayoutLinkItem'
    }
    if hasattr(GrantaServerApiSchemaLayoutsLayoutItem, "swagger_types"):
        swagger_types.update(GrantaServerApiSchemaLayoutsLayoutItem.swagger_types)

    attribute_map = {
        'item_type': 'itemType',
        'link_type': 'linkType',
        'target_database': 'targetDatabase',
        'target_table': 'targetTable',
        'forwards': 'forwards',
        'next_link': 'nextLink'
    }
    if hasattr(GrantaServerApiSchemaLayoutsLayoutItem, "attribute_map"):
        attribute_map.update(GrantaServerApiSchemaLayoutsLayoutItem.attribute_map)

    subtype_mapping = {
        'linkType': 'GrantaServerApiSchemaLayoutsLayoutItemLinkType',
        'nextLink': 'GrantaServerApiSchemaLayoutsLayoutLinkItem'
    }


    def __init__(self, item_type='link', link_type=None, target_database=None, target_table=None, forwards=None, next_link=None, *args, **kwargs):  # noqa: E501
        """GrantaServerApiSchemaLayoutsLayoutLinkItem - a model defined in Swagger"""  # noqa: E501
        GrantaServerApiSchemaLayoutsLayoutItem.__init__(self, *args, **kwargs)
        self._item_type = None
        self._link_type = None
        self._target_database = None
        self._target_table = None
        self._forwards = None
        self._next_link = None
        self.discriminator = None
        self.item_type = item_type
        if link_type is not None:
            self.link_type = link_type
        if target_database is not None:
            self.target_database = target_database
        if target_table is not None:
            self.target_table = target_table
        if forwards is not None:
            self.forwards = forwards
        if next_link is not None:
            self.next_link = next_link

    @property
    def item_type(self):
        """Gets the item_type of this GrantaServerApiSchemaLayoutsLayoutLinkItem.  # noqa: E501

        :return: The item_type of this GrantaServerApiSchemaLayoutsLayoutLinkItem.  # noqa: E501
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this GrantaServerApiSchemaLayoutsLayoutLinkItem.

        :param item_type: The item_type of this GrantaServerApiSchemaLayoutsLayoutLinkItem.  # noqa: E501
        :type: str
        """
        if item_type is None:
            raise ValueError("Invalid value for `item_type`, must not be `None`")  # noqa: E501
        self._item_type = item_type

    @property
    def link_type(self):
        """Gets the link_type of this GrantaServerApiSchemaLayoutsLayoutLinkItem.  # noqa: E501

        :return: The link_type of this GrantaServerApiSchemaLayoutsLayoutLinkItem.  # noqa: E501
        :rtype: GrantaServerApiSchemaLayoutsLayoutItemLinkType
        """
        return self._link_type

    @link_type.setter
    def link_type(self, link_type):
        """Sets the link_type of this GrantaServerApiSchemaLayoutsLayoutLinkItem.

        :param link_type: The link_type of this GrantaServerApiSchemaLayoutsLayoutLinkItem.  # noqa: E501
        :type: GrantaServerApiSchemaLayoutsLayoutItemLinkType
        """
        self._link_type = link_type

    @property
    def target_database(self):
        """Gets the target_database of this GrantaServerApiSchemaLayoutsLayoutLinkItem.  # noqa: E501

        :return: The target_database of this GrantaServerApiSchemaLayoutsLayoutLinkItem.  # noqa: E501
        :rtype: str
        """
        return self._target_database

    @target_database.setter
    def target_database(self, target_database):
        """Sets the target_database of this GrantaServerApiSchemaLayoutsLayoutLinkItem.

        :param target_database: The target_database of this GrantaServerApiSchemaLayoutsLayoutLinkItem.  # noqa: E501
        :type: str
        """
        self._target_database = target_database

    @property
    def target_table(self):
        """Gets the target_table of this GrantaServerApiSchemaLayoutsLayoutLinkItem.  # noqa: E501

        :return: The target_table of this GrantaServerApiSchemaLayoutsLayoutLinkItem.  # noqa: E501
        :rtype: str
        """
        return self._target_table

    @target_table.setter
    def target_table(self, target_table):
        """Sets the target_table of this GrantaServerApiSchemaLayoutsLayoutLinkItem.

        :param target_table: The target_table of this GrantaServerApiSchemaLayoutsLayoutLinkItem.  # noqa: E501
        :type: str
        """
        self._target_table = target_table

    @property
    def forwards(self):
        """Gets the forwards of this GrantaServerApiSchemaLayoutsLayoutLinkItem.  # noqa: E501

        :return: The forwards of this GrantaServerApiSchemaLayoutsLayoutLinkItem.  # noqa: E501
        :rtype: bool
        """
        return self._forwards

    @forwards.setter
    def forwards(self, forwards):
        """Sets the forwards of this GrantaServerApiSchemaLayoutsLayoutLinkItem.

        :param forwards: The forwards of this GrantaServerApiSchemaLayoutsLayoutLinkItem.  # noqa: E501
        :type: bool
        """
        self._forwards = forwards

    @property
    def next_link(self):
        """Gets the next_link of this GrantaServerApiSchemaLayoutsLayoutLinkItem.  # noqa: E501

        :return: The next_link of this GrantaServerApiSchemaLayoutsLayoutLinkItem.  # noqa: E501
        :rtype: GrantaServerApiSchemaLayoutsLayoutLinkItem
        """
        return self._next_link

    @next_link.setter
    def next_link(self, next_link):
        """Sets the next_link of this GrantaServerApiSchemaLayoutsLayoutLinkItem.

        :param next_link: The next_link of this GrantaServerApiSchemaLayoutsLayoutLinkItem.  # noqa: E501
        :type: GrantaServerApiSchemaLayoutsLayoutLinkItem
        """
        self._next_link = next_link

    def get_real_child_model(self, data):
        """Raises a NotImplementedError for a type without a discriminator defined."""
        raise NotImplementedError()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiSchemaLayoutsLayoutLinkItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiSchemaLayoutsLayoutLinkItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
