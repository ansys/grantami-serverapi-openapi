"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import (
    TYPE_CHECKING,
    Any,
    Dict,
    List,
    BinaryIO,
    Optional,
    Union,
)  # noqa: F401

from . import ModelBase
from ansys.grantami.serverapi_openapi.models.granta_server_api_schema_layouts_layout_item import (
    GrantaServerApiSchemaLayoutsLayoutItem,
)  # noqa: F401


if TYPE_CHECKING:
    from datetime import datetime
    import pathlib
    from . import *


class GrantaServerApiSchemaLayoutsLayoutLinkItem(
    GrantaServerApiSchemaLayoutsLayoutItem
):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: Dict[str, str] = {
        "forwards": "bool",
        "guid": "str",
        "link_type": "GrantaServerApiSchemaLayoutsLayoutItemLinkType",
        "name": "str",
        "target_table": "str",
        "underlying_entity_guid": "str",
        "item_type": "str",
        "next_link": "GrantaServerApiSchemaLayoutsLayoutLinkItem",
        "target_database": "str",
        "target_database_version": "str",
    }

    attribute_map: Dict[str, str] = {
        "forwards": "forwards",
        "guid": "guid",
        "link_type": "linkType",
        "name": "name",
        "target_table": "targetTable",
        "underlying_entity_guid": "underlyingEntityGuid",
        "item_type": "itemType",
        "next_link": "nextLink",
        "target_database": "targetDatabase",
        "target_database_version": "targetDatabaseVersion",
    }

    subtype_mapping: Dict[str, str] = {
        "linkType": "GrantaServerApiSchemaLayoutsLayoutItemLinkType",
        "nextLink": "GrantaServerApiSchemaLayoutsLayoutLinkItem",
    }

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        forwards: "bool",
        guid: "str",
        link_type: "GrantaServerApiSchemaLayoutsLayoutItemLinkType",
        name: "str",
        target_table: "str",
        underlying_entity_guid: "str",
        item_type: "str" = "link",
        next_link: "Optional[GrantaServerApiSchemaLayoutsLayoutLinkItem]" = None,
        target_database: "Optional[str]" = None,
        target_database_version: "Optional[str]" = None,
    ) -> None:
        """GrantaServerApiSchemaLayoutsLayoutLinkItem - a model defined in Swagger

        Parameters
        ----------
            forwards: bool
            guid: str
            link_type: GrantaServerApiSchemaLayoutsLayoutItemLinkType
            name: str
            target_table: str
            underlying_entity_guid: str
            item_type: str
            next_link: GrantaServerApiSchemaLayoutsLayoutLinkItem, optional
            target_database: str, optional
            target_database_version: str, optional
        """
        super().__init__(
            guid=guid, name=name, underlying_entity_guid=underlying_entity_guid
        )
        self._item_type: str = None  # type: ignore[assignment]
        self._link_type: GrantaServerApiSchemaLayoutsLayoutItemLinkType = None  # type: ignore[assignment]
        self._target_database = None
        self._target_database_version = None
        self._target_table: str = None  # type: ignore[assignment]
        self._forwards: bool = None  # type: ignore[assignment]
        self._next_link = None

        self.item_type = item_type
        self.link_type = link_type
        if target_database is not None:
            self.target_database = target_database
        if target_database_version is not None:
            self.target_database_version = target_database_version
        self.target_table = target_table
        self.forwards = forwards
        if next_link is not None:
            self.next_link = next_link

    @property
    def item_type(self) -> "str":
        """Gets the item_type of this GrantaServerApiSchemaLayoutsLayoutLinkItem.

        Returns
        -------
        str
            The item_type of this GrantaServerApiSchemaLayoutsLayoutLinkItem.
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type: "str") -> None:
        """Sets the item_type of this GrantaServerApiSchemaLayoutsLayoutLinkItem.

        Parameters
        ----------
        item_type: str
            The item_type of this GrantaServerApiSchemaLayoutsLayoutLinkItem.
        """
        if item_type is None:
            raise ValueError("Invalid value for 'item_type', must not be 'None'")
        self._item_type = item_type

    @property
    def link_type(self) -> "GrantaServerApiSchemaLayoutsLayoutItemLinkType":
        """Gets the link_type of this GrantaServerApiSchemaLayoutsLayoutLinkItem.

        Returns
        -------
        GrantaServerApiSchemaLayoutsLayoutItemLinkType
            The link_type of this GrantaServerApiSchemaLayoutsLayoutLinkItem.
        """
        return self._link_type

    @link_type.setter
    def link_type(
        self, link_type: "GrantaServerApiSchemaLayoutsLayoutItemLinkType"
    ) -> None:
        """Sets the link_type of this GrantaServerApiSchemaLayoutsLayoutLinkItem.

        Parameters
        ----------
        link_type: GrantaServerApiSchemaLayoutsLayoutItemLinkType
            The link_type of this GrantaServerApiSchemaLayoutsLayoutLinkItem.
        """
        if link_type is None:
            raise ValueError("Invalid value for 'link_type', must not be 'None'")
        self._link_type = link_type

    @property
    def target_database(self) -> "Optional[str]":
        """Gets the target_database of this GrantaServerApiSchemaLayoutsLayoutLinkItem.

        Returns
        -------
        str
            The target_database of this GrantaServerApiSchemaLayoutsLayoutLinkItem.
        """
        return self._target_database

    @target_database.setter
    def target_database(self, target_database: "Optional[str]") -> None:
        """Sets the target_database of this GrantaServerApiSchemaLayoutsLayoutLinkItem.

        Parameters
        ----------
        target_database: str
            The target_database of this GrantaServerApiSchemaLayoutsLayoutLinkItem.
        """
        self._target_database = target_database

    @property
    def target_database_version(self) -> "Optional[str]":
        """Gets the target_database_version of this GrantaServerApiSchemaLayoutsLayoutLinkItem.

        Returns
        -------
        str
            The target_database_version of this GrantaServerApiSchemaLayoutsLayoutLinkItem.
        """
        return self._target_database_version

    @target_database_version.setter
    def target_database_version(self, target_database_version: "Optional[str]") -> None:
        """Sets the target_database_version of this GrantaServerApiSchemaLayoutsLayoutLinkItem.

        Parameters
        ----------
        target_database_version: str
            The target_database_version of this GrantaServerApiSchemaLayoutsLayoutLinkItem.
        """
        self._target_database_version = target_database_version

    @property
    def target_table(self) -> "str":
        """Gets the target_table of this GrantaServerApiSchemaLayoutsLayoutLinkItem.

        Returns
        -------
        str
            The target_table of this GrantaServerApiSchemaLayoutsLayoutLinkItem.
        """
        return self._target_table

    @target_table.setter
    def target_table(self, target_table: "str") -> None:
        """Sets the target_table of this GrantaServerApiSchemaLayoutsLayoutLinkItem.

        Parameters
        ----------
        target_table: str
            The target_table of this GrantaServerApiSchemaLayoutsLayoutLinkItem.
        """
        if target_table is None:
            raise ValueError("Invalid value for 'target_table', must not be 'None'")
        self._target_table = target_table

    @property
    def forwards(self) -> "bool":
        """Gets the forwards of this GrantaServerApiSchemaLayoutsLayoutLinkItem.

        Returns
        -------
        bool
            The forwards of this GrantaServerApiSchemaLayoutsLayoutLinkItem.
        """
        return self._forwards

    @forwards.setter
    def forwards(self, forwards: "bool") -> None:
        """Sets the forwards of this GrantaServerApiSchemaLayoutsLayoutLinkItem.

        Parameters
        ----------
        forwards: bool
            The forwards of this GrantaServerApiSchemaLayoutsLayoutLinkItem.
        """
        if forwards is None:
            raise ValueError("Invalid value for 'forwards', must not be 'None'")
        self._forwards = forwards

    @property
    def next_link(self) -> "Optional[GrantaServerApiSchemaLayoutsLayoutLinkItem]":
        """Gets the next_link of this GrantaServerApiSchemaLayoutsLayoutLinkItem.

        Returns
        -------
        GrantaServerApiSchemaLayoutsLayoutLinkItem
            The next_link of this GrantaServerApiSchemaLayoutsLayoutLinkItem.
        """
        return self._next_link

    @next_link.setter
    def next_link(
        self, next_link: "Optional[GrantaServerApiSchemaLayoutsLayoutLinkItem]"
    ) -> None:
        """Sets the next_link of this GrantaServerApiSchemaLayoutsLayoutLinkItem.

        Parameters
        ----------
        next_link: GrantaServerApiSchemaLayoutsLayoutLinkItem
            The next_link of this GrantaServerApiSchemaLayoutsLayoutLinkItem.
        """
        self._next_link = next_link

    @classmethod
    def get_real_child_model(cls, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()  # type: ignore[no-any-return]

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiSchemaLayoutsLayoutLinkItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
