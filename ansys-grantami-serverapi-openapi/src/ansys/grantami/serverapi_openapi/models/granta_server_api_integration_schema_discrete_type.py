"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING, Any, Dict, List, Optional  # noqa: F401

from . import ModelBase


if TYPE_CHECKING:
    from . import *

class GrantaServerApiIntegrationSchemaDiscreteType(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.

    """
    swagger_types = {
        "identity": "int",
        "name": "str",
        "values": "list[str]",
    }

    attribute_map = {
        "identity": "identity",
        "name": "name",
        "values": "values",
    }

    subtype_mapping = {
    }

    def __init__(self, *, identity: "Optional[int]" = None, name: "Optional[str]" = None, values: "Optional[List[str]]" = None,) -> None:
        """GrantaServerApiIntegrationSchemaDiscreteType - a model defined in Swagger

        Parameters
        ----------
            identity: int, optional
            name: str, optional
            values: List[str], optional
        """
        self._identity = None
        self._name = None
        self._values = None
        self.discriminator = None
        if identity is not None:
            self.identity = identity
        if name is not None:
            self.name = name
        if values is not None:
            self.values = values

    @property
    def identity(self) -> "int":
        """Gets the identity of this GrantaServerApiIntegrationSchemaDiscreteType.

        Returns
        -------
        int
            The identity of this GrantaServerApiIntegrationSchemaDiscreteType.
        """
        return self._identity

    @identity.setter
    def identity(self, identity: "int") -> None:
        """Sets the identity of this GrantaServerApiIntegrationSchemaDiscreteType.

        Parameters
        ----------
        identity: int
            The identity of this GrantaServerApiIntegrationSchemaDiscreteType.
        """
        self._identity = identity

    @property
    def name(self) -> "str":
        """Gets the name of this GrantaServerApiIntegrationSchemaDiscreteType.

        Returns
        -------
        str
            The name of this GrantaServerApiIntegrationSchemaDiscreteType.
        """
        return self._name

    @name.setter
    def name(self, name: "str") -> None:
        """Sets the name of this GrantaServerApiIntegrationSchemaDiscreteType.

        Parameters
        ----------
        name: str
            The name of this GrantaServerApiIntegrationSchemaDiscreteType.
        """
        self._name = name

    @property
    def values(self) -> "list[str]":
        """Gets the values of this GrantaServerApiIntegrationSchemaDiscreteType.

        Returns
        -------
        list[str]
            The values of this GrantaServerApiIntegrationSchemaDiscreteType.
        """
        return self._values

    @values.setter
    def values(self, values: "list[str]") -> None:
        """Sets the values of this GrantaServerApiIntegrationSchemaDiscreteType.

        Parameters
        ----------
        values: list[str]
            The values of this GrantaServerApiIntegrationSchemaDiscreteType.
        """
        self._values = values

    def get_real_child_model(self, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def to_dict(self) -> Dict:
        """Returns the model properties as a dict

        Returns
        -------
        Dict
            Dictionary indexed by property name containing all the model properties
        """
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiIntegrationSchemaDiscreteType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model

        Returns
        -------
        str
            String representation of the model as a dictionary
        """
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiIntegrationSchemaDiscreteType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
