"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import (
    TYPE_CHECKING,
    Any,
    Dict,
    List,
    BinaryIO,
    Optional,
    Union,
)  # noqa: F401

from . import ModelBase


if TYPE_CHECKING:
    from datetime import datetime
    import pathlib
    from . import *


class GrantaServerApiListsDtoUpdateRecordListProperties(ModelBase):  # type: ignore[misc]
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: Dict[str, str] = {
        "awaiting_approval": "bool",
        "description": "str",
        "internal_use": "bool",
        "name": "str",
        "notes": "str",
        "published": "bool",
    }

    attribute_map: Dict[str, str] = {
        "awaiting_approval": "awaitingApproval",
        "description": "description",
        "internal_use": "internalUse",
        "name": "name",
        "notes": "notes",
        "published": "published",
    }

    subtype_mapping: Dict[str, str] = {}

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        awaiting_approval: "Optional[bool]" = None,
        description: "Optional[str]" = None,
        internal_use: "Optional[bool]" = None,
        name: "Optional[str]" = None,
        notes: "Optional[str]" = None,
        published: "Optional[bool]" = None,
    ) -> None:
        """GrantaServerApiListsDtoUpdateRecordListProperties - a model defined in Swagger

        Parameters
        ----------
            awaiting_approval: bool, optional
            description: str, optional
            internal_use: bool, optional
            name: str, optional
            notes: str, optional
            published: bool, optional
        """
        self._name = None
        self._description = None
        self._notes = None
        self._published = None
        self._awaiting_approval = None
        self._internal_use = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if notes is not None:
            self.notes = notes
        if published is not None:
            self.published = published
        if awaiting_approval is not None:
            self.awaiting_approval = awaiting_approval
        if internal_use is not None:
            self.internal_use = internal_use

    @property
    def name(self) -> "Optional[str]":
        """Gets the name of this GrantaServerApiListsDtoUpdateRecordListProperties.

        Returns
        -------
        str
            The name of this GrantaServerApiListsDtoUpdateRecordListProperties.
        """
        return self._name

    @name.setter
    def name(self, name: "Optional[str]") -> None:
        """Sets the name of this GrantaServerApiListsDtoUpdateRecordListProperties.

        Parameters
        ----------
        name: str
            The name of this GrantaServerApiListsDtoUpdateRecordListProperties.
        """
        self._name = name

    @property
    def description(self) -> "Optional[str]":
        """Gets the description of this GrantaServerApiListsDtoUpdateRecordListProperties.

        Returns
        -------
        str
            The description of this GrantaServerApiListsDtoUpdateRecordListProperties.
        """
        return self._description

    @description.setter
    def description(self, description: "Optional[str]") -> None:
        """Sets the description of this GrantaServerApiListsDtoUpdateRecordListProperties.

        Parameters
        ----------
        description: str
            The description of this GrantaServerApiListsDtoUpdateRecordListProperties.
        """
        self._description = description

    @property
    def notes(self) -> "Optional[str]":
        """Gets the notes of this GrantaServerApiListsDtoUpdateRecordListProperties.

        Returns
        -------
        str
            The notes of this GrantaServerApiListsDtoUpdateRecordListProperties.
        """
        return self._notes

    @notes.setter
    def notes(self, notes: "Optional[str]") -> None:
        """Sets the notes of this GrantaServerApiListsDtoUpdateRecordListProperties.

        Parameters
        ----------
        notes: str
            The notes of this GrantaServerApiListsDtoUpdateRecordListProperties.
        """
        self._notes = notes

    @property
    def published(self) -> "Optional[bool]":
        """Gets the published of this GrantaServerApiListsDtoUpdateRecordListProperties.

        Returns
        -------
        bool
            The published of this GrantaServerApiListsDtoUpdateRecordListProperties.
        """
        return self._published

    @published.setter
    def published(self, published: "Optional[bool]") -> None:
        """Sets the published of this GrantaServerApiListsDtoUpdateRecordListProperties.

        Parameters
        ----------
        published: bool
            The published of this GrantaServerApiListsDtoUpdateRecordListProperties.
        """
        self._published = published

    @property
    def awaiting_approval(self) -> "Optional[bool]":
        """Gets the awaiting_approval of this GrantaServerApiListsDtoUpdateRecordListProperties.

        Returns
        -------
        bool
            The awaiting_approval of this GrantaServerApiListsDtoUpdateRecordListProperties.
        """
        return self._awaiting_approval

    @awaiting_approval.setter
    def awaiting_approval(self, awaiting_approval: "Optional[bool]") -> None:
        """Sets the awaiting_approval of this GrantaServerApiListsDtoUpdateRecordListProperties.

        Parameters
        ----------
        awaiting_approval: bool
            The awaiting_approval of this GrantaServerApiListsDtoUpdateRecordListProperties.
        """
        self._awaiting_approval = awaiting_approval

    @property
    def internal_use(self) -> "Optional[bool]":
        """Gets the internal_use of this GrantaServerApiListsDtoUpdateRecordListProperties.

        Returns
        -------
        bool
            The internal_use of this GrantaServerApiListsDtoUpdateRecordListProperties.
        """
        return self._internal_use

    @internal_use.setter
    def internal_use(self, internal_use: "Optional[bool]") -> None:
        """Sets the internal_use of this GrantaServerApiListsDtoUpdateRecordListProperties.

        Parameters
        ----------
        internal_use: bool
            The internal_use of this GrantaServerApiListsDtoUpdateRecordListProperties.
        """
        self._internal_use = internal_use

    @classmethod
    def get_real_child_model(cls, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()  # type: ignore[no-any-return]

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiListsDtoUpdateRecordListProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
