"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import (
    TYPE_CHECKING,
    Any,
    Dict,
    List,
    BinaryIO,
    Optional,
    Union,
)  # noqa: F401

from . import ModelBase
from ansys.grantami.serverapi_openapi.models.granta_server_api_data_export_datums_float_functional_datum import (
    GrantaServerApiDataExportDatumsFloatFunctionalDatum,
)  # noqa: F401


if TYPE_CHECKING:
    from datetime import datetime
    import pathlib
    from . import *


class GrantaServerApiDataExportDatumsFunctionalGridDatum(
    GrantaServerApiDataExportDatumsFloatFunctionalDatum
):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: Dict[str, str] = {
        "attribute_guid": "str",
        "attribute_identity": "int",
        "datum_type": "str",
        "graph_type": "str",
        "is_estimated": "bool",
        "meta_datums": "list[GrantaServerApiDataExportDatumsDatum]",
        "not_applicable": "str",
        "parameters": "list[GrantaServerApiFunctionalDatumParameterInfo]",
        "points": "list[GrantaServerApiDataExportDatumsGridPoint]",
        "unit_symbol": "str",
        "x_axis_parameter": "GrantaServerApiFunctionalDatumParameterInfo",
    }

    attribute_map: Dict[str, str] = {
        "attribute_guid": "attributeGuid",
        "attribute_identity": "attributeIdentity",
        "datum_type": "datumType",
        "graph_type": "graphType",
        "is_estimated": "isEstimated",
        "meta_datums": "metaDatums",
        "not_applicable": "notApplicable",
        "parameters": "parameters",
        "points": "points",
        "unit_symbol": "unitSymbol",
        "x_axis_parameter": "xAxisParameter",
    }

    subtype_mapping: Dict[str, str] = {
        "points": "GrantaServerApiDataExportDatumsGridPoint",
    }

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        attribute_guid: "Optional[str]" = None,
        attribute_identity: "Optional[int]" = None,
        datum_type: "str" = "floatFunctional",
        graph_type: "str" = "grid",
        is_estimated: "Optional[bool]" = None,
        meta_datums: "Optional[List[GrantaServerApiDataExportDatumsDatum]]" = None,
        not_applicable: "str" = "applicable",
        parameters: "Optional[List[GrantaServerApiFunctionalDatumParameterInfo]]" = None,
        points: "Optional[List[GrantaServerApiDataExportDatumsGridPoint]]" = None,
        unit_symbol: "Optional[str]" = None,
        x_axis_parameter: "Optional[GrantaServerApiFunctionalDatumParameterInfo]" = None,
    ) -> None:
        """GrantaServerApiDataExportDatumsFunctionalGridDatum - a model defined in Swagger

        Parameters
        ----------
            attribute_guid: str, optional
            attribute_identity: int, optional
            datum_type: str
            graph_type: str
            is_estimated: bool, optional
            meta_datums: List[GrantaServerApiDataExportDatumsDatum], optional
            not_applicable: str
            parameters: List[GrantaServerApiFunctionalDatumParameterInfo], optional
            points: List[GrantaServerApiDataExportDatumsGridPoint], optional
            unit_symbol: str, optional
            x_axis_parameter: GrantaServerApiFunctionalDatumParameterInfo, optional
        """
        super().__init__(
            attribute_guid=attribute_guid,
            attribute_identity=attribute_identity,
            datum_type=datum_type,
            is_estimated=is_estimated,
            meta_datums=meta_datums,
            not_applicable=not_applicable,
            parameters=parameters,
            unit_symbol=unit_symbol,
            x_axis_parameter=x_axis_parameter,
        )
        self._graph_type: str = None  # type: ignore[assignment]
        self._points = None

        self.graph_type = graph_type
        if points is not None:
            self.points = points

    @property
    def graph_type(self) -> "str":
        """Gets the graph_type of this GrantaServerApiDataExportDatumsFunctionalGridDatum.

        Returns
        -------
        str
            The graph_type of this GrantaServerApiDataExportDatumsFunctionalGridDatum.
        """
        return self._graph_type

    @graph_type.setter
    def graph_type(self, graph_type: "str") -> None:
        """Sets the graph_type of this GrantaServerApiDataExportDatumsFunctionalGridDatum.

        Parameters
        ----------
        graph_type: str
            The graph_type of this GrantaServerApiDataExportDatumsFunctionalGridDatum.
        """
        if graph_type is None:
            raise ValueError("Invalid value for 'graph_type', must not be 'None'")
        self._graph_type = graph_type

    @property
    def points(self) -> "Optional[List[GrantaServerApiDataExportDatumsGridPoint]]":
        """Gets the points of this GrantaServerApiDataExportDatumsFunctionalGridDatum.

        Returns
        -------
        list[GrantaServerApiDataExportDatumsGridPoint]
            The points of this GrantaServerApiDataExportDatumsFunctionalGridDatum.
        """
        return self._points

    @points.setter
    def points(
        self, points: "Optional[List[GrantaServerApiDataExportDatumsGridPoint]]"
    ) -> None:
        """Sets the points of this GrantaServerApiDataExportDatumsFunctionalGridDatum.

        Parameters
        ----------
        points: List[GrantaServerApiDataExportDatumsGridPoint]
            The points of this GrantaServerApiDataExportDatumsFunctionalGridDatum.
        """
        self._points = points

    @classmethod
    def get_real_child_model(cls, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()  # type: ignore[no-any-return]

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiDataExportDatumsFunctionalGridDatum):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
