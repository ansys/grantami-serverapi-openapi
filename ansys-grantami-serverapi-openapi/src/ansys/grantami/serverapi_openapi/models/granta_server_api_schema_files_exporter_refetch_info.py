"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import (
    TYPE_CHECKING,
    Any,
    BinaryIO,
    Dict,
    List,
    Optional,
    Union,
)  # noqa: F401

from . import ModelBase, Unset, Unset_Type


if TYPE_CHECKING:
    from datetime import datetime
    import pathlib
    from . import *


class GrantaServerApiSchemaFilesExporterRefetchInfo(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: Dict[str, str] = {
        "errors": "list[str]",
        "succeeded": "bool",
    }

    attribute_map: Dict[str, str] = {
        "errors": "errors",
        "succeeded": "succeeded",
    }

    subtype_mapping: Dict[str, str] = {}

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        errors: "Union[List[str], None, Unset_Type]" = Unset,
        succeeded: "Union[bool, Unset_Type]" = Unset,
    ) -> None:
        """GrantaServerApiSchemaFilesExporterRefetchInfo - a model defined in Swagger

        Parameters
        ----------
        errors: List[str], optional
        succeeded: bool, optional
        """
        self._succeeded: Union[bool, Unset_Type] = Unset
        self._errors: Union[List[str], None, Unset_Type] = Unset

        if succeeded is not Unset:
            self.succeeded = succeeded
        if errors is not Unset:
            self.errors = errors

    @property
    def succeeded(self) -> "Union[bool, Unset_Type]":
        """Gets the succeeded of this GrantaServerApiSchemaFilesExporterRefetchInfo.

        Returns
        -------
        Union[bool, Unset_Type]
            The succeeded of this GrantaServerApiSchemaFilesExporterRefetchInfo.
        """
        return self._succeeded

    @succeeded.setter
    def succeeded(self, succeeded: "Union[bool, Unset_Type]") -> None:
        """Sets the succeeded of this GrantaServerApiSchemaFilesExporterRefetchInfo.

        Parameters
        ----------
        succeeded: Union[bool, Unset_Type]
            The succeeded of this GrantaServerApiSchemaFilesExporterRefetchInfo.
        """
        # Field is not nullable
        if succeeded is None:
            raise ValueError("Invalid value for 'succeeded', must not be 'None'")
        self._succeeded = succeeded

    @property
    def errors(self) -> "Union[List[str], None, Unset_Type]":
        """Gets the errors of this GrantaServerApiSchemaFilesExporterRefetchInfo.

        Returns
        -------
        Union[List[str], None, Unset_Type]
            The errors of this GrantaServerApiSchemaFilesExporterRefetchInfo.
        """
        return self._errors

    @errors.setter
    def errors(self, errors: "Union[List[str], None, Unset_Type]") -> None:
        """Sets the errors of this GrantaServerApiSchemaFilesExporterRefetchInfo.

        Parameters
        ----------
        errors: Union[List[str], None, Unset_Type]
            The errors of this GrantaServerApiSchemaFilesExporterRefetchInfo.
        """
        self._errors = errors

    @classmethod
    def get_real_child_model(cls, data: Dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiSchemaFilesExporterRefetchInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
