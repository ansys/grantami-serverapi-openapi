"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, Dict, List, Optional  # noqa: F401

from . import ModelBase


if TYPE_CHECKING:
    from . import *


class GrantaServerApiDataExportRecordWithData(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types = {
        "data": "list[GrantaServerApiDataExportDatumsDatum]",
        "database_key": "str",
        "properties": "list[GrantaServerApiDataExportPropertiesProperty]",
        "record_history_identity": "int",
    }

    attribute_map = {
        "data": "data",
        "database_key": "databaseKey",
        "properties": "properties",
        "record_history_identity": "recordHistoryIdentity",
    }

    subtype_mapping = {
        "data": "GrantaServerApiDataExportDatumsDatum",
        "properties": "GrantaServerApiDataExportPropertiesProperty",
    }

    discriminator = None

    def __init__(
        self,
        *,
        data: "Optional[List[GrantaServerApiDataExportDatumsDatum]]" = None,
        database_key: "Optional[str]" = None,
        properties: "Optional[List[GrantaServerApiDataExportPropertiesProperty]]" = None,
        record_history_identity: "Optional[int]" = None,
    ) -> None:
        """GrantaServerApiDataExportRecordWithData - a model defined in Swagger

        Parameters
        ----------
            data: List[GrantaServerApiDataExportDatumsDatum], optional
            database_key: str, optional
            properties: List[GrantaServerApiDataExportPropertiesProperty], optional
            record_history_identity: int, optional
        """
        self._database_key = None
        self._record_history_identity = None
        self._data = None
        self._properties = None

        if database_key is not None:
            self.database_key = database_key
        if record_history_identity is not None:
            self.record_history_identity = record_history_identity
        if data is not None:
            self.data = data
        if properties is not None:
            self.properties = properties

    @property
    def database_key(self) -> "str":
        """Gets the database_key of this GrantaServerApiDataExportRecordWithData.

        Returns
        -------
        str
            The database_key of this GrantaServerApiDataExportRecordWithData.
        """
        return self._database_key

    @database_key.setter
    def database_key(self, database_key: "str") -> None:
        """Sets the database_key of this GrantaServerApiDataExportRecordWithData.

        Parameters
        ----------
        database_key: str
            The database_key of this GrantaServerApiDataExportRecordWithData.
        """
        self._database_key = database_key

    @property
    def record_history_identity(self) -> "int":
        """Gets the record_history_identity of this GrantaServerApiDataExportRecordWithData.

        Returns
        -------
        int
            The record_history_identity of this GrantaServerApiDataExportRecordWithData.
        """
        return self._record_history_identity

    @record_history_identity.setter
    def record_history_identity(self, record_history_identity: "int") -> None:
        """Sets the record_history_identity of this GrantaServerApiDataExportRecordWithData.

        Parameters
        ----------
        record_history_identity: int
            The record_history_identity of this GrantaServerApiDataExportRecordWithData.
        """
        self._record_history_identity = record_history_identity

    @property
    def data(self) -> "list[GrantaServerApiDataExportDatumsDatum]":
        """Gets the data of this GrantaServerApiDataExportRecordWithData.

        Returns
        -------
        list[GrantaServerApiDataExportDatumsDatum]
            The data of this GrantaServerApiDataExportRecordWithData.
        """
        return self._data

    @data.setter
    def data(self, data: "list[GrantaServerApiDataExportDatumsDatum]") -> None:
        """Sets the data of this GrantaServerApiDataExportRecordWithData.

        Parameters
        ----------
        data: list[GrantaServerApiDataExportDatumsDatum]
            The data of this GrantaServerApiDataExportRecordWithData.
        """
        self._data = data

    @property
    def properties(self) -> "list[GrantaServerApiDataExportPropertiesProperty]":
        """Gets the properties of this GrantaServerApiDataExportRecordWithData.

        Returns
        -------
        list[GrantaServerApiDataExportPropertiesProperty]
            The properties of this GrantaServerApiDataExportRecordWithData.
        """
        return self._properties

    @properties.setter
    def properties(
        self, properties: "list[GrantaServerApiDataExportPropertiesProperty]"
    ) -> None:
        """Sets the properties of this GrantaServerApiDataExportRecordWithData.

        Parameters
        ----------
        properties: list[GrantaServerApiDataExportPropertiesProperty]
            The properties of this GrantaServerApiDataExportRecordWithData.
        """
        self._properties = properties

    @classmethod
    def get_real_child_model(cls, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiDataExportRecordWithData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
