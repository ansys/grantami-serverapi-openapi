# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
MI Server API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional, Union  # noqa: F401

from . import ModelBase, Unset, Unset_Type

if TYPE_CHECKING:
    from datetime import datetime
    import pathlib

    from . import *


class GsaSmtpProperties(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "authentication_password": "str",
        "authentication_username": "str",
        "host_name": "str",
        "port": "int",
        "use_authentication": "bool",
        "use_ssl": "bool",
    }

    attribute_map: dict[str, str] = {
        "authentication_password": "authenticationPassword",
        "authentication_username": "authenticationUsername",
        "host_name": "hostName",
        "port": "port",
        "use_authentication": "useAuthentication",
        "use_ssl": "useSsl",
    }

    subtype_mapping: dict[str, str] = {}

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        authentication_password: "Union[str, None, Unset_Type]" = Unset,
        authentication_username: "Union[str, None, Unset_Type]" = Unset,
        host_name: "Union[str, None, Unset_Type]" = Unset,
        port: "Union[int, Unset_Type]" = 25,
        use_authentication: "Union[bool, Unset_Type]" = Unset,
        use_ssl: "Union[bool, Unset_Type]" = Unset,
    ) -> None:
        """GsaSmtpProperties - a model defined in Swagger

        Parameters
        ----------
        authentication_password: str, optional
        authentication_username: str, optional
        host_name: str, optional
        port: int, optional
        use_authentication: bool, optional
        use_ssl: bool, optional
        """
        self._host_name: Union[str, None, Unset_Type] = Unset
        self._port: Union[int, Unset_Type] = Unset
        self._use_ssl: Union[bool, Unset_Type] = Unset
        self._use_authentication: Union[bool, Unset_Type] = Unset
        self._authentication_username: Union[str, None, Unset_Type] = Unset
        self._authentication_password: Union[str, None, Unset_Type] = Unset

        if host_name is not Unset:
            self.host_name = host_name
        if port is not Unset:
            self.port = port
        if use_ssl is not Unset:
            self.use_ssl = use_ssl
        if use_authentication is not Unset:
            self.use_authentication = use_authentication
        if authentication_username is not Unset:
            self.authentication_username = authentication_username
        if authentication_password is not Unset:
            self.authentication_password = authentication_password

    @property
    def host_name(self) -> "Union[str, None, Unset_Type]":
        """Gets the host_name of this GsaSmtpProperties.
        Gets or sets the name of the host used for SMTP transactions

        Returns
        -------
        Union[str, None, Unset_Type]
            The host_name of this GsaSmtpProperties.
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name: "Union[str, None, Unset_Type]") -> None:
        """Sets the host_name of this GsaSmtpProperties.
        Gets or sets the name of the host used for SMTP transactions

        Parameters
        ----------
        host_name: Union[str, None, Unset_Type]
            The host_name of this GsaSmtpProperties.
        """
        self._host_name = host_name

    @property
    def port(self) -> "Union[int, Unset_Type]":
        """Gets the port of this GsaSmtpProperties.
        Gets or sets the port used for SMTP transactions.  If no value set then it will default to 25

        Returns
        -------
        Union[int, Unset_Type]
            The port of this GsaSmtpProperties.
        """
        return self._port

    @port.setter
    def port(self, port: "Union[int, Unset_Type]") -> None:
        """Sets the port of this GsaSmtpProperties.
        Gets or sets the port used for SMTP transactions.  If no value set then it will default to 25

        Parameters
        ----------
        port: Union[int, Unset_Type]
            The port of this GsaSmtpProperties.
        """
        # Field is not nullable
        if port is None:
            raise ValueError("Invalid value for 'port', must not be 'None'")
        self._port = port

    @property
    def use_ssl(self) -> "Union[bool, Unset_Type]":
        """Gets the use_ssl of this GsaSmtpProperties.
        Indicates whether the SMTP server uses SSL.  Defaults to False

        Returns
        -------
        Union[bool, Unset_Type]
            The use_ssl of this GsaSmtpProperties.
        """
        return self._use_ssl

    @use_ssl.setter
    def use_ssl(self, use_ssl: "Union[bool, Unset_Type]") -> None:
        """Sets the use_ssl of this GsaSmtpProperties.
        Indicates whether the SMTP server uses SSL.  Defaults to False

        Parameters
        ----------
        use_ssl: Union[bool, Unset_Type]
            The use_ssl of this GsaSmtpProperties.
        """
        # Field is not nullable
        if use_ssl is None:
            raise ValueError("Invalid value for 'use_ssl', must not be 'None'")
        self._use_ssl = use_ssl

    @property
    def use_authentication(self) -> "Union[bool, Unset_Type]":
        """Gets the use_authentication of this GsaSmtpProperties.
        Indicates whether authentication is required. If this is set to True  then Granta.Server.Api.ServerManager.SmtpProperties.AuthenticationUsername and Granta.Server.Api.ServerManager.SmtpProperties.AuthenticationPassword  are required.  Defaults to False

        Returns
        -------
        Union[bool, Unset_Type]
            The use_authentication of this GsaSmtpProperties.
        """
        return self._use_authentication

    @use_authentication.setter
    def use_authentication(self, use_authentication: "Union[bool, Unset_Type]") -> None:
        """Sets the use_authentication of this GsaSmtpProperties.
        Indicates whether authentication is required. If this is set to True  then Granta.Server.Api.ServerManager.SmtpProperties.AuthenticationUsername and Granta.Server.Api.ServerManager.SmtpProperties.AuthenticationPassword  are required.  Defaults to False

        Parameters
        ----------
        use_authentication: Union[bool, Unset_Type]
            The use_authentication of this GsaSmtpProperties.
        """
        # Field is not nullable
        if use_authentication is None:
            raise ValueError("Invalid value for 'use_authentication', must not be 'None'")
        self._use_authentication = use_authentication

    @property
    def authentication_username(self) -> "Union[str, None, Unset_Type]":
        """Gets the authentication_username of this GsaSmtpProperties.
        Gets or sets the username to use for authentication, should be set if Granta.Server.Api.ServerManager.SmtpProperties.UseAuthentication is True.

        Returns
        -------
        Union[str, None, Unset_Type]
            The authentication_username of this GsaSmtpProperties.
        """
        return self._authentication_username

    @authentication_username.setter
    def authentication_username(
        self, authentication_username: "Union[str, None, Unset_Type]"
    ) -> None:
        """Sets the authentication_username of this GsaSmtpProperties.
        Gets or sets the username to use for authentication, should be set if Granta.Server.Api.ServerManager.SmtpProperties.UseAuthentication is True.

        Parameters
        ----------
        authentication_username: Union[str, None, Unset_Type]
            The authentication_username of this GsaSmtpProperties.
        """
        self._authentication_username = authentication_username

    @property
    def authentication_password(self) -> "Union[str, None, Unset_Type]":
        """Gets the authentication_password of this GsaSmtpProperties.
        Gets or sets the password to use for authentication, should be set if Granta.Server.Api.ServerManager.SmtpProperties.UseAuthentication is True.

        Returns
        -------
        Union[str, None, Unset_Type]
            The authentication_password of this GsaSmtpProperties.
        """
        return self._authentication_password

    @authentication_password.setter
    def authentication_password(
        self, authentication_password: "Union[str, None, Unset_Type]"
    ) -> None:
        """Sets the authentication_password of this GsaSmtpProperties.
        Gets or sets the password to use for authentication, should be set if Granta.Server.Api.ServerManager.SmtpProperties.UseAuthentication is True.

        Parameters
        ----------
        authentication_password: Union[str, None, Unset_Type]
            The authentication_password of this GsaSmtpProperties.
        """
        self._authentication_password = authentication_password

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaSmtpProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
