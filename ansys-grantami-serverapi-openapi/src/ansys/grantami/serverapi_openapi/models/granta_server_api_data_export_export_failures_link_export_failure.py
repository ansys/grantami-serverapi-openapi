"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import (
    TYPE_CHECKING,
    Any,
    Dict,
    List,
    BinaryIO,
    Optional,
    Union,
)  # noqa: F401

from . import ModelBase
from ansys.grantami.serverapi_openapi.models.granta_server_api_data_export_export_failures_export_failure import (
    GrantaServerApiDataExportExportFailuresExportFailure,
)  # noqa: F401


if TYPE_CHECKING:
    from datetime import datetime
    import pathlib
    from . import *


class GrantaServerApiDataExportExportFailuresLinkExportFailure(
    GrantaServerApiDataExportExportFailuresExportFailure
):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: Dict[str, str] = {
        "failed_link": "GrantaServerApiDataExportExportFailuresLinkReference",
        "failure_details": "str",
        "failure_reason": "str",
        "type": "str",
    }

    attribute_map: Dict[str, str] = {
        "failed_link": "failedLink",
        "failure_details": "failureDetails",
        "failure_reason": "failureReason",
        "type": "type",
    }

    subtype_mapping: Dict[str, str] = {
        "failedLink": "GrantaServerApiDataExportExportFailuresLinkReference",
    }

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        failed_link: "GrantaServerApiDataExportExportFailuresLinkReference",
        failure_details: "str",
        failure_reason: "str",
        type: "str" = "link",
    ) -> None:
        """GrantaServerApiDataExportExportFailuresLinkExportFailure - a model defined in Swagger

        Parameters
        ----------
            failed_link: GrantaServerApiDataExportExportFailuresLinkReference
            failure_details: str
            failure_reason: str
            type: str
        """
        super().__init__(failure_details=failure_details, failure_reason=failure_reason)
        self._failed_link: GrantaServerApiDataExportExportFailuresLinkReference = None  # type: ignore[assignment]
        self._type: str = None  # type: ignore[assignment]

        self.failed_link = failed_link
        self.type = type

    @property
    def failed_link(self) -> "GrantaServerApiDataExportExportFailuresLinkReference":
        """Gets the failed_link of this GrantaServerApiDataExportExportFailuresLinkExportFailure.

        Returns
        -------
        GrantaServerApiDataExportExportFailuresLinkReference
            The failed_link of this GrantaServerApiDataExportExportFailuresLinkExportFailure.
        """
        return self._failed_link

    @failed_link.setter
    def failed_link(
        self, failed_link: "GrantaServerApiDataExportExportFailuresLinkReference"
    ) -> None:
        """Sets the failed_link of this GrantaServerApiDataExportExportFailuresLinkExportFailure.

        Parameters
        ----------
        failed_link: GrantaServerApiDataExportExportFailuresLinkReference
            The failed_link of this GrantaServerApiDataExportExportFailuresLinkExportFailure.
        """
        if failed_link is None:
            raise ValueError("Invalid value for 'failed_link', must not be 'None'")
        self._failed_link = failed_link

    @property
    def type(self) -> "str":
        """Gets the type of this GrantaServerApiDataExportExportFailuresLinkExportFailure.

        Returns
        -------
        str
            The type of this GrantaServerApiDataExportExportFailuresLinkExportFailure.
        """
        return self._type

    @type.setter
    def type(self, type: "str") -> None:
        """Sets the type of this GrantaServerApiDataExportExportFailuresLinkExportFailure.

        Parameters
        ----------
        type: str
            The type of this GrantaServerApiDataExportExportFailuresLinkExportFailure.
        """
        if type is None:
            raise ValueError("Invalid value for 'type', must not be 'None'")
        self._type = type

    @classmethod
    def get_real_child_model(cls, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()  # type: ignore[no-any-return]

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(
            other, GrantaServerApiDataExportExportFailuresLinkExportFailure
        ):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
