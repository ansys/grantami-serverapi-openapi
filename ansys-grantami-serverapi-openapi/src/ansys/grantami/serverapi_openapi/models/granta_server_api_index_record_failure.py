"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import (
    TYPE_CHECKING,
    Any,
    Dict,
    List,
    BinaryIO,
    Optional,
    Union,
)  # noqa: F401

from . import ModelBase


if TYPE_CHECKING:
    from datetime import datetime
    import pathlib
    from . import *


class GrantaServerApiIndexRecordFailure(ModelBase):  # type: ignore[misc]
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: Dict[str, str] = {
        "error": "str",
        "record_history_identity": "int",
        "record_name": "str",
        "record_was_oversized": "bool",
    }

    attribute_map: Dict[str, str] = {
        "error": "error",
        "record_history_identity": "recordHistoryIdentity",
        "record_name": "recordName",
        "record_was_oversized": "recordWasOversized",
    }

    subtype_mapping: Dict[str, str] = {}

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        error: "Optional[str]" = None,
        record_history_identity: "Optional[int]" = None,
        record_name: "Optional[str]" = None,
        record_was_oversized: "Optional[bool]" = None,
    ) -> None:
        """GrantaServerApiIndexRecordFailure - a model defined in Swagger

        Parameters
        ----------
            error: str, optional
            record_history_identity: int, optional
            record_name: str, optional
            record_was_oversized: bool, optional
        """
        self._record_history_identity = None
        self._record_name = None
        self._error = None
        self._record_was_oversized = None

        if record_history_identity is not None:
            self.record_history_identity = record_history_identity
        if record_name is not None:
            self.record_name = record_name
        if error is not None:
            self.error = error
        if record_was_oversized is not None:
            self.record_was_oversized = record_was_oversized

    @property
    def record_history_identity(self) -> "Optional[int]":
        """Gets the record_history_identity of this GrantaServerApiIndexRecordFailure.

        Returns
        -------
        int
            The record_history_identity of this GrantaServerApiIndexRecordFailure.
        """
        return self._record_history_identity

    @record_history_identity.setter
    def record_history_identity(self, record_history_identity: "Optional[int]") -> None:
        """Sets the record_history_identity of this GrantaServerApiIndexRecordFailure.

        Parameters
        ----------
        record_history_identity: int
            The record_history_identity of this GrantaServerApiIndexRecordFailure.
        """
        self._record_history_identity = record_history_identity

    @property
    def record_name(self) -> "Optional[str]":
        """Gets the record_name of this GrantaServerApiIndexRecordFailure.

        Returns
        -------
        str
            The record_name of this GrantaServerApiIndexRecordFailure.
        """
        return self._record_name

    @record_name.setter
    def record_name(self, record_name: "Optional[str]") -> None:
        """Sets the record_name of this GrantaServerApiIndexRecordFailure.

        Parameters
        ----------
        record_name: str
            The record_name of this GrantaServerApiIndexRecordFailure.
        """
        self._record_name = record_name

    @property
    def error(self) -> "Optional[str]":
        """Gets the error of this GrantaServerApiIndexRecordFailure.
        This is the error message from the indexing exception. It may have been returned directly from Elasticsearch.

        Returns
        -------
        str
            The error of this GrantaServerApiIndexRecordFailure.
        """
        return self._error

    @error.setter
    def error(self, error: "Optional[str]") -> None:
        """Sets the error of this GrantaServerApiIndexRecordFailure.
        This is the error message from the indexing exception. It may have been returned directly from Elasticsearch.

        Parameters
        ----------
        error: str
            The error of this GrantaServerApiIndexRecordFailure.
        """
        self._error = error

    @property
    def record_was_oversized(self) -> "Optional[bool]":
        """Gets the record_was_oversized of this GrantaServerApiIndexRecordFailure.
        Records that contain a large amount of data are intentionally not sent to the index. This size limit is configurable through  MIServer.exe.config

        Returns
        -------
        bool
            The record_was_oversized of this GrantaServerApiIndexRecordFailure.
        """
        return self._record_was_oversized

    @record_was_oversized.setter
    def record_was_oversized(self, record_was_oversized: "Optional[bool]") -> None:
        """Sets the record_was_oversized of this GrantaServerApiIndexRecordFailure.
        Records that contain a large amount of data are intentionally not sent to the index. This size limit is configurable through  MIServer.exe.config

        Parameters
        ----------
        record_was_oversized: bool
            The record_was_oversized of this GrantaServerApiIndexRecordFailure.
        """
        self._record_was_oversized = record_was_oversized

    @classmethod
    def get_real_child_model(cls, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()  # type: ignore[no-any-return]

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiIndexRecordFailure):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
