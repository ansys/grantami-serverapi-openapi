# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from . import ModelBase

from ansys.grantami.serverapi_openapi.models.granta_server_api_aggregations_attribute_value_aggregation import GrantaServerApiAggregationsAttributeValueAggregation  # noqa: F401,E501

class GrantaServerApiAggregationsFloatFunctionalAttributeAggregation(GrantaServerApiAggregationsAttributeValueAggregation):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'x_axis_parameter_identity_values': 'list[GrantaServerApiAggregationsValueWithCountOfSystemInt32]',
        'x_axis_parameter_guid_values': 'list[GrantaServerApiAggregationsValueWithCountOfSystemGuid]',
        'show_as_table_values': 'list[GrantaServerApiAggregationsValueWithCountOfSystemBoolean]',
        'minimum_number_of_series': 'int',
        'maximum_number_of_series': 'int',
        'datum_type': 'str'
    }
    if hasattr(GrantaServerApiAggregationsAttributeValueAggregation, "swagger_types"):
        swagger_types.update(GrantaServerApiAggregationsAttributeValueAggregation.swagger_types)

    attribute_map = {
        'x_axis_parameter_identity_values': 'xAxisParameterIdentityValues',
        'x_axis_parameter_guid_values': 'xAxisParameterGuidValues',
        'show_as_table_values': 'showAsTableValues',
        'minimum_number_of_series': 'minimumNumberOfSeries',
        'maximum_number_of_series': 'maximumNumberOfSeries',
        'datum_type': 'datumType'
    }
    if hasattr(GrantaServerApiAggregationsAttributeValueAggregation, "attribute_map"):
        attribute_map.update(GrantaServerApiAggregationsAttributeValueAggregation.attribute_map)

    subtype_mapping = {
        'xAxisParameterIdentityValues': 'GrantaServerApiAggregationsValueWithCountOfSystemInt32',
        'xAxisParameterGuidValues': 'GrantaServerApiAggregationsValueWithCountOfSystemGuid',
        'showAsTableValues': 'GrantaServerApiAggregationsValueWithCountOfSystemBoolean',
    }


    def __init__(self, x_axis_parameter_identity_values=None, x_axis_parameter_guid_values=None, show_as_table_values=None, minimum_number_of_series=None, maximum_number_of_series=None, datum_type='floatFunctionalGraph', *args, **kwargs):  # noqa: E501
        """GrantaServerApiAggregationsFloatFunctionalAttributeAggregation - a model defined in Swagger"""  # noqa: E501
        GrantaServerApiAggregationsAttributeValueAggregation.__init__(self, *args, **kwargs)
        self._x_axis_parameter_identity_values = None
        self._x_axis_parameter_guid_values = None
        self._show_as_table_values = None
        self._minimum_number_of_series = None
        self._maximum_number_of_series = None
        self._datum_type = None
        self.discriminator = None
        if x_axis_parameter_identity_values is not None:
            self.x_axis_parameter_identity_values = x_axis_parameter_identity_values
        if x_axis_parameter_guid_values is not None:
            self.x_axis_parameter_guid_values = x_axis_parameter_guid_values
        if show_as_table_values is not None:
            self.show_as_table_values = show_as_table_values
        if minimum_number_of_series is not None:
            self.minimum_number_of_series = minimum_number_of_series
        if maximum_number_of_series is not None:
            self.maximum_number_of_series = maximum_number_of_series
        self.datum_type = datum_type

    @property
    def x_axis_parameter_identity_values(self):
        """Gets the x_axis_parameter_identity_values of this GrantaServerApiAggregationsFloatFunctionalAttributeAggregation.  # noqa: E501

        :return: The x_axis_parameter_identity_values of this GrantaServerApiAggregationsFloatFunctionalAttributeAggregation.  # noqa: E501
        :rtype: list[GrantaServerApiAggregationsValueWithCountOfSystemInt32]
        """
        return self._x_axis_parameter_identity_values

    @x_axis_parameter_identity_values.setter
    def x_axis_parameter_identity_values(self, x_axis_parameter_identity_values):
        """Sets the x_axis_parameter_identity_values of this GrantaServerApiAggregationsFloatFunctionalAttributeAggregation.

        :param x_axis_parameter_identity_values: The x_axis_parameter_identity_values of this GrantaServerApiAggregationsFloatFunctionalAttributeAggregation.  # noqa: E501
        :type: list[GrantaServerApiAggregationsValueWithCountOfSystemInt32]
        """
        self._x_axis_parameter_identity_values = x_axis_parameter_identity_values

    @property
    def x_axis_parameter_guid_values(self):
        """Gets the x_axis_parameter_guid_values of this GrantaServerApiAggregationsFloatFunctionalAttributeAggregation.  # noqa: E501

        :return: The x_axis_parameter_guid_values of this GrantaServerApiAggregationsFloatFunctionalAttributeAggregation.  # noqa: E501
        :rtype: list[GrantaServerApiAggregationsValueWithCountOfSystemGuid]
        """
        return self._x_axis_parameter_guid_values

    @x_axis_parameter_guid_values.setter
    def x_axis_parameter_guid_values(self, x_axis_parameter_guid_values):
        """Sets the x_axis_parameter_guid_values of this GrantaServerApiAggregationsFloatFunctionalAttributeAggregation.

        :param x_axis_parameter_guid_values: The x_axis_parameter_guid_values of this GrantaServerApiAggregationsFloatFunctionalAttributeAggregation.  # noqa: E501
        :type: list[GrantaServerApiAggregationsValueWithCountOfSystemGuid]
        """
        self._x_axis_parameter_guid_values = x_axis_parameter_guid_values

    @property
    def show_as_table_values(self):
        """Gets the show_as_table_values of this GrantaServerApiAggregationsFloatFunctionalAttributeAggregation.  # noqa: E501

        :return: The show_as_table_values of this GrantaServerApiAggregationsFloatFunctionalAttributeAggregation.  # noqa: E501
        :rtype: list[GrantaServerApiAggregationsValueWithCountOfSystemBoolean]
        """
        return self._show_as_table_values

    @show_as_table_values.setter
    def show_as_table_values(self, show_as_table_values):
        """Sets the show_as_table_values of this GrantaServerApiAggregationsFloatFunctionalAttributeAggregation.

        :param show_as_table_values: The show_as_table_values of this GrantaServerApiAggregationsFloatFunctionalAttributeAggregation.  # noqa: E501
        :type: list[GrantaServerApiAggregationsValueWithCountOfSystemBoolean]
        """
        self._show_as_table_values = show_as_table_values

    @property
    def minimum_number_of_series(self):
        """Gets the minimum_number_of_series of this GrantaServerApiAggregationsFloatFunctionalAttributeAggregation.  # noqa: E501

        :return: The minimum_number_of_series of this GrantaServerApiAggregationsFloatFunctionalAttributeAggregation.  # noqa: E501
        :rtype: int
        """
        return self._minimum_number_of_series

    @minimum_number_of_series.setter
    def minimum_number_of_series(self, minimum_number_of_series):
        """Sets the minimum_number_of_series of this GrantaServerApiAggregationsFloatFunctionalAttributeAggregation.

        :param minimum_number_of_series: The minimum_number_of_series of this GrantaServerApiAggregationsFloatFunctionalAttributeAggregation.  # noqa: E501
        :type: int
        """
        self._minimum_number_of_series = minimum_number_of_series

    @property
    def maximum_number_of_series(self):
        """Gets the maximum_number_of_series of this GrantaServerApiAggregationsFloatFunctionalAttributeAggregation.  # noqa: E501

        :return: The maximum_number_of_series of this GrantaServerApiAggregationsFloatFunctionalAttributeAggregation.  # noqa: E501
        :rtype: int
        """
        return self._maximum_number_of_series

    @maximum_number_of_series.setter
    def maximum_number_of_series(self, maximum_number_of_series):
        """Sets the maximum_number_of_series of this GrantaServerApiAggregationsFloatFunctionalAttributeAggregation.

        :param maximum_number_of_series: The maximum_number_of_series of this GrantaServerApiAggregationsFloatFunctionalAttributeAggregation.  # noqa: E501
        :type: int
        """
        self._maximum_number_of_series = maximum_number_of_series

    @property
    def datum_type(self):
        """Gets the datum_type of this GrantaServerApiAggregationsFloatFunctionalAttributeAggregation.  # noqa: E501

        :return: The datum_type of this GrantaServerApiAggregationsFloatFunctionalAttributeAggregation.  # noqa: E501
        :rtype: str
        """
        return self._datum_type

    @datum_type.setter
    def datum_type(self, datum_type):
        """Sets the datum_type of this GrantaServerApiAggregationsFloatFunctionalAttributeAggregation.

        :param datum_type: The datum_type of this GrantaServerApiAggregationsFloatFunctionalAttributeAggregation.  # noqa: E501
        :type: str
        """
        if datum_type is None:
            raise ValueError("Invalid value for `datum_type`, must not be `None`")  # noqa: E501
        self._datum_type = datum_type

    def get_real_child_model(self, data):
        """Raises a NotImplementedError for a type without a discriminator defined."""
        raise NotImplementedError()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiAggregationsFloatFunctionalAttributeAggregation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiAggregationsFloatFunctionalAttributeAggregation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
