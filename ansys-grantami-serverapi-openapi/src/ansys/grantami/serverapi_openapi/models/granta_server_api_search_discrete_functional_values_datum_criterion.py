# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from . import ModelBase

from ansys.grantami.serverapi_openapi.models.granta_server_api_search_datum_criterion import GrantaServerApiSearchDatumCriterion  # noqa: F401,E501

class GrantaServerApiSearchDiscreteFunctionalValuesDatumCriterion(GrantaServerApiSearchDatumCriterion):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'any_identities': 'list[int]',
        'any_guids': 'list[str]',
        'type': 'str',
        'constraints': 'list[GrantaServerApiSearchParameterConstraint]'
    }
    if hasattr(GrantaServerApiSearchDatumCriterion, "swagger_types"):
        swagger_types.update(GrantaServerApiSearchDatumCriterion.swagger_types)

    attribute_map = {
        'any_identities': 'anyIdentities',
        'any_guids': 'anyGuids',
        'type': 'type',
        'constraints': 'constraints'
    }
    if hasattr(GrantaServerApiSearchDatumCriterion, "attribute_map"):
        attribute_map.update(GrantaServerApiSearchDatumCriterion.attribute_map)

    subtype_mapping = {
        'constraints': 'GrantaServerApiSearchParameterConstraint'
    }


    def __init__(self, any_identities=None, any_guids=None, type='discreteFunctionalValues', constraints=None, *args, **kwargs):  # noqa: E501
        """GrantaServerApiSearchDiscreteFunctionalValuesDatumCriterion - a model defined in Swagger"""  # noqa: E501
        GrantaServerApiSearchDatumCriterion.__init__(self, *args, **kwargs)
        self._any_identities = None
        self._any_guids = None
        self._type = None
        self._constraints = None
        self.discriminator = None
        if any_identities is not None:
            self.any_identities = any_identities
        if any_guids is not None:
            self.any_guids = any_guids
        self.type = type
        if constraints is not None:
            self.constraints = constraints

    @property
    def any_identities(self):
        """Gets the any_identities of this GrantaServerApiSearchDiscreteFunctionalValuesDatumCriterion.  # noqa: E501
        Match any of these discrete type identities  # noqa: E501

        :return: The any_identities of this GrantaServerApiSearchDiscreteFunctionalValuesDatumCriterion.  # noqa: E501
        :rtype: list[int]
        """
        return self._any_identities

    @any_identities.setter
    def any_identities(self, any_identities):
        """Sets the any_identities of this GrantaServerApiSearchDiscreteFunctionalValuesDatumCriterion.
        Match any of these discrete type identities  # noqa: E501

        :param any_identities: The any_identities of this GrantaServerApiSearchDiscreteFunctionalValuesDatumCriterion.  # noqa: E501
        :type: list[int]
        """
        self._any_identities = any_identities

    @property
    def any_guids(self):
        """Gets the any_guids of this GrantaServerApiSearchDiscreteFunctionalValuesDatumCriterion.  # noqa: E501
        Match any of these discrete type GUIDs  # noqa: E501

        :return: The any_guids of this GrantaServerApiSearchDiscreteFunctionalValuesDatumCriterion.  # noqa: E501
        :rtype: list[str]
        """
        return self._any_guids

    @any_guids.setter
    def any_guids(self, any_guids):
        """Sets the any_guids of this GrantaServerApiSearchDiscreteFunctionalValuesDatumCriterion.
        Match any of these discrete type GUIDs  # noqa: E501

        :param any_guids: The any_guids of this GrantaServerApiSearchDiscreteFunctionalValuesDatumCriterion.  # noqa: E501
        :type: list[str]
        """
        self._any_guids = any_guids

    @property
    def type(self):
        """Gets the type of this GrantaServerApiSearchDiscreteFunctionalValuesDatumCriterion.  # noqa: E501

        :return: The type of this GrantaServerApiSearchDiscreteFunctionalValuesDatumCriterion.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GrantaServerApiSearchDiscreteFunctionalValuesDatumCriterion.

        :param type: The type of this GrantaServerApiSearchDiscreteFunctionalValuesDatumCriterion.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        self._type = type

    @property
    def constraints(self):
        """Gets the constraints of this GrantaServerApiSearchDiscreteFunctionalValuesDatumCriterion.  # noqa: E501
        Constraints on the parameters of the attribute. Unspecified parameters will be assumed to be unconstrained.  # noqa: E501

        :return: The constraints of this GrantaServerApiSearchDiscreteFunctionalValuesDatumCriterion.  # noqa: E501
        :rtype: list[GrantaServerApiSearchParameterConstraint]
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this GrantaServerApiSearchDiscreteFunctionalValuesDatumCriterion.
        Constraints on the parameters of the attribute. Unspecified parameters will be assumed to be unconstrained.  # noqa: E501

        :param constraints: The constraints of this GrantaServerApiSearchDiscreteFunctionalValuesDatumCriterion.  # noqa: E501
        :type: list[GrantaServerApiSearchParameterConstraint]
        """
        self._constraints = constraints

    def get_real_child_model(self, data):
        """Raises a NotImplementedError for a type without a discriminator defined."""
        raise NotImplementedError()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiSearchDiscreteFunctionalValuesDatumCriterion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiSearchDiscreteFunctionalValuesDatumCriterion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
