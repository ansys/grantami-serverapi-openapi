"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING, Any, Dict, List, Optional  # noqa: F401

from . import ModelBase


if TYPE_CHECKING:
    from . import *

class GrantaServerApiSchemaTable(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.

    """
    swagger_types = {
        "default_subset": "GrantaServerApiSchemaSlimEntitiesSlimSubset",
        "subsets": "list[GrantaServerApiSchemaSlimEntitiesSlimSubset]",
        "default_layout": "GrantaServerApiSchemaSlimEntitiesSlimLayout",
        "layouts": "list[GrantaServerApiSchemaSlimEntitiesSlimLayout]",
        "is_hidden_from_browse": "bool",
        "is_hidden_from_search": "bool",
        "is_versioned": "bool",
        "display_names": "dict(str, str)",
        "name": "str",
        "guid": "str",
    }

    attribute_map = {
        "default_subset": "defaultSubset",
        "subsets": "subsets",
        "default_layout": "defaultLayout",
        "layouts": "layouts",
        "is_hidden_from_browse": "isHiddenFromBrowse",
        "is_hidden_from_search": "isHiddenFromSearch",
        "is_versioned": "isVersioned",
        "display_names": "displayNames",
        "name": "name",
        "guid": "guid",
    }

    subtype_mapping = {
        "defaultSubset": "GrantaServerApiSchemaSlimEntitiesSlimSubset",
        "subsets": "GrantaServerApiSchemaSlimEntitiesSlimSubset",
        "defaultLayout": "GrantaServerApiSchemaSlimEntitiesSlimLayout",
        "layouts": "GrantaServerApiSchemaSlimEntitiesSlimLayout",
    }

    def __init__(self, *, default_layout: "Optional[GrantaServerApiSchemaSlimEntitiesSlimLayout]" = None, default_subset: "Optional[GrantaServerApiSchemaSlimEntitiesSlimSubset]" = None, display_names: "Optional[Dict[str, str]]" = None, guid: "Optional[str]" = None, is_hidden_from_browse: "Optional[bool]" = None, is_hidden_from_search: "Optional[bool]" = None, is_versioned: "Optional[bool]" = None, layouts: "Optional[List[GrantaServerApiSchemaSlimEntitiesSlimLayout]]" = None, name: "Optional[str]" = None, subsets: "Optional[List[GrantaServerApiSchemaSlimEntitiesSlimSubset]]" = None) -> None:
        """GrantaServerApiSchemaTable - a model defined in Swagger

        Parameters
        ----------
            default_layout: GrantaServerApiSchemaSlimEntitiesSlimLayout, optional
            default_subset: GrantaServerApiSchemaSlimEntitiesSlimSubset, optional
            display_names: Dict[str, str], optional
            guid: str, optional
            is_hidden_from_browse: bool, optional
            is_hidden_from_search: bool, optional
            is_versioned: bool, optional
            layouts: List[GrantaServerApiSchemaSlimEntitiesSlimLayout], optional
            name: str, optional
            subsets: List[GrantaServerApiSchemaSlimEntitiesSlimSubset], optional
        """
        self._default_subset = None
        self._subsets = None
        self._default_layout = None
        self._layouts = None
        self._is_hidden_from_browse = None
        self._is_hidden_from_search = None
        self._is_versioned = None
        self._display_names = None
        self._name = None
        self._guid = None
        self.discriminator = None
        if default_subset is not None:
            self.default_subset = default_subset
        if subsets is not None:
            self.subsets = subsets
        if default_layout is not None:
            self.default_layout = default_layout
        if layouts is not None:
            self.layouts = layouts
        if is_hidden_from_browse is not None:
            self.is_hidden_from_browse = is_hidden_from_browse
        if is_hidden_from_search is not None:
            self.is_hidden_from_search = is_hidden_from_search
        if is_versioned is not None:
            self.is_versioned = is_versioned
        if display_names is not None:
            self.display_names = display_names
        if name is not None:
            self.name = name
        if guid is not None:
            self.guid = guid

    @property
    def default_subset(self) -> "GrantaServerApiSchemaSlimEntitiesSlimSubset":
        """Gets the default_subset of this GrantaServerApiSchemaTable.

        Returns
        -------
        GrantaServerApiSchemaSlimEntitiesSlimSubset
            The default_subset of this GrantaServerApiSchemaTable.
        """
        return self._default_subset

    @default_subset.setter
    def default_subset(self, default_subset: "GrantaServerApiSchemaSlimEntitiesSlimSubset") -> None:
        """Sets the default_subset of this GrantaServerApiSchemaTable.

        Parameters
        ----------
        default_subset: GrantaServerApiSchemaSlimEntitiesSlimSubset
            The default_subset of this GrantaServerApiSchemaTable.
        """
        self._default_subset = default_subset

    @property
    def subsets(self) -> "list[GrantaServerApiSchemaSlimEntitiesSlimSubset]":
        """Gets the subsets of this GrantaServerApiSchemaTable.

        Returns
        -------
        list[GrantaServerApiSchemaSlimEntitiesSlimSubset]
            The subsets of this GrantaServerApiSchemaTable.
        """
        return self._subsets

    @subsets.setter
    def subsets(self, subsets: "list[GrantaServerApiSchemaSlimEntitiesSlimSubset]") -> None:
        """Sets the subsets of this GrantaServerApiSchemaTable.

        Parameters
        ----------
        subsets: list[GrantaServerApiSchemaSlimEntitiesSlimSubset]
            The subsets of this GrantaServerApiSchemaTable.
        """
        self._subsets = subsets

    @property
    def default_layout(self) -> "GrantaServerApiSchemaSlimEntitiesSlimLayout":
        """Gets the default_layout of this GrantaServerApiSchemaTable.

        Returns
        -------
        GrantaServerApiSchemaSlimEntitiesSlimLayout
            The default_layout of this GrantaServerApiSchemaTable.
        """
        return self._default_layout

    @default_layout.setter
    def default_layout(self, default_layout: "GrantaServerApiSchemaSlimEntitiesSlimLayout") -> None:
        """Sets the default_layout of this GrantaServerApiSchemaTable.

        Parameters
        ----------
        default_layout: GrantaServerApiSchemaSlimEntitiesSlimLayout
            The default_layout of this GrantaServerApiSchemaTable.
        """
        self._default_layout = default_layout

    @property
    def layouts(self) -> "list[GrantaServerApiSchemaSlimEntitiesSlimLayout]":
        """Gets the layouts of this GrantaServerApiSchemaTable.

        Returns
        -------
        list[GrantaServerApiSchemaSlimEntitiesSlimLayout]
            The layouts of this GrantaServerApiSchemaTable.
        """
        return self._layouts

    @layouts.setter
    def layouts(self, layouts: "list[GrantaServerApiSchemaSlimEntitiesSlimLayout]") -> None:
        """Sets the layouts of this GrantaServerApiSchemaTable.

        Parameters
        ----------
        layouts: list[GrantaServerApiSchemaSlimEntitiesSlimLayout]
            The layouts of this GrantaServerApiSchemaTable.
        """
        self._layouts = layouts

    @property
    def is_hidden_from_browse(self) -> "bool":
        """Gets the is_hidden_from_browse of this GrantaServerApiSchemaTable.

        Returns
        -------
        bool
            The is_hidden_from_browse of this GrantaServerApiSchemaTable.
        """
        return self._is_hidden_from_browse

    @is_hidden_from_browse.setter
    def is_hidden_from_browse(self, is_hidden_from_browse: "bool") -> None:
        """Sets the is_hidden_from_browse of this GrantaServerApiSchemaTable.

        Parameters
        ----------
        is_hidden_from_browse: bool
            The is_hidden_from_browse of this GrantaServerApiSchemaTable.
        """
        self._is_hidden_from_browse = is_hidden_from_browse

    @property
    def is_hidden_from_search(self) -> "bool":
        """Gets the is_hidden_from_search of this GrantaServerApiSchemaTable.

        Returns
        -------
        bool
            The is_hidden_from_search of this GrantaServerApiSchemaTable.
        """
        return self._is_hidden_from_search

    @is_hidden_from_search.setter
    def is_hidden_from_search(self, is_hidden_from_search: "bool") -> None:
        """Sets the is_hidden_from_search of this GrantaServerApiSchemaTable.

        Parameters
        ----------
        is_hidden_from_search: bool
            The is_hidden_from_search of this GrantaServerApiSchemaTable.
        """
        self._is_hidden_from_search = is_hidden_from_search

    @property
    def is_versioned(self) -> "bool":
        """Gets the is_versioned of this GrantaServerApiSchemaTable.

        Returns
        -------
        bool
            The is_versioned of this GrantaServerApiSchemaTable.
        """
        return self._is_versioned

    @is_versioned.setter
    def is_versioned(self, is_versioned: "bool") -> None:
        """Sets the is_versioned of this GrantaServerApiSchemaTable.

        Parameters
        ----------
        is_versioned: bool
            The is_versioned of this GrantaServerApiSchemaTable.
        """
        self._is_versioned = is_versioned

    @property
    def display_names(self) -> "dict(str, str)":
        """Gets the display_names of this GrantaServerApiSchemaTable.

        Returns
        -------
        dict(str, str)
            The display_names of this GrantaServerApiSchemaTable.
        """
        return self._display_names

    @display_names.setter
    def display_names(self, display_names: "dict(str, str)") -> None:
        """Sets the display_names of this GrantaServerApiSchemaTable.

        Parameters
        ----------
        display_names: dict(str, str)
            The display_names of this GrantaServerApiSchemaTable.
        """
        self._display_names = display_names

    @property
    def name(self) -> "str":
        """Gets the name of this GrantaServerApiSchemaTable.

        Returns
        -------
        str
            The name of this GrantaServerApiSchemaTable.
        """
        return self._name

    @name.setter
    def name(self, name: "str") -> None:
        """Sets the name of this GrantaServerApiSchemaTable.

        Parameters
        ----------
        name: str
            The name of this GrantaServerApiSchemaTable.
        """
        self._name = name

    @property
    def guid(self) -> "str":
        """Gets the guid of this GrantaServerApiSchemaTable.

        Returns
        -------
        str
            The guid of this GrantaServerApiSchemaTable.
        """
        return self._guid

    @guid.setter
    def guid(self, guid: "str") -> None:
        """Sets the guid of this GrantaServerApiSchemaTable.

        Parameters
        ----------
        guid: str
            The guid of this GrantaServerApiSchemaTable.
        """
        self._guid = guid

    def get_real_child_model(self, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def to_dict(self) -> Dict:
        """Returns the model properties as a dict

        Returns
        -------
        Dict
            Dictionary indexed by property name containing all the model properties
        """
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiSchemaTable, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model

        Returns
        -------
        str
            String representation of the model as a dictionary
        """
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiSchemaTable):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
