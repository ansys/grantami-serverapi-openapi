"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import (
    TYPE_CHECKING,
    Any,
    BinaryIO,
    Dict,
    List,
    Optional,
    Union,
)  # noqa: F401

from . import ModelBase, Unset, Unset_Type
from ansys.grantami.serverapi_openapi.models.granta_server_api_data_export_export_failures_export_failure import (
    GrantaServerApiDataExportExportFailuresExportFailure,
)  # noqa: F401


if TYPE_CHECKING:
    from datetime import datetime
    import pathlib
    from . import *


class GrantaServerApiDataExportExportFailuresDatumExportFailure(
    GrantaServerApiDataExportExportFailuresExportFailure
):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: Dict[str, str] = {
        "failed_datum": "GrantaServerApiDataExportExportFailuresDatumReference",
        "failure_details": "str",
        "failure_reason": "str",
        "type": "str",
    }

    attribute_map: Dict[str, str] = {
        "failed_datum": "failedDatum",
        "failure_details": "failureDetails",
        "failure_reason": "failureReason",
        "type": "type",
    }

    subtype_mapping: Dict[str, str] = {
        "failedDatum": "GrantaServerApiDataExportExportFailuresDatumReference",
    }

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        failed_datum: "GrantaServerApiDataExportExportFailuresDatumReference",
        failure_details: "str",
        failure_reason: "str",
        type: "str" = "datum",
    ) -> None:
        """GrantaServerApiDataExportExportFailuresDatumExportFailure - a model defined in Swagger

        Parameters
        ----------
        failed_datum: GrantaServerApiDataExportExportFailuresDatumReference
        failure_details: str
        failure_reason: str
        type: str
        """
        super().__init__(failure_details=failure_details, failure_reason=failure_reason)
        self._failed_datum: GrantaServerApiDataExportExportFailuresDatumReference
        self._type: str

        self.failed_datum = failed_datum
        self.type = type

    @property
    def failed_datum(self) -> "GrantaServerApiDataExportExportFailuresDatumReference":
        """Gets the failed_datum of this GrantaServerApiDataExportExportFailuresDatumExportFailure.

        Returns
        -------
        GrantaServerApiDataExportExportFailuresDatumReference
            The failed_datum of this GrantaServerApiDataExportExportFailuresDatumExportFailure.
        """
        return self._failed_datum

    @failed_datum.setter
    def failed_datum(
        self, failed_datum: "GrantaServerApiDataExportExportFailuresDatumReference"
    ) -> None:
        """Sets the failed_datum of this GrantaServerApiDataExportExportFailuresDatumExportFailure.

        Parameters
        ----------
        failed_datum: GrantaServerApiDataExportExportFailuresDatumReference
            The failed_datum of this GrantaServerApiDataExportExportFailuresDatumExportFailure.
        """
        # Field is not nullable
        if failed_datum is None:
            raise ValueError("Invalid value for 'failed_datum', must not be 'None'")
        # Field is required
        if failed_datum is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'failed_datum', must not be 'Unset'")
        self._failed_datum = failed_datum

    @property
    def type(self) -> "str":
        """Gets the type of this GrantaServerApiDataExportExportFailuresDatumExportFailure.

        Returns
        -------
        str
            The type of this GrantaServerApiDataExportExportFailuresDatumExportFailure.
        """
        return self._type

    @type.setter
    def type(self, type: "str") -> None:
        """Sets the type of this GrantaServerApiDataExportExportFailuresDatumExportFailure.

        Parameters
        ----------
        type: str
            The type of this GrantaServerApiDataExportExportFailuresDatumExportFailure.
        """
        # Field is not nullable
        if type is None:
            raise ValueError("Invalid value for 'type', must not be 'None'")
        # Field is required
        if type is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'type', must not be 'Unset'")
        self._type = type

    @classmethod
    def get_real_child_model(cls, data: Dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(
            other, GrantaServerApiDataExportExportFailuresDatumExportFailure
        ):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
