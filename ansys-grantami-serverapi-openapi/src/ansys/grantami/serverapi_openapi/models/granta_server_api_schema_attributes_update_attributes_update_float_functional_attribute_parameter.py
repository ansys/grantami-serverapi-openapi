"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import (
    TYPE_CHECKING,
    Any,
    Dict,
    List,
    BinaryIO,
    Optional,
    Union,
)  # noqa: F401

from . import ModelBase


if TYPE_CHECKING:
    from datetime import datetime
    import pathlib
    from . import *


class GrantaServerApiSchemaAttributesUpdateAttributesUpdateFloatFunctionalAttributeParameter(ModelBase):  # type: ignore[misc]
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: Dict[str, str] = {
        "default_value": "float",
        "interpolation_method": "GrantaServerApiSchemaAttributesAttributeInterpolationMethod",
        "parameter_guid": "str",
        "scale_type": "GrantaServerApiSchemaAttributesAttributeScaleType",
    }

    attribute_map: Dict[str, str] = {
        "default_value": "defaultValue",
        "interpolation_method": "interpolationMethod",
        "parameter_guid": "parameterGuid",
        "scale_type": "scaleType",
    }

    subtype_mapping: Dict[str, str] = {
        "interpolationMethod": "GrantaServerApiSchemaAttributesAttributeInterpolationMethod",
        "scaleType": "GrantaServerApiSchemaAttributesAttributeScaleType",
    }

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        default_value: "Optional[float]" = None,
        interpolation_method: "Optional[GrantaServerApiSchemaAttributesAttributeInterpolationMethod]" = None,
        parameter_guid: "Optional[str]" = None,
        scale_type: "Optional[GrantaServerApiSchemaAttributesAttributeScaleType]" = None,
    ) -> None:
        """GrantaServerApiSchemaAttributesUpdateAttributesUpdateFloatFunctionalAttributeParameter - a model defined in Swagger

        Parameters
        ----------
            default_value: float, optional
            interpolation_method: GrantaServerApiSchemaAttributesAttributeInterpolationMethod, optional
            parameter_guid: str, optional
            scale_type: GrantaServerApiSchemaAttributesAttributeScaleType, optional
        """
        self._parameter_guid = None
        self._default_value = None
        self._interpolation_method = None
        self._scale_type = None

        if parameter_guid is not None:
            self.parameter_guid = parameter_guid
        if default_value is not None:
            self.default_value = default_value
        if interpolation_method is not None:
            self.interpolation_method = interpolation_method
        if scale_type is not None:
            self.scale_type = scale_type

    @property
    def parameter_guid(self) -> "Optional[str]":
        """Gets the parameter_guid of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateFloatFunctionalAttributeParameter.

        Returns
        -------
        str
            The parameter_guid of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateFloatFunctionalAttributeParameter.
        """
        return self._parameter_guid

    @parameter_guid.setter
    def parameter_guid(self, parameter_guid: "Optional[str]") -> None:
        """Sets the parameter_guid of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateFloatFunctionalAttributeParameter.

        Parameters
        ----------
        parameter_guid: str
            The parameter_guid of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateFloatFunctionalAttributeParameter.
        """
        self._parameter_guid = parameter_guid

    @property
    def default_value(self) -> "Optional[float]":
        """Gets the default_value of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateFloatFunctionalAttributeParameter.

        Returns
        -------
        float
            The default_value of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateFloatFunctionalAttributeParameter.
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value: "Optional[float]") -> None:
        """Sets the default_value of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateFloatFunctionalAttributeParameter.

        Parameters
        ----------
        default_value: float
            The default_value of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateFloatFunctionalAttributeParameter.
        """
        self._default_value = default_value

    @property
    def interpolation_method(
        self,
    ) -> "Optional[GrantaServerApiSchemaAttributesAttributeInterpolationMethod]":
        """Gets the interpolation_method of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateFloatFunctionalAttributeParameter.

        Returns
        -------
        GrantaServerApiSchemaAttributesAttributeInterpolationMethod
            The interpolation_method of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateFloatFunctionalAttributeParameter.
        """
        return self._interpolation_method

    @interpolation_method.setter
    def interpolation_method(
        self,
        interpolation_method: "Optional[GrantaServerApiSchemaAttributesAttributeInterpolationMethod]",
    ) -> None:
        """Sets the interpolation_method of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateFloatFunctionalAttributeParameter.

        Parameters
        ----------
        interpolation_method: GrantaServerApiSchemaAttributesAttributeInterpolationMethod
            The interpolation_method of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateFloatFunctionalAttributeParameter.
        """
        self._interpolation_method = interpolation_method

    @property
    def scale_type(
        self,
    ) -> "Optional[GrantaServerApiSchemaAttributesAttributeScaleType]":
        """Gets the scale_type of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateFloatFunctionalAttributeParameter.

        Returns
        -------
        GrantaServerApiSchemaAttributesAttributeScaleType
            The scale_type of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateFloatFunctionalAttributeParameter.
        """
        return self._scale_type

    @scale_type.setter
    def scale_type(
        self, scale_type: "Optional[GrantaServerApiSchemaAttributesAttributeScaleType]"
    ) -> None:
        """Sets the scale_type of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateFloatFunctionalAttributeParameter.

        Parameters
        ----------
        scale_type: GrantaServerApiSchemaAttributesAttributeScaleType
            The scale_type of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateFloatFunctionalAttributeParameter.
        """
        self._scale_type = scale_type

    @classmethod
    def get_real_child_model(cls, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()  # type: ignore[no-any-return]

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(
            other,
            GrantaServerApiSchemaAttributesUpdateAttributesUpdateFloatFunctionalAttributeParameter,
        ):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
