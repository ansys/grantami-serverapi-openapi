# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from . import ModelBase

from ansys.grantami.serverapi_openapi.models.granta_server_api_data_export_attribute_to_export import GrantaServerApiDataExportAttributeToExport  # noqa: F401,E501

class GrantaServerApiDataExportLinkAttributeToExport(GrantaServerApiDataExportAttributeToExport):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'local_data': 'list[GrantaServerApiDataExportSimpleAttributeToExport]',
        'target_table_guid': 'str',
        'target_database_guid': 'str',
        'target_attribute_identity': 'int',
        'attribute_type': 'str',
        'link_attribute_type': 'GrantaServerApiLinkAttributeType',
        'export_in_reversed_direction': 'bool',
        'record_properties': 'list[GrantaServerApiRecordProperty]',
        'attributes': 'list[GrantaServerApiDataExportAttributeToExport]'
    }
    if hasattr(GrantaServerApiDataExportAttributeToExport, "swagger_types"):
        swagger_types.update(GrantaServerApiDataExportAttributeToExport.swagger_types)

    attribute_map = {
        'local_data': 'localData',
        'target_table_guid': 'targetTableGuid',
        'target_database_guid': 'targetDatabaseGuid',
        'target_attribute_identity': 'targetAttributeIdentity',
        'attribute_type': 'attributeType',
        'link_attribute_type': 'linkAttributeType',
        'export_in_reversed_direction': 'exportInReversedDirection',
        'record_properties': 'recordProperties',
        'attributes': 'attributes'
    }
    if hasattr(GrantaServerApiDataExportAttributeToExport, "attribute_map"):
        attribute_map.update(GrantaServerApiDataExportAttributeToExport.attribute_map)

    subtype_mapping = {
        'localData': 'GrantaServerApiDataExportSimpleAttributeToExport',
        'linkAttributeType': 'GrantaServerApiLinkAttributeType',
        'recordProperties': 'GrantaServerApiRecordProperty',
        'attributes': 'GrantaServerApiDataExportAttributeToExport'
    }


    def __init__(self, local_data=None, target_table_guid=None, target_database_guid=None, target_attribute_identity=None, attribute_type='link', link_attribute_type=None, export_in_reversed_direction=None, record_properties=None, attributes=None, *args, **kwargs):  # noqa: E501
        """GrantaServerApiDataExportLinkAttributeToExport - a model defined in Swagger"""  # noqa: E501
        GrantaServerApiDataExportAttributeToExport.__init__(self, *args, **kwargs)
        self._local_data = None
        self._target_table_guid = None
        self._target_database_guid = None
        self._target_attribute_identity = None
        self._attribute_type = None
        self._link_attribute_type = None
        self._export_in_reversed_direction = None
        self._record_properties = None
        self._attributes = None
        self.discriminator = None
        if local_data is not None:
            self.local_data = local_data
        if target_table_guid is not None:
            self.target_table_guid = target_table_guid
        if target_database_guid is not None:
            self.target_database_guid = target_database_guid
        if target_attribute_identity is not None:
            self.target_attribute_identity = target_attribute_identity
        self.attribute_type = attribute_type
        if link_attribute_type is not None:
            self.link_attribute_type = link_attribute_type
        if export_in_reversed_direction is not None:
            self.export_in_reversed_direction = export_in_reversed_direction
        if record_properties is not None:
            self.record_properties = record_properties
        if attributes is not None:
            self.attributes = attributes

    @property
    def local_data(self):
        """Gets the local_data of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501

        :return: The local_data of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501
        :rtype: list[GrantaServerApiDataExportSimpleAttributeToExport]
        """
        return self._local_data

    @local_data.setter
    def local_data(self, local_data):
        """Sets the local_data of this GrantaServerApiDataExportLinkAttributeToExport.

        :param local_data: The local_data of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501
        :type: list[GrantaServerApiDataExportSimpleAttributeToExport]
        """
        self._local_data = local_data

    @property
    def target_table_guid(self):
        """Gets the target_table_guid of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501
        Table containing the linked records  # noqa: E501

        :return: The target_table_guid of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501
        :rtype: str
        """
        return self._target_table_guid

    @target_table_guid.setter
    def target_table_guid(self, target_table_guid):
        """Sets the target_table_guid of this GrantaServerApiDataExportLinkAttributeToExport.
        Table containing the linked records  # noqa: E501

        :param target_table_guid: The target_table_guid of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501
        :type: str
        """
        self._target_table_guid = target_table_guid

    @property
    def target_database_guid(self):
        """Gets the target_database_guid of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501
        Database containing the linked records. For reverse cross database links, this is the database where the link is defined.  This is not required for tabular links, and for cross-database link groups that don't have a target database.  # noqa: E501

        :return: The target_database_guid of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501
        :rtype: str
        """
        return self._target_database_guid

    @target_database_guid.setter
    def target_database_guid(self, target_database_guid):
        """Sets the target_database_guid of this GrantaServerApiDataExportLinkAttributeToExport.
        Database containing the linked records. For reverse cross database links, this is the database where the link is defined.  This is not required for tabular links, and for cross-database link groups that don't have a target database.  # noqa: E501

        :param target_database_guid: The target_database_guid of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501
        :type: str
        """
        self._target_database_guid = target_database_guid

    @property
    def target_attribute_identity(self):
        """Gets the target_attribute_identity of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501
        For tabular searching: this is the identity of the short-text linking attribute.  Otherwise null.  # noqa: E501

        :return: The target_attribute_identity of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501
        :rtype: int
        """
        return self._target_attribute_identity

    @target_attribute_identity.setter
    def target_attribute_identity(self, target_attribute_identity):
        """Sets the target_attribute_identity of this GrantaServerApiDataExportLinkAttributeToExport.
        For tabular searching: this is the identity of the short-text linking attribute.  Otherwise null.  # noqa: E501

        :param target_attribute_identity: The target_attribute_identity of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501
        :type: int
        """
        self._target_attribute_identity = target_attribute_identity

    @property
    def attribute_type(self):
        """Gets the attribute_type of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501

        :return: The attribute_type of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501
        :rtype: str
        """
        return self._attribute_type

    @attribute_type.setter
    def attribute_type(self, attribute_type):
        """Sets the attribute_type of this GrantaServerApiDataExportLinkAttributeToExport.

        :param attribute_type: The attribute_type of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501
        :type: str
        """
        if attribute_type is None:
            raise ValueError("Invalid value for `attribute_type`, must not be `None`")  # noqa: E501
        self._attribute_type = attribute_type

    @property
    def link_attribute_type(self):
        """Gets the link_attribute_type of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501

        :return: The link_attribute_type of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501
        :rtype: GrantaServerApiLinkAttributeType
        """
        return self._link_attribute_type

    @link_attribute_type.setter
    def link_attribute_type(self, link_attribute_type):
        """Sets the link_attribute_type of this GrantaServerApiDataExportLinkAttributeToExport.

        :param link_attribute_type: The link_attribute_type of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501
        :type: GrantaServerApiLinkAttributeType
        """
        self._link_attribute_type = link_attribute_type

    @property
    def export_in_reversed_direction(self):
        """Gets the export_in_reversed_direction of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501

        :return: The export_in_reversed_direction of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501
        :rtype: bool
        """
        return self._export_in_reversed_direction

    @export_in_reversed_direction.setter
    def export_in_reversed_direction(self, export_in_reversed_direction):
        """Sets the export_in_reversed_direction of this GrantaServerApiDataExportLinkAttributeToExport.

        :param export_in_reversed_direction: The export_in_reversed_direction of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501
        :type: bool
        """
        self._export_in_reversed_direction = export_in_reversed_direction

    @property
    def record_properties(self):
        """Gets the record_properties of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501
        The properties to export on any linked records.  # noqa: E501

        :return: The record_properties of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501
        :rtype: list[GrantaServerApiRecordProperty]
        """
        return self._record_properties

    @record_properties.setter
    def record_properties(self, record_properties):
        """Sets the record_properties of this GrantaServerApiDataExportLinkAttributeToExport.
        The properties to export on any linked records.  # noqa: E501

        :param record_properties: The record_properties of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501
        :type: list[GrantaServerApiRecordProperty]
        """
        self._record_properties = record_properties

    @property
    def attributes(self):
        """Gets the attributes of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501
        The attributes to export on any linked records.  # noqa: E501

        :return: The attributes of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501
        :rtype: list[GrantaServerApiDataExportAttributeToExport]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this GrantaServerApiDataExportLinkAttributeToExport.
        The attributes to export on any linked records.  # noqa: E501

        :param attributes: The attributes of this GrantaServerApiDataExportLinkAttributeToExport.  # noqa: E501
        :type: list[GrantaServerApiDataExportAttributeToExport]
        """
        self._attributes = attributes

    def get_real_child_model(self, data):
        """Raises a NotImplementedError for a type without a discriminator defined."""
        raise NotImplementedError()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiDataExportLinkAttributeToExport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiDataExportLinkAttributeToExport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
