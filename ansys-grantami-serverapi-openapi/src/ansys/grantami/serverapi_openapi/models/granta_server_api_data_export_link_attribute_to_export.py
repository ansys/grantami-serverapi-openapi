"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING, Any, Dict, List, Optional  # noqa: F401

from . import ModelBase

from ansys.grantami.serverapi_openapi.models.granta_server_api_data_export_attribute_to_export import (
    GrantaServerApiDataExportAttributeToExport,
)  # noqa: F401

if TYPE_CHECKING:
    from . import *


class GrantaServerApiDataExportLinkAttributeToExport(
    GrantaServerApiDataExportAttributeToExport
):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.

    """
    swagger_types = {
        "attribute_type": "str",
        "attributes": "list[GrantaServerApiDataExportAttributeToExport]",
        "export_in_reversed_direction": "bool",
        "guid": "str",
        "identity": "int",
        "link_attribute_type": "GrantaServerApiLinkAttributeType",
        "local_data": "list[GrantaServerApiDataExportSimpleAttributeToExport]",
        "record_properties": "list[GrantaServerApiRecordProperty]",
        "target_attribute_identity": "int",
        "target_database_guid": "str",
        "target_table_guid": "str",
    }

    attribute_map = {
        "attribute_type": "attributeType",
        "attributes": "attributes",
        "export_in_reversed_direction": "exportInReversedDirection",
        "guid": "guid",
        "identity": "identity",
        "link_attribute_type": "linkAttributeType",
        "local_data": "localData",
        "record_properties": "recordProperties",
        "target_attribute_identity": "targetAttributeIdentity",
        "target_database_guid": "targetDatabaseGuid",
        "target_table_guid": "targetTableGuid",
    }

    subtype_mapping = {
        "localData": "GrantaServerApiDataExportSimpleAttributeToExport",
        "linkAttributeType": "GrantaServerApiLinkAttributeType",
        "recordProperties": "GrantaServerApiRecordProperty",
        "attributes": "GrantaServerApiDataExportAttributeToExport",
    }

    def __init__(
        self,
        *,
        attribute_type: "str" = "link",
        attributes: "Optional[List[GrantaServerApiDataExportAttributeToExport]]" = None,
        export_in_reversed_direction: "Optional[bool]" = None,
        guid: "Optional[str]" = None,
        identity: "Optional[int]" = None,
        link_attribute_type: "Optional[GrantaServerApiLinkAttributeType]" = None,
        local_data: "Optional[List[GrantaServerApiDataExportSimpleAttributeToExport]]" = None,
        record_properties: "Optional[List[GrantaServerApiRecordProperty]]" = None,
        target_attribute_identity: "Optional[int]" = None,
        target_database_guid: "Optional[str]" = None,
        target_table_guid: "Optional[str]" = None,
    ) -> None:
        """GrantaServerApiDataExportLinkAttributeToExport - a model defined in Swagger

        Parameters
        ----------
            attribute_type: str
            attributes: List[GrantaServerApiDataExportAttributeToExport], optional
            export_in_reversed_direction: bool, optional
            guid: str, optional
            identity: int, optional
            link_attribute_type: GrantaServerApiLinkAttributeType, optional
            local_data: List[GrantaServerApiDataExportSimpleAttributeToExport], optional
            record_properties: List[GrantaServerApiRecordProperty], optional
            target_attribute_identity: int, optional
            target_database_guid: str, optional
            target_table_guid: str, optional
        """
        super().__init__(guid=guid, identity=identity)
        self._local_data = None
        self._target_table_guid = None
        self._target_database_guid = None
        self._target_attribute_identity = None
        self._attribute_type = None
        self._link_attribute_type = None
        self._export_in_reversed_direction = None
        self._record_properties = None
        self._attributes = None
        self.discriminator = None
        if local_data is not None:
            self.local_data = local_data
        if target_table_guid is not None:
            self.target_table_guid = target_table_guid
        if target_database_guid is not None:
            self.target_database_guid = target_database_guid
        if target_attribute_identity is not None:
            self.target_attribute_identity = target_attribute_identity
        self.attribute_type = attribute_type
        if link_attribute_type is not None:
            self.link_attribute_type = link_attribute_type
        if export_in_reversed_direction is not None:
            self.export_in_reversed_direction = export_in_reversed_direction
        if record_properties is not None:
            self.record_properties = record_properties
        if attributes is not None:
            self.attributes = attributes

    @property
    def local_data(self) -> "list[GrantaServerApiDataExportSimpleAttributeToExport]":
        """Gets the local_data of this GrantaServerApiDataExportLinkAttributeToExport.

        Returns
        -------
        list[GrantaServerApiDataExportSimpleAttributeToExport]
            The local_data of this GrantaServerApiDataExportLinkAttributeToExport.
        """
        return self._local_data

    @local_data.setter
    def local_data(
        self, local_data: "list[GrantaServerApiDataExportSimpleAttributeToExport]"
    ) -> None:
        """Sets the local_data of this GrantaServerApiDataExportLinkAttributeToExport.

        Parameters
        ----------
        local_data: list[GrantaServerApiDataExportSimpleAttributeToExport]
            The local_data of this GrantaServerApiDataExportLinkAttributeToExport.
        """
        self._local_data = local_data

    @property
    def target_table_guid(self) -> "str":
        """Gets the target_table_guid of this GrantaServerApiDataExportLinkAttributeToExport.
        Table containing the linked records

        Returns
        -------
        str
            The target_table_guid of this GrantaServerApiDataExportLinkAttributeToExport.
        """
        return self._target_table_guid

    @target_table_guid.setter
    def target_table_guid(self, target_table_guid: "str") -> None:
        """Sets the target_table_guid of this GrantaServerApiDataExportLinkAttributeToExport.
        Table containing the linked records

        Parameters
        ----------
        target_table_guid: str
            The target_table_guid of this GrantaServerApiDataExportLinkAttributeToExport.
        """
        self._target_table_guid = target_table_guid

    @property
    def target_database_guid(self) -> "str":
        """Gets the target_database_guid of this GrantaServerApiDataExportLinkAttributeToExport.
        Database containing the linked records. For reverse cross database links, this is the database where the link is defined.  This is not required for tabular links, and for cross-database link groups that don't have a target database.

        Returns
        -------
        str
            The target_database_guid of this GrantaServerApiDataExportLinkAttributeToExport.
        """
        return self._target_database_guid

    @target_database_guid.setter
    def target_database_guid(self, target_database_guid: "str") -> None:
        """Sets the target_database_guid of this GrantaServerApiDataExportLinkAttributeToExport.
        Database containing the linked records. For reverse cross database links, this is the database where the link is defined.  This is not required for tabular links, and for cross-database link groups that don't have a target database.

        Parameters
        ----------
        target_database_guid: str
            The target_database_guid of this GrantaServerApiDataExportLinkAttributeToExport.
        """
        self._target_database_guid = target_database_guid

    @property
    def target_attribute_identity(self) -> "int":
        """Gets the target_attribute_identity of this GrantaServerApiDataExportLinkAttributeToExport.
        For tabular searching: this is the identity of the short-text linking attribute.  Otherwise null.

        Returns
        -------
        int
            The target_attribute_identity of this GrantaServerApiDataExportLinkAttributeToExport.
        """
        return self._target_attribute_identity

    @target_attribute_identity.setter
    def target_attribute_identity(self, target_attribute_identity: "int") -> None:
        """Sets the target_attribute_identity of this GrantaServerApiDataExportLinkAttributeToExport.
        For tabular searching: this is the identity of the short-text linking attribute.  Otherwise null.

        Parameters
        ----------
        target_attribute_identity: int
            The target_attribute_identity of this GrantaServerApiDataExportLinkAttributeToExport.
        """
        self._target_attribute_identity = target_attribute_identity

    @property
    def attribute_type(self) -> "str":
        """Gets the attribute_type of this GrantaServerApiDataExportLinkAttributeToExport.

        Returns
        -------
        str
            The attribute_type of this GrantaServerApiDataExportLinkAttributeToExport.
        """
        return self._attribute_type

    @attribute_type.setter
    def attribute_type(self, attribute_type: "str") -> None:
        """Sets the attribute_type of this GrantaServerApiDataExportLinkAttributeToExport.

        Parameters
        ----------
        attribute_type: str
            The attribute_type of this GrantaServerApiDataExportLinkAttributeToExport.
        """
        if attribute_type is None:
            raise ValueError("Invalid value for 'attribute_type', must not be 'None'")
        self._attribute_type = attribute_type

    @property
    def link_attribute_type(self) -> "GrantaServerApiLinkAttributeType":
        """Gets the link_attribute_type of this GrantaServerApiDataExportLinkAttributeToExport.

        Returns
        -------
        GrantaServerApiLinkAttributeType
            The link_attribute_type of this GrantaServerApiDataExportLinkAttributeToExport.
        """
        return self._link_attribute_type

    @link_attribute_type.setter
    def link_attribute_type(
        self, link_attribute_type: "GrantaServerApiLinkAttributeType"
    ) -> None:
        """Sets the link_attribute_type of this GrantaServerApiDataExportLinkAttributeToExport.

        Parameters
        ----------
        link_attribute_type: GrantaServerApiLinkAttributeType
            The link_attribute_type of this GrantaServerApiDataExportLinkAttributeToExport.
        """
        self._link_attribute_type = link_attribute_type

    @property
    def export_in_reversed_direction(self) -> "bool":
        """Gets the export_in_reversed_direction of this GrantaServerApiDataExportLinkAttributeToExport.

        Returns
        -------
        bool
            The export_in_reversed_direction of this GrantaServerApiDataExportLinkAttributeToExport.
        """
        return self._export_in_reversed_direction

    @export_in_reversed_direction.setter
    def export_in_reversed_direction(
        self, export_in_reversed_direction: "bool"
    ) -> None:
        """Sets the export_in_reversed_direction of this GrantaServerApiDataExportLinkAttributeToExport.

        Parameters
        ----------
        export_in_reversed_direction: bool
            The export_in_reversed_direction of this GrantaServerApiDataExportLinkAttributeToExport.
        """
        self._export_in_reversed_direction = export_in_reversed_direction

    @property
    def record_properties(self) -> "list[GrantaServerApiRecordProperty]":
        """Gets the record_properties of this GrantaServerApiDataExportLinkAttributeToExport.
        The properties to export on any linked records.

        Returns
        -------
        list[GrantaServerApiRecordProperty]
            The record_properties of this GrantaServerApiDataExportLinkAttributeToExport.
        """
        return self._record_properties

    @record_properties.setter
    def record_properties(
        self, record_properties: "list[GrantaServerApiRecordProperty]"
    ) -> None:
        """Sets the record_properties of this GrantaServerApiDataExportLinkAttributeToExport.
        The properties to export on any linked records.

        Parameters
        ----------
        record_properties: list[GrantaServerApiRecordProperty]
            The record_properties of this GrantaServerApiDataExportLinkAttributeToExport.
        """
        self._record_properties = record_properties

    @property
    def attributes(self) -> "list[GrantaServerApiDataExportAttributeToExport]":
        """Gets the attributes of this GrantaServerApiDataExportLinkAttributeToExport.
        The attributes to export on any linked records.

        Returns
        -------
        list[GrantaServerApiDataExportAttributeToExport]
            The attributes of this GrantaServerApiDataExportLinkAttributeToExport.
        """
        return self._attributes

    @attributes.setter
    def attributes(
        self, attributes: "list[GrantaServerApiDataExportAttributeToExport]"
    ) -> None:
        """Sets the attributes of this GrantaServerApiDataExportLinkAttributeToExport.
        The attributes to export on any linked records.

        Parameters
        ----------
        attributes: list[GrantaServerApiDataExportAttributeToExport]
            The attributes of this GrantaServerApiDataExportLinkAttributeToExport.
        """
        self._attributes = attributes

    def get_real_child_model(self, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def to_dict(self) -> Dict:
        """Returns the model properties as a dict

        Returns
        -------
        Dict
            Dictionary indexed by property name containing all the model properties
        """
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(GrantaServerApiDataExportLinkAttributeToExport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model

        Returns
        -------
        str
            String representation of the model as a dictionary
        """
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiDataExportLinkAttributeToExport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
