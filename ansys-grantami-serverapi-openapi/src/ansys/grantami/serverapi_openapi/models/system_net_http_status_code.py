# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from . import ModelBase


class SystemNetHttpStatusCode(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    _100 = "100"
    _101 = "101"
    _200 = "200"
    _201 = "201"
    _202 = "202"
    _203 = "203"
    _204 = "204"
    _205 = "205"
    _206 = "206"
    _300 = "300"
    _301 = "301"
    _302 = "302"
    _303 = "303"
    _304 = "304"
    _305 = "305"
    _306 = "306"
    _307 = "307"
    _400 = "400"
    _401 = "401"
    _402 = "402"
    _403 = "403"
    _404 = "404"
    _405 = "405"
    _406 = "406"
    _407 = "407"
    _408 = "408"
    _409 = "409"
    _410 = "410"
    _411 = "411"
    _412 = "412"
    _413 = "413"
    _414 = "414"
    _415 = "415"
    _416 = "416"
    _417 = "417"
    _426 = "426"
    _500 = "500"
    _501 = "501"
    _502 = "502"
    _503 = "503"
    _504 = "504"
    _505 = "505"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    subtype_mapping = {
    }


    def __init__(self):  # noqa: E501
        """SystemNetHttpStatusCode - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def get_real_child_model(self, data):
        """Raises a NotImplementedError for a type without a discriminator defined."""
        raise NotImplementedError()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemNetHttpStatusCode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemNetHttpStatusCode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
