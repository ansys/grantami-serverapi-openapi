# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from . import ModelBase

from ansys.grantami.serverapi_openapi.models.granta_server_api_search_criterion import GrantaServerApiSearchCriterion  # noqa: F401,E501

class GrantaServerApiSearchRecordPropertyCriterion(GrantaServerApiSearchCriterion):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_property': 'GrantaServerApiSearchSearchableRecordProperty',
        'inner_criterion': 'GrantaServerApiSearchDatumCriterion',
        'type': 'str'
    }
    if hasattr(GrantaServerApiSearchCriterion, "swagger_types"):
        swagger_types.update(GrantaServerApiSearchCriterion.swagger_types)

    attribute_map = {
        '_property': 'property',
        'inner_criterion': 'innerCriterion',
        'type': 'type'
    }
    if hasattr(GrantaServerApiSearchCriterion, "attribute_map"):
        attribute_map.update(GrantaServerApiSearchCriterion.attribute_map)

    subtype_mapping = {
        'property': 'GrantaServerApiSearchSearchableRecordProperty',
        'innerCriterion': 'GrantaServerApiSearchDatumCriterion',
    }


    def __init__(self, _property=None, inner_criterion=None, type='recordProperty', *args, **kwargs):  # noqa: E501
        """GrantaServerApiSearchRecordPropertyCriterion - a model defined in Swagger"""  # noqa: E501
        GrantaServerApiSearchCriterion.__init__(self, *args, **kwargs)
        self.__property = None
        self._inner_criterion = None
        self._type = None
        self.discriminator = None
        if _property is not None:
            self._property = _property
        if inner_criterion is not None:
            self.inner_criterion = inner_criterion
        self.type = type

    @property
    def _property(self):
        """Gets the _property of this GrantaServerApiSearchRecordPropertyCriterion.  # noqa: E501

        :return: The _property of this GrantaServerApiSearchRecordPropertyCriterion.  # noqa: E501
        :rtype: GrantaServerApiSearchSearchableRecordProperty
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this GrantaServerApiSearchRecordPropertyCriterion.

        :param _property: The _property of this GrantaServerApiSearchRecordPropertyCriterion.  # noqa: E501
        :type: GrantaServerApiSearchSearchableRecordProperty
        """
        self.__property = _property

    @property
    def inner_criterion(self):
        """Gets the inner_criterion of this GrantaServerApiSearchRecordPropertyCriterion.  # noqa: E501

        :return: The inner_criterion of this GrantaServerApiSearchRecordPropertyCriterion.  # noqa: E501
        :rtype: GrantaServerApiSearchDatumCriterion
        """
        return self._inner_criterion

    @inner_criterion.setter
    def inner_criterion(self, inner_criterion):
        """Sets the inner_criterion of this GrantaServerApiSearchRecordPropertyCriterion.

        :param inner_criterion: The inner_criterion of this GrantaServerApiSearchRecordPropertyCriterion.  # noqa: E501
        :type: GrantaServerApiSearchDatumCriterion
        """
        self._inner_criterion = inner_criterion

    @property
    def type(self):
        """Gets the type of this GrantaServerApiSearchRecordPropertyCriterion.  # noqa: E501

        :return: The type of this GrantaServerApiSearchRecordPropertyCriterion.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GrantaServerApiSearchRecordPropertyCriterion.

        :param type: The type of this GrantaServerApiSearchRecordPropertyCriterion.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        self._type = type

    def get_real_child_model(self, data):
        """Raises a NotImplementedError for a type without a discriminator defined."""
        raise NotImplementedError()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiSearchRecordPropertyCriterion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiSearchRecordPropertyCriterion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
