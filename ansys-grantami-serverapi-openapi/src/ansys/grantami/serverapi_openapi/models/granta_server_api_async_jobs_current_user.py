"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import (
    TYPE_CHECKING,
    Any,
    Dict,
    List,
    BinaryIO,
    Optional,
    Union,
)  # noqa: F401

from . import ModelBase


if TYPE_CHECKING:
    from datetime import datetime
    import pathlib
    from . import *


class GrantaServerApiAsyncJobsCurrentUser(ModelBase):  # type: ignore[misc]
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: Dict[str, str] = {
        "has_write_access": "bool",
        "is_admin": "bool",
        "username": "str",
    }

    attribute_map: Dict[str, str] = {
        "has_write_access": "hasWriteAccess",
        "is_admin": "isAdmin",
        "username": "username",
    }

    subtype_mapping: Dict[str, str] = {}

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        has_write_access: "Optional[bool]" = None,
        is_admin: "Optional[bool]" = None,
        username: "Optional[str]" = None,
    ) -> None:
        """GrantaServerApiAsyncJobsCurrentUser - a model defined in Swagger

        Parameters
        ----------
            has_write_access: bool, optional
            is_admin: bool, optional
            username: str, optional
        """
        self._is_admin = None
        self._username = None
        self._has_write_access = None

        if is_admin is not None:
            self.is_admin = is_admin
        if username is not None:
            self.username = username
        if has_write_access is not None:
            self.has_write_access = has_write_access

    @property
    def is_admin(self) -> "Optional[bool]":
        """Gets the is_admin of this GrantaServerApiAsyncJobsCurrentUser.

        Returns
        -------
        bool
            The is_admin of this GrantaServerApiAsyncJobsCurrentUser.
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin: "Optional[bool]") -> None:
        """Sets the is_admin of this GrantaServerApiAsyncJobsCurrentUser.

        Parameters
        ----------
        is_admin: bool
            The is_admin of this GrantaServerApiAsyncJobsCurrentUser.
        """
        self._is_admin = is_admin

    @property
    def username(self) -> "Optional[str]":
        """Gets the username of this GrantaServerApiAsyncJobsCurrentUser.

        Returns
        -------
        str
            The username of this GrantaServerApiAsyncJobsCurrentUser.
        """
        return self._username

    @username.setter
    def username(self, username: "Optional[str]") -> None:
        """Sets the username of this GrantaServerApiAsyncJobsCurrentUser.

        Parameters
        ----------
        username: str
            The username of this GrantaServerApiAsyncJobsCurrentUser.
        """
        self._username = username

    @property
    def has_write_access(self) -> "Optional[bool]":
        """Gets the has_write_access of this GrantaServerApiAsyncJobsCurrentUser.

        Returns
        -------
        bool
            The has_write_access of this GrantaServerApiAsyncJobsCurrentUser.
        """
        return self._has_write_access

    @has_write_access.setter
    def has_write_access(self, has_write_access: "Optional[bool]") -> None:
        """Sets the has_write_access of this GrantaServerApiAsyncJobsCurrentUser.

        Parameters
        ----------
        has_write_access: bool
            The has_write_access of this GrantaServerApiAsyncJobsCurrentUser.
        """
        self._has_write_access = has_write_access

    @classmethod
    def get_real_child_model(cls, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()  # type: ignore[no-any-return]

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiAsyncJobsCurrentUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
