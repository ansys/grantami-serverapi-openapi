"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional, Union  # noqa: F401

from . import ModelBase, Unset, Unset_Type
from ansys.grantami.serverapi_openapi.models.gsa_data_export_float_functional_datum import GsaDataExportFloatFunctionalDatum  # noqa: F401
from ansys.grantami.serverapi_openapi.models.gsa_attribute_type import GsaAttributeType


if TYPE_CHECKING:
    from datetime import datetime
    import pathlib
    from . import *


class GsaDataExportFunctionalGridDatum(GsaDataExportFloatFunctionalDatum):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "attribute_guid": "str",
        "attribute_identity": "int",
        "datum_type": "GsaAttributeType",
        "graph_type": "str",
        "not_applicable": "str",
        "is_estimated": "bool",
        "is_logarithmic": "bool",
        "is_range": "bool",
        "meta_datums": "list[GsaDataExportDatum]",
        "parameters": "list[GsaFunctionalDatumParameterInfo]",
        "points": "list[GsaDataExportGridPoint]",
        "unit_symbol": "str",
        "x_axis_parameter": "GsaFunctionalDatumParameterInfo",
    }

    attribute_map: dict[str, str] = {
        "attribute_guid": "attributeGuid",
        "attribute_identity": "attributeIdentity",
        "datum_type": "datumType",
        "graph_type": "graphType",
        "not_applicable": "notApplicable",
        "is_estimated": "isEstimated",
        "is_logarithmic": "isLogarithmic",
        "is_range": "isRange",
        "meta_datums": "metaDatums",
        "parameters": "parameters",
        "points": "points",
        "unit_symbol": "unitSymbol",
        "x_axis_parameter": "xAxisParameter",
    }

    subtype_mapping: dict[str, str] = {
        "points": "GsaDataExportGridPoint",
    }

    discriminator: Optional[str] = None

    def __init__(self, *, attribute_guid: "str", attribute_identity: "int", datum_type: "GsaAttributeType" = GsaAttributeType.FLOATFUNCTIONAL, graph_type: "str" = "grid", not_applicable: "str" = "applicable", is_estimated: "Union[bool, Unset_Type]" = Unset, is_logarithmic: "Union[bool, Unset_Type]" = Unset, is_range: "Union[bool, Unset_Type]" = Unset, meta_datums: "Union[list[GsaDataExportDatum], None, Unset_Type]" = Unset, parameters: "Union[list[GsaFunctionalDatumParameterInfo], None, Unset_Type]" = Unset, points: "Union[list[GsaDataExportGridPoint], None, Unset_Type]" = Unset, unit_symbol: "Union[str, None, Unset_Type]" = Unset, x_axis_parameter: "Union[GsaFunctionalDatumParameterInfo, Unset_Type]" = Unset,) -> None:
        """GsaDataExportFunctionalGridDatum - a model defined in Swagger

        Parameters
        ----------
        attribute_guid: str
        attribute_identity: int
        datum_type: GsaAttributeType
        graph_type: str
        not_applicable: str
        is_estimated: bool, optional
        is_logarithmic: bool, optional
        is_range: bool, optional
        meta_datums: list[GsaDataExportDatum], optional
        parameters: list[GsaFunctionalDatumParameterInfo], optional
        points: list[GsaDataExportGridPoint], optional
        unit_symbol: str, optional
        x_axis_parameter: GsaFunctionalDatumParameterInfo, optional
        """
        super().__init__(attribute_guid=attribute_guid, attribute_identity=attribute_identity, datum_type=datum_type, graph_type=graph_type, not_applicable=not_applicable, is_estimated=is_estimated, is_logarithmic=is_logarithmic, is_range=is_range, meta_datums=meta_datums, parameters=parameters, unit_symbol=unit_symbol, x_axis_parameter=x_axis_parameter)
        self._points: Union[list[GsaDataExportGridPoint], None, Unset_Type] = Unset

        if points is not Unset:
            self.points = points

    @property
    def points(self) -> "Union[list[GsaDataExportGridPoint], None, Unset_Type]":
        """Gets the points of this GsaDataExportFunctionalGridDatum.

        Returns
        -------
        Union[list[GsaDataExportGridPoint], None, Unset_Type]
            The points of this GsaDataExportFunctionalGridDatum.
        """
        return self._points

    @points.setter
    def points(self, points: "Union[list[GsaDataExportGridPoint], None, Unset_Type]") -> None:
        """Sets the points of this GsaDataExportFunctionalGridDatum.

        Parameters
        ----------
        points: Union[list[GsaDataExportGridPoint], None, Unset_Type]
            The points of this GsaDataExportFunctionalGridDatum.
        """
        self._points = points

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaDataExportFunctionalGridDatum):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other

