"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING, Any, Dict, List, Optional  # noqa: F401

from . import ModelBase

from ansys.grantami.serverapi_openapi.models.granta_server_api_aggregations_aggregation import GrantaServerApiAggregationsAggregation  # noqa: F401

if TYPE_CHECKING:
    from . import *

class GrantaServerApiAggregationsAttributeAggregation(GrantaServerApiAggregationsAggregation):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator_class_map: Dict[str, str]
        They key is discriminator value and the value is associated subtype.
    """
    swagger_types = {
        "attribute_guid": "str",
        "attribute_identity": "int",
        "count": "int",
        "type": "str",
    }

    attribute_map = {
        "attribute_guid": "attributeGuid",
        "attribute_identity": "attributeIdentity",
        "count": "count",
        "type": "type",
    }

    subtype_mapping = {
    }

    discriminator_value_class_map = {
        "value".lower(): "#/components/schemas/GrantaServerApiAggregationsAttributeValueAggregation",
        "exists".lower(): "#/components/schemas/GrantaServerApiAggregationsAttributeExistsAggregation",
    }

    def __init__(self, *, attribute_guid: "Optional[str]" = None, attribute_identity: "Optional[int]" = None, count: "Optional[int]" = None, type: "str" = 'attribute',) -> None:
        """GrantaServerApiAggregationsAttributeAggregation - a model defined in Swagger

        Parameters
        ----------
            attribute_guid: str, optional
            attribute_identity: int, optional
            count: int, optional
            type: str
        """
        super().__init__()
        self._attribute_identity = None
        self._attribute_guid = None
        self._type = None
        self._count = None
        self.discriminator = "attribute_aggregation_type"
        if attribute_identity is not None:
            self.attribute_identity = attribute_identity
        if attribute_guid is not None:
            self.attribute_guid = attribute_guid
        self.type = type
        if count is not None:
            self.count = count

    @property
    def attribute_identity(self) -> "int":
        """Gets the attribute_identity of this GrantaServerApiAggregationsAttributeAggregation.
        The identity of the attribute that was aggregated over.

        Returns
        -------
        int
            The attribute_identity of this GrantaServerApiAggregationsAttributeAggregation.
        """
        return self._attribute_identity

    @attribute_identity.setter
    def attribute_identity(self, attribute_identity: "int") -> None:
        """Sets the attribute_identity of this GrantaServerApiAggregationsAttributeAggregation.
        The identity of the attribute that was aggregated over.

        Parameters
        ----------
        attribute_identity: int
            The attribute_identity of this GrantaServerApiAggregationsAttributeAggregation.
        """
        self._attribute_identity = attribute_identity

    @property
    def attribute_guid(self) -> "str":
        """Gets the attribute_guid of this GrantaServerApiAggregationsAttributeAggregation.
        The GUID of the attribute that was aggregated over.

        Returns
        -------
        str
            The attribute_guid of this GrantaServerApiAggregationsAttributeAggregation.
        """
        return self._attribute_guid

    @attribute_guid.setter
    def attribute_guid(self, attribute_guid: "str") -> None:
        """Sets the attribute_guid of this GrantaServerApiAggregationsAttributeAggregation.
        The GUID of the attribute that was aggregated over.

        Parameters
        ----------
        attribute_guid: str
            The attribute_guid of this GrantaServerApiAggregationsAttributeAggregation.
        """
        self._attribute_guid = attribute_guid

    @property
    def type(self) -> "str":
        """Gets the type of this GrantaServerApiAggregationsAttributeAggregation.

        Returns
        -------
        str
            The type of this GrantaServerApiAggregationsAttributeAggregation.
        """
        return self._type

    @type.setter
    def type(self, type: "str") -> None:
        """Sets the type of this GrantaServerApiAggregationsAttributeAggregation.

        Parameters
        ----------
        type: str
            The type of this GrantaServerApiAggregationsAttributeAggregation.
        """
        if type is None:
            raise ValueError("Invalid value for 'type', must not be 'None'")
        self._type = type

    @property
    def count(self) -> "int":
        """Gets the count of this GrantaServerApiAggregationsAttributeAggregation.
        The number of records that have a populated (applicable) value for this attribute.  (For multi-valued attributes: the number of records that have one or more populated  (applicable) values for this attribute.)                For a tabular attribute, this will be the number of records that have at least one  tabular row in this attribute, even if those rows might be filtered out from users'  views in some clients.

        Returns
        -------
        int
            The count of this GrantaServerApiAggregationsAttributeAggregation.
        """
        return self._count

    @count.setter
    def count(self, count: "int") -> None:
        """Sets the count of this GrantaServerApiAggregationsAttributeAggregation.
        The number of records that have a populated (applicable) value for this attribute.  (For multi-valued attributes: the number of records that have one or more populated  (applicable) values for this attribute.)                For a tabular attribute, this will be the number of records that have at least one  tabular row in this attribute, even if those rows might be filtered out from users'  views in some clients.

        Parameters
        ----------
        count: int
            The count of this GrantaServerApiAggregationsAttributeAggregation.
        """
        self._count = count

    def get_real_child_model(self, data: ModelBase) -> str:
        """Returns the real base class as determined by the discriminator

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class
        """
        discriminator_value = str(data[self._get_discriminator_field_name()]).lower()
        # The actual class name is not available in swagger-codegen, 
        # so we have to extract it from the JSON reference
        return self.discriminator_value_class_map.get(discriminator_value).rsplit("/", 1)[-1]

    def _get_discriminator_field_name(self) -> str:
        name_tokens = self.discriminator.split("_")
        later_tokens = [element.capitalize() for element in name_tokens[1:]]
        return "".join([name_tokens[0], *later_tokens])

    def to_dict(self) -> Dict:
        """Returns the model properties as a dict

        Returns
        -------
        Dict
            Dictionary indexed by property name containing all the model properties
        """
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiAggregationsAttributeAggregation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model

        Returns
        -------
        str
            String representation of the model as a dictionary
        """
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiAggregationsAttributeAggregation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
