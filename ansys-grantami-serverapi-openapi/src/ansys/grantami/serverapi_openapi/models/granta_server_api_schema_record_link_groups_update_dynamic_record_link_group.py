# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from . import ModelBase

from ansys.grantami.serverapi_openapi.models.granta_server_api_schema_record_link_groups_update_record_link_group import GrantaServerApiSchemaRecordLinkGroupsUpdateRecordLinkGroup  # noqa: F401,E501

class GrantaServerApiSchemaRecordLinkGroupsUpdateDynamicRecordLinkGroup(GrantaServerApiSchemaRecordLinkGroupsUpdateRecordLinkGroup):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'forbid_orphans': 'bool',
        'referential_integrity_model': 'GrantaServerApiSchemaRecordLinkGroupsReferentialIntegrityModel',
        'attribute_pairs': 'list[GrantaServerApiSchemaRecordLinkGroupsAttributeLinkPair]',
        'type': 'str'
    }
    if hasattr(GrantaServerApiSchemaRecordLinkGroupsUpdateRecordLinkGroup, "swagger_types"):
        swagger_types.update(GrantaServerApiSchemaRecordLinkGroupsUpdateRecordLinkGroup.swagger_types)

    attribute_map = {
        'forbid_orphans': 'forbidOrphans',
        'referential_integrity_model': 'referentialIntegrityModel',
        'attribute_pairs': 'attributePairs',
        'type': 'type'
    }
    if hasattr(GrantaServerApiSchemaRecordLinkGroupsUpdateRecordLinkGroup, "attribute_map"):
        attribute_map.update(GrantaServerApiSchemaRecordLinkGroupsUpdateRecordLinkGroup.attribute_map)

    subtype_mapping = {
        'referentialIntegrityModel': 'GrantaServerApiSchemaRecordLinkGroupsReferentialIntegrityModel',
        'attributePairs': 'GrantaServerApiSchemaRecordLinkGroupsAttributeLinkPair',
    }


    def __init__(self, forbid_orphans=None, referential_integrity_model=None, attribute_pairs=None, type='dynamic', *args, **kwargs):  # noqa: E501
        """GrantaServerApiSchemaRecordLinkGroupsUpdateDynamicRecordLinkGroup - a model defined in Swagger"""  # noqa: E501
        GrantaServerApiSchemaRecordLinkGroupsUpdateRecordLinkGroup.__init__(self, *args, **kwargs)
        self._forbid_orphans = None
        self._referential_integrity_model = None
        self._attribute_pairs = None
        self._type = None
        self.discriminator = None
        if forbid_orphans is not None:
            self.forbid_orphans = forbid_orphans
        if referential_integrity_model is not None:
            self.referential_integrity_model = referential_integrity_model
        if attribute_pairs is not None:
            self.attribute_pairs = attribute_pairs
        self.type = type

    @property
    def forbid_orphans(self):
        """Gets the forbid_orphans of this GrantaServerApiSchemaRecordLinkGroupsUpdateDynamicRecordLinkGroup.  # noqa: E501

        :return: The forbid_orphans of this GrantaServerApiSchemaRecordLinkGroupsUpdateDynamicRecordLinkGroup.  # noqa: E501
        :rtype: bool
        """
        return self._forbid_orphans

    @forbid_orphans.setter
    def forbid_orphans(self, forbid_orphans):
        """Sets the forbid_orphans of this GrantaServerApiSchemaRecordLinkGroupsUpdateDynamicRecordLinkGroup.

        :param forbid_orphans: The forbid_orphans of this GrantaServerApiSchemaRecordLinkGroupsUpdateDynamicRecordLinkGroup.  # noqa: E501
        :type: bool
        """
        self._forbid_orphans = forbid_orphans

    @property
    def referential_integrity_model(self):
        """Gets the referential_integrity_model of this GrantaServerApiSchemaRecordLinkGroupsUpdateDynamicRecordLinkGroup.  # noqa: E501

        :return: The referential_integrity_model of this GrantaServerApiSchemaRecordLinkGroupsUpdateDynamicRecordLinkGroup.  # noqa: E501
        :rtype: GrantaServerApiSchemaRecordLinkGroupsReferentialIntegrityModel
        """
        return self._referential_integrity_model

    @referential_integrity_model.setter
    def referential_integrity_model(self, referential_integrity_model):
        """Sets the referential_integrity_model of this GrantaServerApiSchemaRecordLinkGroupsUpdateDynamicRecordLinkGroup.

        :param referential_integrity_model: The referential_integrity_model of this GrantaServerApiSchemaRecordLinkGroupsUpdateDynamicRecordLinkGroup.  # noqa: E501
        :type: GrantaServerApiSchemaRecordLinkGroupsReferentialIntegrityModel
        """
        self._referential_integrity_model = referential_integrity_model

    @property
    def attribute_pairs(self):
        """Gets the attribute_pairs of this GrantaServerApiSchemaRecordLinkGroupsUpdateDynamicRecordLinkGroup.  # noqa: E501

        :return: The attribute_pairs of this GrantaServerApiSchemaRecordLinkGroupsUpdateDynamicRecordLinkGroup.  # noqa: E501
        :rtype: list[GrantaServerApiSchemaRecordLinkGroupsAttributeLinkPair]
        """
        return self._attribute_pairs

    @attribute_pairs.setter
    def attribute_pairs(self, attribute_pairs):
        """Sets the attribute_pairs of this GrantaServerApiSchemaRecordLinkGroupsUpdateDynamicRecordLinkGroup.

        :param attribute_pairs: The attribute_pairs of this GrantaServerApiSchemaRecordLinkGroupsUpdateDynamicRecordLinkGroup.  # noqa: E501
        :type: list[GrantaServerApiSchemaRecordLinkGroupsAttributeLinkPair]
        """
        self._attribute_pairs = attribute_pairs

    @property
    def type(self):
        """Gets the type of this GrantaServerApiSchemaRecordLinkGroupsUpdateDynamicRecordLinkGroup.  # noqa: E501

        :return: The type of this GrantaServerApiSchemaRecordLinkGroupsUpdateDynamicRecordLinkGroup.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GrantaServerApiSchemaRecordLinkGroupsUpdateDynamicRecordLinkGroup.

        :param type: The type of this GrantaServerApiSchemaRecordLinkGroupsUpdateDynamicRecordLinkGroup.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        self._type = type

    def get_real_child_model(self, data):
        """Raises a NotImplementedError for a type without a discriminator defined."""
        raise NotImplementedError()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiSchemaRecordLinkGroupsUpdateDynamicRecordLinkGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiSchemaRecordLinkGroupsUpdateDynamicRecordLinkGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
