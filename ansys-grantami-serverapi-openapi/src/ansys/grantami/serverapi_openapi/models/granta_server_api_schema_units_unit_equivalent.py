# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from . import ModelBase


class GrantaServerApiSchemaUnitsUnitEquivalent(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unit': 'GrantaServerApiSchemaUnitsUnit',
        'unit_system': 'GrantaServerApiSchemaUnitsUnitSystem',
        'equivalent_unit': 'GrantaServerApiSchemaUnitsUnit'
    }

    attribute_map = {
        'unit': 'unit',
        'unit_system': 'unitSystem',
        'equivalent_unit': 'equivalentUnit'
    }

    subtype_mapping = {
        'unit': 'GrantaServerApiSchemaUnitsUnit',
        'unitSystem': 'GrantaServerApiSchemaUnitsUnitSystem',
        'equivalentUnit': 'GrantaServerApiSchemaUnitsUnit'
    }


    def __init__(self, unit=None, unit_system=None, equivalent_unit=None):  # noqa: E501
        """GrantaServerApiSchemaUnitsUnitEquivalent - a model defined in Swagger"""  # noqa: E501
        self._unit = None
        self._unit_system = None
        self._equivalent_unit = None
        self.discriminator = None
        if unit is not None:
            self.unit = unit
        if unit_system is not None:
            self.unit_system = unit_system
        if equivalent_unit is not None:
            self.equivalent_unit = equivalent_unit

    @property
    def unit(self):
        """Gets the unit of this GrantaServerApiSchemaUnitsUnitEquivalent.  # noqa: E501

        :return: The unit of this GrantaServerApiSchemaUnitsUnitEquivalent.  # noqa: E501
        :rtype: GrantaServerApiSchemaUnitsUnit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this GrantaServerApiSchemaUnitsUnitEquivalent.

        :param unit: The unit of this GrantaServerApiSchemaUnitsUnitEquivalent.  # noqa: E501
        :type: GrantaServerApiSchemaUnitsUnit
        """
        self._unit = unit

    @property
    def unit_system(self):
        """Gets the unit_system of this GrantaServerApiSchemaUnitsUnitEquivalent.  # noqa: E501

        :return: The unit_system of this GrantaServerApiSchemaUnitsUnitEquivalent.  # noqa: E501
        :rtype: GrantaServerApiSchemaUnitsUnitSystem
        """
        return self._unit_system

    @unit_system.setter
    def unit_system(self, unit_system):
        """Sets the unit_system of this GrantaServerApiSchemaUnitsUnitEquivalent.

        :param unit_system: The unit_system of this GrantaServerApiSchemaUnitsUnitEquivalent.  # noqa: E501
        :type: GrantaServerApiSchemaUnitsUnitSystem
        """
        self._unit_system = unit_system

    @property
    def equivalent_unit(self):
        """Gets the equivalent_unit of this GrantaServerApiSchemaUnitsUnitEquivalent.  # noqa: E501

        :return: The equivalent_unit of this GrantaServerApiSchemaUnitsUnitEquivalent.  # noqa: E501
        :rtype: GrantaServerApiSchemaUnitsUnit
        """
        return self._equivalent_unit

    @equivalent_unit.setter
    def equivalent_unit(self, equivalent_unit):
        """Sets the equivalent_unit of this GrantaServerApiSchemaUnitsUnitEquivalent.

        :param equivalent_unit: The equivalent_unit of this GrantaServerApiSchemaUnitsUnitEquivalent.  # noqa: E501
        :type: GrantaServerApiSchemaUnitsUnit
        """
        self._equivalent_unit = equivalent_unit

    def get_real_child_model(self, data):
        """Raises a NotImplementedError for a type without a discriminator defined."""
        raise NotImplementedError()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaServerApiSchemaUnitsUnitEquivalent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiSchemaUnitsUnitEquivalent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
