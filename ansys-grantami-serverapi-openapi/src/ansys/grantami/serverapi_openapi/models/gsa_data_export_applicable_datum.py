"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, BinaryIO, Optional, Union  # noqa: F401

from . import ModelBase, Unset, Unset_Type
from ansys.grantami.serverapi_openapi.models.gsa_data_export_datum import GsaDataExportDatum  # noqa: F401


if TYPE_CHECKING:
    from datetime import datetime
    import pathlib
    from . import *


class GsaDataExportApplicableDatum(GsaDataExportDatum):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator_class_map: dict[str, str]
        They key is discriminator value and the value is associated subtype.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: dict[str, str] = {
        "attribute_guid": "str",
        "attribute_identity": "int",
        "datum_type": "GsaAttributeType",
        "not_applicable": "str",
        "meta_datums": "list[GsaDataExportDatum]",
    }

    attribute_map: dict[str, str] = {
        "attribute_guid": "attributeGuid",
        "attribute_identity": "attributeIdentity",
        "datum_type": "datumType",
        "not_applicable": "notApplicable",
        "meta_datums": "metaDatums",
    }

    subtype_mapping: dict[str, str] = {
        "datumType": "GsaAttributeType",
    }

    discriminator_value_class_map = {
        "logical".lower(): "#/components/schemas/GsaDataExportBooleanDatum",
        "dateTime".lower(): "#/components/schemas/GsaDataExportDateTimeDatum",
        "discrete".lower(): "#/components/schemas/GsaDataExportDiscreteDatum",
        "file".lower(): "#/components/schemas/GsaDataExportFileDatum",
        "floatFunctional".lower(): "#/components/schemas/GsaDataExportFloatFunctionalDatum",
        "discreteFunctional".lower(): "#/components/schemas/GsaDataExportDiscreteFunctionalDatum",
        "hyperlink".lower(): "#/components/schemas/GsaDataExportHyperlinkDatum",
        "link".lower(): "#/components/schemas/GsaDataExportLinkDatum",
        "longText".lower(): "#/components/schemas/GsaDataExportLongTextDatum",
        "integer".lower(): "#/components/schemas/GsaDataExportNumericDatum",
        "picture".lower(): "#/components/schemas/GsaDataExportPictureDatum",
        "point".lower(): "#/components/schemas/GsaDataExportPointDatum",
        "range".lower(): "#/components/schemas/GsaDataExportRangeDatum",
        "shortText".lower(): "#/components/schemas/GsaDataExportShortTextDatum",
    }

    discriminator: Optional[str] = "datum_type"

    def __init__(self, *, attribute_guid: "str", attribute_identity: "int", datum_type: "GsaAttributeType", not_applicable: "str" = "applicable", meta_datums: "Union[list[GsaDataExportDatum], None, Unset_Type]" = Unset,) -> None:
        """GsaDataExportApplicableDatum - a model defined in Swagger

        Parameters
        ----------
        attribute_guid: str
        attribute_identity: int
        datum_type: GsaAttributeType
        not_applicable: str
        meta_datums: list[GsaDataExportDatum], optional
        """
        super().__init__(attribute_guid=attribute_guid, attribute_identity=attribute_identity, not_applicable=not_applicable, meta_datums=meta_datums)
        self._datum_type: GsaAttributeType

        self.datum_type = datum_type

    @property
    def datum_type(self) -> "GsaAttributeType":
        """Gets the datum_type of this GsaDataExportApplicableDatum.

        Returns
        -------
        GsaAttributeType
            The datum_type of this GsaDataExportApplicableDatum.
        """
        return self._datum_type

    @datum_type.setter
    def datum_type(self, datum_type: "GsaAttributeType") -> None:
        """Sets the datum_type of this GsaDataExportApplicableDatum.

        Parameters
        ----------
        datum_type: GsaAttributeType
            The datum_type of this GsaDataExportApplicableDatum.
        """
        # Field is not nullable
        if datum_type is None:
            raise ValueError("Invalid value for 'datum_type', must not be 'None'")
        # Field is required
        if datum_type is Unset:  # type: ignore[comparison-overlap, unused-ignore]
            raise ValueError("Invalid value for 'datum_type', must not be 'Unset'")
        self._datum_type = datum_type

    @classmethod
    def get_real_child_model(cls, data: dict[str, str]) -> str:
        """Returns the real base class as determined by the discriminator

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class
        """
        discriminator_value = str(data[cls._get_discriminator_field_name()]).lower()
        # The actual class name is not available in swagger-codegen,
        # so we have to extract it from the JSON reference
        return cls.discriminator_value_class_map[discriminator_value].rsplit("/", 1)[-1]

    @classmethod
    def _get_discriminator_field_name(cls) -> str:
        assert cls.discriminator
        name_tokens = cls.discriminator.split("_")
        later_tokens = [element.capitalize() for element in name_tokens[1:]]
        return "".join([name_tokens[0], *later_tokens])

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GsaDataExportApplicableDatum):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other

