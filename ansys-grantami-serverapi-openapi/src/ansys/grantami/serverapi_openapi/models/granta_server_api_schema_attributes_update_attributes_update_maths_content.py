"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import (
    TYPE_CHECKING,
    Any,
    Dict,
    List,
    BinaryIO,
    Optional,
    Union,
)  # noqa: F401

from . import ModelBase


if TYPE_CHECKING:
    from datetime import datetime
    import pathlib
    from . import *


class GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent(ModelBase):  # type: ignore[misc]
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types: Dict[str, str] = {
        "curve_label": "str",
        "expression": "GrantaServerApiSchemaSlimEntitiesSlimEntity",
        "free_parameter": "GrantaServerApiSchemaSlimEntitiesSlimEntity",
        "parameter_contents": "list[GrantaServerApiSchemaParametersUpdateParameterContent]",
        "transpose_axes": "bool",
        "use_logarithmic_scale": "bool",
    }

    attribute_map: Dict[str, str] = {
        "curve_label": "curveLabel",
        "expression": "expression",
        "free_parameter": "freeParameter",
        "parameter_contents": "parameterContents",
        "transpose_axes": "transposeAxes",
        "use_logarithmic_scale": "useLogarithmicScale",
    }

    subtype_mapping: Dict[str, str] = {
        "expression": "GrantaServerApiSchemaSlimEntitiesSlimEntity",
        "freeParameter": "GrantaServerApiSchemaSlimEntitiesSlimEntity",
        "parameterContents": "GrantaServerApiSchemaParametersUpdateParameterContent",
    }

    discriminator: Optional[str] = None

    def __init__(
        self,
        *,
        curve_label: "Optional[str]" = None,
        expression: "Optional[GrantaServerApiSchemaSlimEntitiesSlimEntity]" = None,
        free_parameter: "Optional[GrantaServerApiSchemaSlimEntitiesSlimEntity]" = None,
        parameter_contents: "Optional[List[GrantaServerApiSchemaParametersUpdateParameterContent]]" = None,
        transpose_axes: "Optional[bool]" = None,
        use_logarithmic_scale: "Optional[bool]" = None,
    ) -> None:
        """GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent - a model defined in Swagger

        Parameters
        ----------
            curve_label: str, optional
            expression: GrantaServerApiSchemaSlimEntitiesSlimEntity, optional
            free_parameter: GrantaServerApiSchemaSlimEntitiesSlimEntity, optional
            parameter_contents: List[GrantaServerApiSchemaParametersUpdateParameterContent], optional
            transpose_axes: bool, optional
            use_logarithmic_scale: bool, optional
        """
        self._curve_label = None
        self._transpose_axes = None
        self._use_logarithmic_scale = None
        self._expression = None
        self._free_parameter = None
        self._parameter_contents = None

        if curve_label is not None:
            self.curve_label = curve_label
        if transpose_axes is not None:
            self.transpose_axes = transpose_axes
        if use_logarithmic_scale is not None:
            self.use_logarithmic_scale = use_logarithmic_scale
        if expression is not None:
            self.expression = expression
        if free_parameter is not None:
            self.free_parameter = free_parameter
        if parameter_contents is not None:
            self.parameter_contents = parameter_contents

    @property
    def curve_label(self) -> "Optional[str]":
        """Gets the curve_label of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent.

        Returns
        -------
        str
            The curve_label of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent.
        """
        return self._curve_label

    @curve_label.setter
    def curve_label(self, curve_label: "Optional[str]") -> None:
        """Sets the curve_label of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent.

        Parameters
        ----------
        curve_label: str
            The curve_label of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent.
        """
        self._curve_label = curve_label

    @property
    def transpose_axes(self) -> "Optional[bool]":
        """Gets the transpose_axes of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent.

        Returns
        -------
        bool
            The transpose_axes of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent.
        """
        return self._transpose_axes

    @transpose_axes.setter
    def transpose_axes(self, transpose_axes: "Optional[bool]") -> None:
        """Sets the transpose_axes of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent.

        Parameters
        ----------
        transpose_axes: bool
            The transpose_axes of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent.
        """
        self._transpose_axes = transpose_axes

    @property
    def use_logarithmic_scale(self) -> "Optional[bool]":
        """Gets the use_logarithmic_scale of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent.

        Returns
        -------
        bool
            The use_logarithmic_scale of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent.
        """
        return self._use_logarithmic_scale

    @use_logarithmic_scale.setter
    def use_logarithmic_scale(self, use_logarithmic_scale: "Optional[bool]") -> None:
        """Sets the use_logarithmic_scale of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent.

        Parameters
        ----------
        use_logarithmic_scale: bool
            The use_logarithmic_scale of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent.
        """
        self._use_logarithmic_scale = use_logarithmic_scale

    @property
    def expression(self) -> "Optional[GrantaServerApiSchemaSlimEntitiesSlimEntity]":
        """Gets the expression of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent.

        Returns
        -------
        GrantaServerApiSchemaSlimEntitiesSlimEntity
            The expression of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent.
        """
        return self._expression

    @expression.setter
    def expression(
        self, expression: "Optional[GrantaServerApiSchemaSlimEntitiesSlimEntity]"
    ) -> None:
        """Sets the expression of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent.

        Parameters
        ----------
        expression: GrantaServerApiSchemaSlimEntitiesSlimEntity
            The expression of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent.
        """
        self._expression = expression

    @property
    def free_parameter(self) -> "Optional[GrantaServerApiSchemaSlimEntitiesSlimEntity]":
        """Gets the free_parameter of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent.

        Returns
        -------
        GrantaServerApiSchemaSlimEntitiesSlimEntity
            The free_parameter of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent.
        """
        return self._free_parameter

    @free_parameter.setter
    def free_parameter(
        self, free_parameter: "Optional[GrantaServerApiSchemaSlimEntitiesSlimEntity]"
    ) -> None:
        """Sets the free_parameter of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent.

        Parameters
        ----------
        free_parameter: GrantaServerApiSchemaSlimEntitiesSlimEntity
            The free_parameter of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent.
        """
        self._free_parameter = free_parameter

    @property
    def parameter_contents(
        self,
    ) -> "Optional[List[GrantaServerApiSchemaParametersUpdateParameterContent]]":
        """Gets the parameter_contents of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent.

        Returns
        -------
        list[GrantaServerApiSchemaParametersUpdateParameterContent]
            The parameter_contents of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent.
        """
        return self._parameter_contents

    @parameter_contents.setter
    def parameter_contents(
        self,
        parameter_contents: "Optional[List[GrantaServerApiSchemaParametersUpdateParameterContent]]",
    ) -> None:
        """Sets the parameter_contents of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent.

        Parameters
        ----------
        parameter_contents: List[GrantaServerApiSchemaParametersUpdateParameterContent]
            The parameter_contents of this GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent.
        """
        self._parameter_contents = parameter_contents

    @classmethod
    def get_real_child_model(cls, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()  # type: ignore[no-any-return]

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(
            other, GrantaServerApiSchemaAttributesUpdateAttributesUpdateMathsContent
        ):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
