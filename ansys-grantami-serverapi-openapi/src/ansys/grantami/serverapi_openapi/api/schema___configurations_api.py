# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from . import ApiBase


class SchemaConfigurationsApi(ApiBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def v1alpha_databases_database_key_configurations_configuration_type_configuration_guid_delete(self, database_key, configuration_type, configuration_guid, **kwargs):  # noqa: E501
        """Delete a configuration  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param str configuration_type: The configuration type. (required)
        :param str configuration_guid: (required)
        :return: None
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.v1alpha_databases_database_key_configurations_configuration_type_configuration_guid_delete_with_http_info(database_key, configuration_type, configuration_guid, **kwargs)  # noqa: E501
        return data

    def v1alpha_databases_database_key_configurations_configuration_type_configuration_guid_delete_with_http_info(self, database_key, configuration_type, configuration_guid, **kwargs):  # noqa: E501
        """Delete a configuration  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param str configuration_type: The configuration type. (required)
        :param str configuration_guid: (required)
        :return: None
        """

        all_params = ['database_key', 'configuration_type', 'configuration_guid']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method v1alpha_databases_database_key_configurations_configuration_type_configuration_guid_delete".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_key' is set
        if ('database_key' not in params or
                params['database_key'] is None):
            raise ValueError("Missing the required parameter `database_key` when calling `v1alpha_databases_database_key_configurations_configuration_type_configuration_guid_delete`")  # noqa: E501
        # verify the required parameter 'configuration_type' is set
        if ('configuration_type' not in params or
                params['configuration_type'] is None):
            raise ValueError("Missing the required parameter `configuration_type` when calling `v1alpha_databases_database_key_configurations_configuration_type_configuration_guid_delete`")  # noqa: E501
        # verify the required parameter 'configuration_guid' is set
        if ('configuration_guid' not in params or
                params['configuration_guid'] is None):
            raise ValueError("Missing the required parameter `configuration_guid` when calling `v1alpha_databases_database_key_configurations_configuration_type_configuration_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_key' in params:
            path_params['database-key'] = params['database_key']  # noqa: E501
        if 'configuration_type' in params:
            path_params['configuration-type'] = params['configuration_type']  # noqa: E501
        if 'configuration_guid' in params:
            path_params['configuration-guid'] = params['configuration_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: None,
            403: None,
            404: None,
        }
        
        return self.api_client.call_api(
            '/v1alpha/databases/{database-key}/configurations/{configuration-type}/{configuration-guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def v1alpha_databases_database_key_configurations_configuration_type_configuration_guid_get(self, database_key, configuration_type, configuration_guid, **kwargs):  # noqa: E501
        """Get individual configuration  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param str configuration_type: The configuration type. (required)
        :param str configuration_guid: (required)
        :return: GrantaServerApiSchemaConfigurationsConfiguration
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.v1alpha_databases_database_key_configurations_configuration_type_configuration_guid_get_with_http_info(database_key, configuration_type, configuration_guid, **kwargs)  # noqa: E501
        return data

    def v1alpha_databases_database_key_configurations_configuration_type_configuration_guid_get_with_http_info(self, database_key, configuration_type, configuration_guid, **kwargs):  # noqa: E501
        """Get individual configuration  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param str configuration_type: The configuration type. (required)
        :param str configuration_guid: (required)
        :return: GrantaServerApiSchemaConfigurationsConfiguration
        """

        all_params = ['database_key', 'configuration_type', 'configuration_guid']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method v1alpha_databases_database_key_configurations_configuration_type_configuration_guid_get".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_key' is set
        if ('database_key' not in params or
                params['database_key'] is None):
            raise ValueError("Missing the required parameter `database_key` when calling `v1alpha_databases_database_key_configurations_configuration_type_configuration_guid_get`")  # noqa: E501
        # verify the required parameter 'configuration_type' is set
        if ('configuration_type' not in params or
                params['configuration_type'] is None):
            raise ValueError("Missing the required parameter `configuration_type` when calling `v1alpha_databases_database_key_configurations_configuration_type_configuration_guid_get`")  # noqa: E501
        # verify the required parameter 'configuration_guid' is set
        if ('configuration_guid' not in params or
                params['configuration_guid'] is None):
            raise ValueError("Missing the required parameter `configuration_guid` when calling `v1alpha_databases_database_key_configurations_configuration_type_configuration_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_key' in params:
            path_params['database-key'] = params['database_key']  # noqa: E501
        if 'configuration_type' in params:
            path_params['configuration-type'] = params['configuration_type']  # noqa: E501
        if 'configuration_guid' in params:
            path_params['configuration-guid'] = params['configuration_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'GrantaServerApiSchemaConfigurationsConfiguration',
            404: None,
        }
        
        return self.api_client.call_api(
            '/v1alpha/databases/{database-key}/configurations/{configuration-type}/{configuration-guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def v1alpha_databases_database_key_configurations_configuration_type_configuration_guid_patch(self, database_key, configuration_type, configuration_guid, **kwargs):  # noqa: E501
        """Update a configuration.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param str configuration_type: The configuration type. (required)
        :param str configuration_guid: (required)
        :param GrantaServerApiSchemaConfigurationsUpdateConfiguration body:
        :return: GrantaServerApiSchemaConfigurationsConfiguration
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.v1alpha_databases_database_key_configurations_configuration_type_configuration_guid_patch_with_http_info(database_key, configuration_type, configuration_guid, **kwargs)  # noqa: E501
        return data

    def v1alpha_databases_database_key_configurations_configuration_type_configuration_guid_patch_with_http_info(self, database_key, configuration_type, configuration_guid, **kwargs):  # noqa: E501
        """Update a configuration.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param str configuration_type: The configuration type. (required)
        :param str configuration_guid: (required)
        :param GrantaServerApiSchemaConfigurationsUpdateConfiguration body:
        :return: GrantaServerApiSchemaConfigurationsConfiguration
        """

        all_params = ['database_key', 'configuration_type', 'configuration_guid', 'body']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method v1alpha_databases_database_key_configurations_configuration_type_configuration_guid_patch".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_key' is set
        if ('database_key' not in params or
                params['database_key'] is None):
            raise ValueError("Missing the required parameter `database_key` when calling `v1alpha_databases_database_key_configurations_configuration_type_configuration_guid_patch`")  # noqa: E501
        # verify the required parameter 'configuration_type' is set
        if ('configuration_type' not in params or
                params['configuration_type'] is None):
            raise ValueError("Missing the required parameter `configuration_type` when calling `v1alpha_databases_database_key_configurations_configuration_type_configuration_guid_patch`")  # noqa: E501
        # verify the required parameter 'configuration_guid' is set
        if ('configuration_guid' not in params or
                params['configuration_guid'] is None):
            raise ValueError("Missing the required parameter `configuration_guid` when calling `v1alpha_databases_database_key_configurations_configuration_type_configuration_guid_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_key' in params:
            path_params['database-key'] = params['database_key']  # noqa: E501
        if 'configuration_type' in params:
            path_params['configuration-type'] = params['configuration_type']  # noqa: E501
        if 'configuration_guid' in params:
            path_params['configuration-guid'] = params['configuration_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'GrantaServerApiSchemaConfigurationsConfiguration',
            400: None,
            403: None,
            404: None,
        }
        
        return self.api_client.call_api(
            '/v1alpha/databases/{database-key}/configurations/{configuration-type}/{configuration-guid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def v1alpha_databases_database_key_configurations_configuration_type_configuration_guidexport_get(self, database_key, configuration_type, configuration_guid, **kwargs):  # noqa: E501
        """Get individual configuration as a file  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param str configuration_type: The configuration type. (required)
        :param str configuration_guid: (required)
        :return: None
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.v1alpha_databases_database_key_configurations_configuration_type_configuration_guidexport_get_with_http_info(database_key, configuration_type, configuration_guid, **kwargs)  # noqa: E501
        return data

    def v1alpha_databases_database_key_configurations_configuration_type_configuration_guidexport_get_with_http_info(self, database_key, configuration_type, configuration_guid, **kwargs):  # noqa: E501
        """Get individual configuration as a file  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param str configuration_type: The configuration type. (required)
        :param str configuration_guid: (required)
        :return: None
        """

        all_params = ['database_key', 'configuration_type', 'configuration_guid']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method v1alpha_databases_database_key_configurations_configuration_type_configuration_guidexport_get".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_key' is set
        if ('database_key' not in params or
                params['database_key'] is None):
            raise ValueError("Missing the required parameter `database_key` when calling `v1alpha_databases_database_key_configurations_configuration_type_configuration_guidexport_get`")  # noqa: E501
        # verify the required parameter 'configuration_type' is set
        if ('configuration_type' not in params or
                params['configuration_type'] is None):
            raise ValueError("Missing the required parameter `configuration_type` when calling `v1alpha_databases_database_key_configurations_configuration_type_configuration_guidexport_get`")  # noqa: E501
        # verify the required parameter 'configuration_guid' is set
        if ('configuration_guid' not in params or
                params['configuration_guid'] is None):
            raise ValueError("Missing the required parameter `configuration_guid` when calling `v1alpha_databases_database_key_configurations_configuration_type_configuration_guidexport_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_key' in params:
            path_params['database-key'] = params['database_key']  # noqa: E501
        if 'configuration_type' in params:
            path_params['configuration-type'] = params['configuration_type']  # noqa: E501
        if 'configuration_guid' in params:
            path_params['configuration-guid'] = params['configuration_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: None,
            404: None,
        }
        
        return self.api_client.call_api(
            '/v1alpha/databases/{database-key}/configurations/{configuration-type}/{configuration-guid}:export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def v1alpha_databases_database_key_configurations_configuration_type_get(self, database_key, configuration_type, **kwargs):  # noqa: E501
        """Get all configurations of given type  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param str configuration_type: The configuration type. (required)
        :return: GrantaServerApiSchemaConfigurationsConfigurationsInfo
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.v1alpha_databases_database_key_configurations_configuration_type_get_with_http_info(database_key, configuration_type, **kwargs)  # noqa: E501
        return data

    def v1alpha_databases_database_key_configurations_configuration_type_get_with_http_info(self, database_key, configuration_type, **kwargs):  # noqa: E501
        """Get all configurations of given type  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param str configuration_type: The configuration type. (required)
        :return: GrantaServerApiSchemaConfigurationsConfigurationsInfo
        """

        all_params = ['database_key', 'configuration_type']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method v1alpha_databases_database_key_configurations_configuration_type_get".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_key' is set
        if ('database_key' not in params or
                params['database_key'] is None):
            raise ValueError("Missing the required parameter `database_key` when calling `v1alpha_databases_database_key_configurations_configuration_type_get`")  # noqa: E501
        # verify the required parameter 'configuration_type' is set
        if ('configuration_type' not in params or
                params['configuration_type'] is None):
            raise ValueError("Missing the required parameter `configuration_type` when calling `v1alpha_databases_database_key_configurations_configuration_type_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_key' in params:
            path_params['database-key'] = params['database_key']  # noqa: E501
        if 'configuration_type' in params:
            path_params['configuration-type'] = params['configuration_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'GrantaServerApiSchemaConfigurationsConfigurationsInfo',
            404: None,
        }
        
        return self.api_client.call_api(
            '/v1alpha/databases/{database-key}/configurations/{configuration-type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def v1alpha_databases_database_key_configurations_configuration_type_post(self, database_key, configuration_type, **kwargs):  # noqa: E501
        """Create a new configuration.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param str configuration_type: The configuration type. (required)
        :param GrantaServerApiSchemaConfigurationsCreateConfiguration body:
        :return: GrantaServerApiSchemaConfigurationsConfiguration
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.v1alpha_databases_database_key_configurations_configuration_type_post_with_http_info(database_key, configuration_type, **kwargs)  # noqa: E501
        return data

    def v1alpha_databases_database_key_configurations_configuration_type_post_with_http_info(self, database_key, configuration_type, **kwargs):  # noqa: E501
        """Create a new configuration.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param str configuration_type: The configuration type. (required)
        :param GrantaServerApiSchemaConfigurationsCreateConfiguration body:
        :return: GrantaServerApiSchemaConfigurationsConfiguration
        """

        all_params = ['database_key', 'configuration_type', 'body']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method v1alpha_databases_database_key_configurations_configuration_type_post".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_key' is set
        if ('database_key' not in params or
                params['database_key'] is None):
            raise ValueError("Missing the required parameter `database_key` when calling `v1alpha_databases_database_key_configurations_configuration_type_post`")  # noqa: E501
        # verify the required parameter 'configuration_type' is set
        if ('configuration_type' not in params or
                params['configuration_type'] is None):
            raise ValueError("Missing the required parameter `configuration_type` when calling `v1alpha_databases_database_key_configurations_configuration_type_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_key' in params:
            path_params['database-key'] = params['database_key']  # noqa: E501
        if 'configuration_type' in params:
            path_params['configuration-type'] = params['configuration_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'GrantaServerApiSchemaConfigurationsConfiguration',
            201: None,
            400: None,
            403: None,
            404: None,
        }
        
        return self.api_client.call_api(
            '/v1alpha/databases/{database-key}/configurations/{configuration-type}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)
