# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from . import ApiBase


class ListManagementApi(ApiBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def api_v1_lists_get(self, **kwargs):  # noqa: E501
        """Returns all lists visible to the calling user  # noqa: E501

        This method makes a synchronous HTTP request.

        :return: list[GrantaServerApiListsDtoRecordListHeader]
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.api_v1_lists_get_with_http_info(**kwargs)  # noqa: E501
        return data

    def api_v1_lists_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all lists visible to the calling user  # noqa: E501

        This method makes a synchronous HTTP request.

        :return: list[GrantaServerApiListsDtoRecordListHeader]
        """

        all_params = []  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method api_v1_lists_get".format(key)
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'list[GrantaServerApiListsDtoRecordListHeader]',
            403: None,
        }
        
        return self.api_client.call_api(
            '/api/v1/lists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def api_v1_lists_list_list_identifier_copy_post(self, list_identifier, **kwargs):  # noqa: E501
        """Creates a copy of the list and its items  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str list_identifier: (required)
        :return: GrantaServerApiListsDtoRecordListHeader
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.api_v1_lists_list_list_identifier_copy_post_with_http_info(list_identifier, **kwargs)  # noqa: E501
        return data

    def api_v1_lists_list_list_identifier_copy_post_with_http_info(self, list_identifier, **kwargs):  # noqa: E501
        """Creates a copy of the list and its items  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str list_identifier: (required)
        :return: GrantaServerApiListsDtoRecordListHeader
        """

        all_params = ['list_identifier']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method api_v1_lists_list_list_identifier_copy_post".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_identifier' is set
        if ('list_identifier' not in params or
                params['list_identifier'] is None):
            raise ValueError("Missing the required parameter `list_identifier` when calling `api_v1_lists_list_list_identifier_copy_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_identifier' in params:
            path_params['listIdentifier'] = params['list_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            201: 'GrantaServerApiListsDtoRecordListHeader',
            403: None,
            404: None,
        }
        
        return self.api_client.call_api(
            '/api/v1/lists/list/{listIdentifier}/copy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def api_v1_lists_list_list_identifier_delete(self, list_identifier, **kwargs):  # noqa: E501
        """Delete an existing list.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str list_identifier: (required)
        :return: None
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.api_v1_lists_list_list_identifier_delete_with_http_info(list_identifier, **kwargs)  # noqa: E501
        return data

    def api_v1_lists_list_list_identifier_delete_with_http_info(self, list_identifier, **kwargs):  # noqa: E501
        """Delete an existing list.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str list_identifier: (required)
        :return: None
        """

        all_params = ['list_identifier']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method api_v1_lists_list_list_identifier_delete".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_identifier' is set
        if ('list_identifier' not in params or
                params['list_identifier'] is None):
            raise ValueError("Missing the required parameter `list_identifier` when calling `api_v1_lists_list_list_identifier_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_identifier' in params:
            path_params['listIdentifier'] = params['list_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: None,
            403: None,
            404: None,
        }
        
        return self.api_client.call_api(
            '/api/v1/lists/list/{listIdentifier}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def api_v1_lists_list_list_identifier_get(self, list_identifier, **kwargs):  # noqa: E501
        """Returns the given list if it exists and the calling user has read access to it  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str list_identifier: (required)
        :return: GrantaServerApiListsDtoRecordListHeader
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.api_v1_lists_list_list_identifier_get_with_http_info(list_identifier, **kwargs)  # noqa: E501
        return data

    def api_v1_lists_list_list_identifier_get_with_http_info(self, list_identifier, **kwargs):  # noqa: E501
        """Returns the given list if it exists and the calling user has read access to it  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str list_identifier: (required)
        :return: GrantaServerApiListsDtoRecordListHeader
        """

        all_params = ['list_identifier']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method api_v1_lists_list_list_identifier_get".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_identifier' is set
        if ('list_identifier' not in params or
                params['list_identifier'] is None):
            raise ValueError("Missing the required parameter `list_identifier` when calling `api_v1_lists_list_list_identifier_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_identifier' in params:
            path_params['listIdentifier'] = params['list_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'GrantaServerApiListsDtoRecordListHeader',
            403: None,
            404: None,
        }
        
        return self.api_client.call_api(
            '/api/v1/lists/list/{listIdentifier}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def api_v1_lists_list_list_identifier_patch(self, list_identifier, **kwargs):  # noqa: E501
        """Performs a partial update on the properties of a list. Only replace operations on name, description or notes are supported.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str list_identifier: (required)
        :param list[JsonPatchDocument] body:
        :return: GrantaServerApiListsDtoRecordListHeader
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.api_v1_lists_list_list_identifier_patch_with_http_info(list_identifier, **kwargs)  # noqa: E501
        return data

    def api_v1_lists_list_list_identifier_patch_with_http_info(self, list_identifier, **kwargs):  # noqa: E501
        """Performs a partial update on the properties of a list. Only replace operations on name, description or notes are supported.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str list_identifier: (required)
        :param list[JsonPatchDocument] body:
        :return: GrantaServerApiListsDtoRecordListHeader
        """

        all_params = ['list_identifier', 'body']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method api_v1_lists_list_list_identifier_patch".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_identifier' is set
        if ('list_identifier' not in params or
                params['list_identifier'] is None):
            raise ValueError("Missing the required parameter `list_identifier` when calling `api_v1_lists_list_list_identifier_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_identifier' in params:
            path_params['listIdentifier'] = params['list_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'GrantaServerApiListsDtoRecordListHeader',
            400: None,
            403: None,
            404: None,
        }
        
        return self.api_client.call_api(
            '/api/v1/lists/list/{listIdentifier}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def api_v1_lists_list_list_identifier_publish_post(self, list_identifier, **kwargs):  # noqa: E501
        """Update the status of an existing list to \"published\". The list must be awaiting approval, and not already published.  The \"awaiting approval\" flag will be reset to false.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str list_identifier: (required)
        :return: GrantaServerApiListsDtoRecordListHeader
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.api_v1_lists_list_list_identifier_publish_post_with_http_info(list_identifier, **kwargs)  # noqa: E501
        return data

    def api_v1_lists_list_list_identifier_publish_post_with_http_info(self, list_identifier, **kwargs):  # noqa: E501
        """Update the status of an existing list to \"published\". The list must be awaiting approval, and not already published.  The \"awaiting approval\" flag will be reset to false.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str list_identifier: (required)
        :return: GrantaServerApiListsDtoRecordListHeader
        """

        all_params = ['list_identifier']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method api_v1_lists_list_list_identifier_publish_post".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_identifier' is set
        if ('list_identifier' not in params or
                params['list_identifier'] is None):
            raise ValueError("Missing the required parameter `list_identifier` when calling `api_v1_lists_list_list_identifier_publish_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_identifier' in params:
            path_params['listIdentifier'] = params['list_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'GrantaServerApiListsDtoRecordListHeader',
            400: None,
            403: None,
            404: None,
        }
        
        return self.api_client.call_api(
            '/api/v1/lists/list/{listIdentifier}/publish', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def api_v1_lists_list_list_identifier_put(self, list_identifier, **kwargs):  # noqa: E501
        """If the list exists, updates the properties of the list. This will overwrite all current properties, but not the contents of the list.  If the list does not exist, returns '404 not found' response  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str list_identifier: (required)
        :param GrantaServerApiListsDtoRecordListProperties body:
        :return: GrantaServerApiListsDtoRecordListHeader
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.api_v1_lists_list_list_identifier_put_with_http_info(list_identifier, **kwargs)  # noqa: E501
        return data

    def api_v1_lists_list_list_identifier_put_with_http_info(self, list_identifier, **kwargs):  # noqa: E501
        """If the list exists, updates the properties of the list. This will overwrite all current properties, but not the contents of the list.  If the list does not exist, returns '404 not found' response  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str list_identifier: (required)
        :param GrantaServerApiListsDtoRecordListProperties body:
        :return: GrantaServerApiListsDtoRecordListHeader
        """

        all_params = ['list_identifier', 'body']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method api_v1_lists_list_list_identifier_put".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_identifier' is set
        if ('list_identifier' not in params or
                params['list_identifier'] is None):
            raise ValueError("Missing the required parameter `list_identifier` when calling `api_v1_lists_list_list_identifier_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_identifier' in params:
            path_params['listIdentifier'] = params['list_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'GrantaServerApiListsDtoRecordListHeader',
            400: None,
            403: None,
            404: None,
        }
        
        return self.api_client.call_api(
            '/api/v1/lists/list/{listIdentifier}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def api_v1_lists_list_list_identifier_request_approval_post(self, list_identifier, **kwargs):  # noqa: E501
        """Update the status of an existing list to \"awaiting approval\".  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str list_identifier: (required)
        :return: GrantaServerApiListsDtoRecordListHeader
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.api_v1_lists_list_list_identifier_request_approval_post_with_http_info(list_identifier, **kwargs)  # noqa: E501
        return data

    def api_v1_lists_list_list_identifier_request_approval_post_with_http_info(self, list_identifier, **kwargs):  # noqa: E501
        """Update the status of an existing list to \"awaiting approval\".  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str list_identifier: (required)
        :return: GrantaServerApiListsDtoRecordListHeader
        """

        all_params = ['list_identifier']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method api_v1_lists_list_list_identifier_request_approval_post".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_identifier' is set
        if ('list_identifier' not in params or
                params['list_identifier'] is None):
            raise ValueError("Missing the required parameter `list_identifier` when calling `api_v1_lists_list_list_identifier_request_approval_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_identifier' in params:
            path_params['listIdentifier'] = params['list_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'GrantaServerApiListsDtoRecordListHeader',
            400: None,
            403: None,
            404: None,
        }
        
        return self.api_client.call_api(
            '/api/v1/lists/list/{listIdentifier}/request-approval', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def api_v1_lists_list_list_identifier_reset_post(self, list_identifier, **kwargs):  # noqa: E501
        """Update the status of an existing list to not be \"awaiting approval\".  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str list_identifier: (required)
        :return: GrantaServerApiListsDtoRecordListHeader
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.api_v1_lists_list_list_identifier_reset_post_with_http_info(list_identifier, **kwargs)  # noqa: E501
        return data

    def api_v1_lists_list_list_identifier_reset_post_with_http_info(self, list_identifier, **kwargs):  # noqa: E501
        """Update the status of an existing list to not be \"awaiting approval\".  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str list_identifier: (required)
        :return: GrantaServerApiListsDtoRecordListHeader
        """

        all_params = ['list_identifier']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method api_v1_lists_list_list_identifier_reset_post".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_identifier' is set
        if ('list_identifier' not in params or
                params['list_identifier'] is None):
            raise ValueError("Missing the required parameter `list_identifier` when calling `api_v1_lists_list_list_identifier_reset_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_identifier' in params:
            path_params['listIdentifier'] = params['list_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'GrantaServerApiListsDtoRecordListHeader',
            400: None,
            403: None,
            404: None,
        }
        
        return self.api_client.call_api(
            '/api/v1/lists/list/{listIdentifier}/reset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def api_v1_lists_list_list_identifier_revise_post(self, list_identifier, **kwargs):  # noqa: E501
        """Creates a private copy of a list that can be revised.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str list_identifier: (required)
        :return: GrantaServerApiListsDtoRecordListHeader
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.api_v1_lists_list_list_identifier_revise_post_with_http_info(list_identifier, **kwargs)  # noqa: E501
        return data

    def api_v1_lists_list_list_identifier_revise_post_with_http_info(self, list_identifier, **kwargs):  # noqa: E501
        """Creates a private copy of a list that can be revised.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str list_identifier: (required)
        :return: GrantaServerApiListsDtoRecordListHeader
        """

        all_params = ['list_identifier']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method api_v1_lists_list_list_identifier_revise_post".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_identifier' is set
        if ('list_identifier' not in params or
                params['list_identifier'] is None):
            raise ValueError("Missing the required parameter `list_identifier` when calling `api_v1_lists_list_list_identifier_revise_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_identifier' in params:
            path_params['listIdentifier'] = params['list_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            201: 'GrantaServerApiListsDtoRecordListHeader',
            400: None,
            403: None,
            404: None,
        }
        
        return self.api_client.call_api(
            '/api/v1/lists/list/{listIdentifier}/revise', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def api_v1_lists_list_list_identifier_unpublish_post(self, list_identifier, **kwargs):  # noqa: E501
        """Update the status of an existing list to \"unpublished\". The list must be published, and awaiting approval.  The \"awaiting approval\" flag will be reset to false.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str list_identifier: (required)
        :return: GrantaServerApiListsDtoRecordListHeader
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.api_v1_lists_list_list_identifier_unpublish_post_with_http_info(list_identifier, **kwargs)  # noqa: E501
        return data

    def api_v1_lists_list_list_identifier_unpublish_post_with_http_info(self, list_identifier, **kwargs):  # noqa: E501
        """Update the status of an existing list to \"unpublished\". The list must be published, and awaiting approval.  The \"awaiting approval\" flag will be reset to false.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str list_identifier: (required)
        :return: GrantaServerApiListsDtoRecordListHeader
        """

        all_params = ['list_identifier']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method api_v1_lists_list_list_identifier_unpublish_post".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_identifier' is set
        if ('list_identifier' not in params or
                params['list_identifier'] is None):
            raise ValueError("Missing the required parameter `list_identifier` when calling `api_v1_lists_list_list_identifier_unpublish_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_identifier' in params:
            path_params['listIdentifier'] = params['list_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'GrantaServerApiListsDtoRecordListHeader',
            400: None,
            403: None,
            404: None,
        }
        
        return self.api_client.call_api(
            '/api/v1/lists/list/{listIdentifier}/unpublish', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def api_v1_lists_post(self, **kwargs):  # noqa: E501
        """Creates a new list with the specified properties and items.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param GrantaServerApiListsDtoRecordListCreate body:
        :return: GrantaServerApiListsDtoRecordListHeader
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.api_v1_lists_post_with_http_info(**kwargs)  # noqa: E501
        return data

    def api_v1_lists_post_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a new list with the specified properties and items.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param GrantaServerApiListsDtoRecordListCreate body:
        :return: GrantaServerApiListsDtoRecordListHeader
        """

        all_params = ['body']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method api_v1_lists_post".format(key)
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            201: 'GrantaServerApiListsDtoRecordListHeader',
            400: None,
            403: None,
        }
        
        return self.api_client.call_api(
            '/api/v1/lists', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def api_v1_lists_search_post(self, **kwargs):  # noqa: E501
        """Posts a search request, and returns an object containing search result identifier  # noqa: E501

        This method makes a synchronous HTTP request.

        :param GrantaServerApiListsDtoRecordListSearchRequest body:
        :return: GrantaServerApiListsDtoRecordListSearchInfo
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.api_v1_lists_search_post_with_http_info(**kwargs)  # noqa: E501
        return data

    def api_v1_lists_search_post_with_http_info(self, **kwargs):  # noqa: E501
        """Posts a search request, and returns an object containing search result identifier  # noqa: E501

        This method makes a synchronous HTTP request.

        :param GrantaServerApiListsDtoRecordListSearchRequest body:
        :return: GrantaServerApiListsDtoRecordListSearchInfo
        """

        all_params = ['body']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method api_v1_lists_search_post".format(key)
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            201: 'GrantaServerApiListsDtoRecordListSearchInfo',
            400: None,
            403: None,
        }
        
        return self.api_client.call_api(
            '/api/v1/lists/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def api_v1_lists_search_results_result_resource_identifier_get(self, result_resource_identifier, **kwargs):  # noqa: E501
        """Returns the search results found in the specified resource  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str result_resource_identifier: (required)
        :return: list[GrantaServerApiListsDtoRecordListSearchResult]
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.api_v1_lists_search_results_result_resource_identifier_get_with_http_info(result_resource_identifier, **kwargs)  # noqa: E501
        return data

    def api_v1_lists_search_results_result_resource_identifier_get_with_http_info(self, result_resource_identifier, **kwargs):  # noqa: E501
        """Returns the search results found in the specified resource  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str result_resource_identifier: (required)
        :return: list[GrantaServerApiListsDtoRecordListSearchResult]
        """

        all_params = ['result_resource_identifier']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method api_v1_lists_search_results_result_resource_identifier_get".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'result_resource_identifier' is set
        if ('result_resource_identifier' not in params or
                params['result_resource_identifier'] is None):
            raise ValueError("Missing the required parameter `result_resource_identifier` when calling `api_v1_lists_search_results_result_resource_identifier_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'result_resource_identifier' in params:
            path_params['resultResourceIdentifier'] = params['result_resource_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'list[GrantaServerApiListsDtoRecordListSearchResult]',
            403: None,
            404: None,
            410: None,
        }
        
        return self.api_client.call_api(
            '/api/v1/lists/search/results/{resultResourceIdentifier}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)
