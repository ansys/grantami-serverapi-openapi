"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import (
    TYPE_CHECKING,
    Any,
    Dict,
    BinaryIO,
    List,
    Optional,
    Union,
)  # noqa: F401
from . import ApiBase


if TYPE_CHECKING:
    import pathlib
    from ..models import *


class LicenseApi(ApiBase):  # type: ignore[misc]
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def v1alpha_license_server_licensesensure_checked_out_post(
        self, *, body: "Optional[GrantaServerApiAppNameLicenseCheckoutRequest]" = None
    ) -> "GrantaServerApiAppNameLicenseCheckoutResponse":
        """Checks out server wide licenses and returns a bool for each provided app name indicating if  the relevant license(s) required have been checked out.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        body: GrantaServerApiAppNameLicenseCheckoutRequest

        Returns
        -------
        GrantaServerApiAppNameLicenseCheckoutResponse
        """
        data = (
            self._v1alpha_license_server_licensesensure_checked_out_post_with_http_info(
                body, _return_http_data_only=True
            )
        )
        return data  # type: ignore[no-any-return]

    def _v1alpha_license_server_licensesensure_checked_out_post_with_http_info(
        self,
        body: "Optional[GrantaServerApiAppNameLicenseCheckoutRequest]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "body",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_license_server_licensesensure_checked_out_post"
                )
            params[key] = val
        del params["kwargs"]

        collection_formats: Dict[str, Any] = {}

        path_params: Dict[str, Any] = {}

        query_params: List[Any] = []

        header_params: Dict[str, Any] = {}

        form_params: List[Any] = []
        local_var_files: Dict[str, Any] = {}

        body_params = None
        if "body" in params and body is not None:
            body_params = params["body"]
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        # HTTP header 'Content-Type'
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            [
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json",
            ]
        )

        response_type_map = {
            200: "GrantaServerApiAppNameLicenseCheckoutResponse",
        }

        return self.api_client.call_api(
            "/v1alpha/license/server-licenses:ensure-checked-out",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )
