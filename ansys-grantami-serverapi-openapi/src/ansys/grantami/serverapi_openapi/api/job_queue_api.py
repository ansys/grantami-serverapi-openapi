"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Dict, List, Optional, Union  # noqa: F401
from . import ApiBase


if TYPE_CHECKING:
    from ..models import *


class JobQueueApi(ApiBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def v1alpha_job_queue_files_post(
        self,
        *,
        content_type: "Optional[str]" = None,
        content_disposition: "Optional[str]" = None,
        headers: "Optional[Dict[str, List[str]]]" = None,
        length: "Optional[int]" = None,
        name: "Optional[str]" = None,
        file_name: "Optional[str]" = None,
    ) -> "str":
        """Uploads an ephemeral file and returns an ID which can subsequently be used to refer to that file in a job creation request. Ephemeral files have a short lifespan  and should be used to provide file data to jobs only. They should not be used as file storage.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        content_type: str
        content_disposition: str
        headers: Dict[str, List[str]]
        length: int
        name: str
        file_name: str

        Returns
        -------
        str
        """
        data = self._v1alpha_job_queue_files_post_with_http_info(
            content_type,
            content_disposition,
            headers,
            length,
            name,
            file_name,
            _return_http_data_only=True,
        )
        return data  # type: ignore[return-value]

    def _v1alpha_job_queue_files_post_with_http_info(
        self,
        content_type: "Optional[str]" = None,
        content_disposition: "Optional[str]" = None,
        headers: "Optional[Dict[str, List[str]]]" = None,
        length: "Optional[int]" = None,
        name: "Optional[str]" = None,
        file_name: "Optional[str]" = None,
        **kwargs,
    ):
        all_params = [
            "content_type",
            "content_disposition",
            "headers",
            "length",
            "name",
            "file_name",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_job_queue_files_post"
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "content_type" in params and content_type is not None:
            form_params.append(("ContentType", params["content_type"]))
        if "content_disposition" in params and content_disposition is not None:
            form_params.append(("ContentDisposition", params["content_disposition"]))
        if "headers" in params and headers is not None:
            form_params.append(("Headers", params["headers"]))
        if "length" in params and length is not None:
            form_params.append(("Length", params["length"]))
        if "name" in params and name is not None:
            form_params.append(("Name", params["name"]))
        if "file_name" in params and file_name is not None:
            form_params.append(("FileName", params["file_name"]))

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        # HTTP header 'Content-Type'
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            ["multipart/form-data"]
        )

        response_type_map = {
            200: "str",
        }

        return self.api_client.call_api(
            "/v1alpha/job-queue/files",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_job_queue_jobs_delete(
        self, *, body: "Optional[List[str]]" = None
    ) -> "Union[List[str], None]":
        """Delete specified jobs.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        body: List[str]

        Returns
        -------
        Union[List[str], None]
        """
        data = self._v1alpha_job_queue_jobs_delete_with_http_info(
            body, _return_http_data_only=True
        )
        return data  # type: ignore[return-value]

    def _v1alpha_job_queue_jobs_delete_with_http_info(
        self, body: "Optional[List[str]]" = None, **kwargs
    ):
        all_params = [
            "body",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_job_queue_jobs_delete"
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params and body is not None:
            body_params = params["body"]
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        # HTTP header 'Content-Type'
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            [
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json",
            ]
        )

        response_type_map = {
            200: "list[str]",
            422: None,
            500: None,
        }

        return self.api_client.call_api(
            "/v1alpha/job-queue/jobs",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_job_queue_jobs_get(
        self,
        *,
        job_type: "Optional[str]" = None,
        status: "Optional[str]" = None,
        name_filter: "Optional[str]" = None,
        description_filter: "Optional[str]" = None,
        submitter_name_filter: "Optional[str]" = None,
        page_size: "Optional[int]" = None,
        page_number: "Optional[int]" = None,
    ) -> "GrantaServerApiAsyncJobsGetJobsResponse":
        """Get a list of jobs.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        job_type: str
        status: str
        name_filter: str
        description_filter: str
        submitter_name_filter: str
        page_size: int
        page_number: int

        Returns
        -------
        GrantaServerApiAsyncJobsGetJobsResponse
        """
        data = self._v1alpha_job_queue_jobs_get_with_http_info(
            job_type,
            status,
            name_filter,
            description_filter,
            submitter_name_filter,
            page_size,
            page_number,
            _return_http_data_only=True,
        )
        return data  # type: ignore[return-value]

    def _v1alpha_job_queue_jobs_get_with_http_info(
        self,
        job_type: "Optional[str]" = None,
        status: "Optional[str]" = None,
        name_filter: "Optional[str]" = None,
        description_filter: "Optional[str]" = None,
        submitter_name_filter: "Optional[str]" = None,
        page_size: "Optional[int]" = None,
        page_number: "Optional[int]" = None,
        **kwargs,
    ):
        all_params = [
            "job_type",
            "status",
            "name_filter",
            "description_filter",
            "submitter_name_filter",
            "page_size",
            "page_number",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_job_queue_jobs_get"
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "job_type" in params and job_type is not None:
            query_params.append(("jobType", params["job_type"]))
        if "status" in params and status is not None:
            query_params.append(("status", params["status"]))
        if "name_filter" in params and name_filter is not None:
            query_params.append(("nameFilter", params["name_filter"]))
        if "description_filter" in params and description_filter is not None:
            query_params.append(("descriptionFilter", params["description_filter"]))
        if "submitter_name_filter" in params and submitter_name_filter is not None:
            query_params.append(
                ("submitterNameFilter", params["submitter_name_filter"])
            )
        if "page_size" in params and page_size is not None:
            query_params.append(("pageSize", params["page_size"]))
        if "page_number" in params and page_number is not None:
            query_params.append(("pageNumber", params["page_number"]))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        response_type_map = {
            200: "GrantaServerApiAsyncJobsGetJobsResponse",
        }

        return self.api_client.call_api(
            "/v1alpha/job-queue/jobs",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_job_queue_jobs_id_delete(self, *, id: "str") -> "None":
        """Delete a job.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        id: str

        Returns
        -------
        None
        """
        data = self._v1alpha_job_queue_jobs_id_delete_with_http_info(
            id, _return_http_data_only=True
        )
        return data  # type: ignore[return-value]

    def _v1alpha_job_queue_jobs_id_delete_with_http_info(self, id: "str", **kwargs):
        all_params = [
            "id",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_job_queue_jobs_id_delete"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "id" is set
        if "id" not in params or params["id"] is None:
            raise ValueError(
                "Missing the required parameter 'id' when calling 'v1alpha_job_queue_jobs_id_delete'"
            )

        collection_formats = {}

        path_params = {}
        if "id" in params and id is not None:
            path_params["id"] = params["id"]

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        response_type_map = {
            200: None,
            204: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/job-queue/jobs/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_job_queue_jobs_id_get(
        self, *, id: "str"
    ) -> "Union[GrantaServerApiAsyncJobsJob, None]":
        """Get job by ID.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        id: str

        Returns
        -------
        Union[GrantaServerApiAsyncJobsJob, None]
        """
        data = self._v1alpha_job_queue_jobs_id_get_with_http_info(
            id, _return_http_data_only=True
        )
        return data  # type: ignore[return-value]

    def _v1alpha_job_queue_jobs_id_get_with_http_info(self, id: "str", **kwargs):
        all_params = [
            "id",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_job_queue_jobs_id_get"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "id" is set
        if "id" not in params or params["id"] is None:
            raise ValueError(
                "Missing the required parameter 'id' when calling 'v1alpha_job_queue_jobs_id_get'"
            )

        collection_formats = {}

        path_params = {}
        if "id" in params and id is not None:
            path_params["id"] = params["id"]

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        response_type_map = {
            200: "GrantaServerApiAsyncJobsJob",
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/job-queue/jobs/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_job_queue_jobs_id_outputs_get(
        self, *, id: "str"
    ) -> "Union[List[str], None]":
        """Get a job's output filenames.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        id: str

        Returns
        -------
        Union[List[str], None]
        """
        data = self._v1alpha_job_queue_jobs_id_outputs_get_with_http_info(
            id, _return_http_data_only=True
        )
        return data  # type: ignore[return-value]

    def _v1alpha_job_queue_jobs_id_outputs_get_with_http_info(
        self, id: "str", **kwargs
    ):
        all_params = [
            "id",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_job_queue_jobs_id_outputs_get"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "id" is set
        if "id" not in params or params["id"] is None:
            raise ValueError(
                "Missing the required parameter 'id' when calling 'v1alpha_job_queue_jobs_id_outputs_get'"
            )

        collection_formats = {}

        path_params = {}
        if "id" in params and id is not None:
            path_params["id"] = params["id"]

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        response_type_map = {
            200: "list[str]",
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/job-queue/jobs/{id}/outputs",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_job_queue_jobs_id_outputsexport_get(
        self, *, id: "str", file_name: "str"
    ) -> "Union[None, SystemIOStream]":
        """Retrieve a job output file.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        id: str
        file_name: str

        Returns
        -------
        Union[None, SystemIOStream]
        """
        data = self._v1alpha_job_queue_jobs_id_outputsexport_get_with_http_info(
            id, file_name, _return_http_data_only=True
        )
        return data  # type: ignore[return-value]

    def _v1alpha_job_queue_jobs_id_outputsexport_get_with_http_info(
        self, id: "str", file_name: "str", **kwargs
    ):
        all_params = [
            "id",
            "file_name",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_job_queue_jobs_id_outputsexport_get"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "id" is set
        if "id" not in params or params["id"] is None:
            raise ValueError(
                "Missing the required parameter 'id' when calling 'v1alpha_job_queue_jobs_id_outputsexport_get'"
            )
        # verify the required parameter "file_name" is set
        if "file_name" not in params or params["file_name"] is None:
            raise ValueError(
                "Missing the required parameter 'file_name' when calling 'v1alpha_job_queue_jobs_id_outputsexport_get'"
            )

        collection_formats = {}

        path_params = {}
        if "id" in params and id is not None:
            path_params["id"] = params["id"]

        query_params = []
        if "file_name" in params and file_name is not None:
            query_params.append(("fileName", params["file_name"]))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        response_type_map = {
            200: "SystemIOStream",
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/job-queue/jobs/{id}/outputs:export",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_job_queue_jobs_id_patch(
        self,
        *,
        id: "str",
        body: "Optional[GrantaServerApiAsyncJobsUpdateJobRequest]" = None,
    ) -> "Union[GrantaServerApiAsyncJobsJob, None]":
        """Update a job.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        id: str
        body: GrantaServerApiAsyncJobsUpdateJobRequest

        Returns
        -------
        Union[GrantaServerApiAsyncJobsJob, None]
        """
        data = self._v1alpha_job_queue_jobs_id_patch_with_http_info(
            id, body, _return_http_data_only=True
        )
        return data  # type: ignore[return-value]

    def _v1alpha_job_queue_jobs_id_patch_with_http_info(
        self,
        id: "str",
        body: "Optional[GrantaServerApiAsyncJobsUpdateJobRequest]" = None,
        **kwargs,
    ):
        all_params = [
            "id",
            "body",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_job_queue_jobs_id_patch"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "id" is set
        if "id" not in params or params["id"] is None:
            raise ValueError(
                "Missing the required parameter 'id' when calling 'v1alpha_job_queue_jobs_id_patch'"
            )

        collection_formats = {}

        path_params = {}
        if "id" in params and id is not None:
            path_params["id"] = params["id"]

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params and body is not None:
            body_params = params["body"]
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        # HTTP header 'Content-Type'
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            [
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json",
            ]
        )

        response_type_map = {
            200: "GrantaServerApiAsyncJobsJob",
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/job-queue/jobs/{id}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_job_queue_jobs_idmove_to_top_post(self, *, id: "str") -> "None":
        """Move a job to the top of the queue (actually sets the scheduled execution date to now, could be done with patch method).

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        id: str

        Returns
        -------
        None
        """
        data = self._v1alpha_job_queue_jobs_idmove_to_top_post_with_http_info(
            id, _return_http_data_only=True
        )
        return data  # type: ignore[return-value]

    def _v1alpha_job_queue_jobs_idmove_to_top_post_with_http_info(
        self, id: "str", **kwargs
    ):
        all_params = [
            "id",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_job_queue_jobs_idmove_to_top_post"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "id" is set
        if "id" not in params or params["id"] is None:
            raise ValueError(
                "Missing the required parameter 'id' when calling 'v1alpha_job_queue_jobs_idmove_to_top_post'"
            )

        collection_formats = {}

        path_params = {}
        if "id" in params and id is not None:
            path_params["id"] = params["id"]

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        response_type_map = {
            200: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/job-queue/jobs/{id}:move-to-top",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_job_queue_jobs_idresubmit_post(
        self,
        *,
        id: "str",
        body: "Optional[GrantaServerApiAsyncJobsResubmitJobRequest]" = None,
    ) -> "Union[GrantaServerApiAsyncJobsJob, None]":
        """Resubmit a job.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        id: str
        body: GrantaServerApiAsyncJobsResubmitJobRequest

        Returns
        -------
        Union[GrantaServerApiAsyncJobsJob, None]
        """
        data = self._v1alpha_job_queue_jobs_idresubmit_post_with_http_info(
            id, body, _return_http_data_only=True
        )
        return data  # type: ignore[return-value]

    def _v1alpha_job_queue_jobs_idresubmit_post_with_http_info(
        self,
        id: "str",
        body: "Optional[GrantaServerApiAsyncJobsResubmitJobRequest]" = None,
        **kwargs,
    ):
        all_params = [
            "id",
            "body",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_job_queue_jobs_idresubmit_post"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "id" is set
        if "id" not in params or params["id"] is None:
            raise ValueError(
                "Missing the required parameter 'id' when calling 'v1alpha_job_queue_jobs_idresubmit_post'"
            )

        collection_formats = {}

        path_params = {}
        if "id" in params and id is not None:
            path_params["id"] = params["id"]

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params and body is not None:
            body_params = params["body"]
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        # HTTP header 'Content-Type'
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            [
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json",
            ]
        )

        response_type_map = {
            200: "GrantaServerApiAsyncJobsJob",
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/job-queue/jobs/{id}:resubmit",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_job_queue_jobs_idretrieve_definition_get(
        self, *, id: "str"
    ) -> "Union[GrantaServerApiAsyncJobsCreateJobRequest, None]":
        """Get a job creation object based on an existing job.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        id: str

        Returns
        -------
        Union[GrantaServerApiAsyncJobsCreateJobRequest, None]
        """
        data = self._v1alpha_job_queue_jobs_idretrieve_definition_get_with_http_info(
            id, _return_http_data_only=True
        )
        return data  # type: ignore[return-value]

    def _v1alpha_job_queue_jobs_idretrieve_definition_get_with_http_info(
        self, id: "str", **kwargs
    ):
        all_params = [
            "id",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_job_queue_jobs_idretrieve_definition_get"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "id" is set
        if "id" not in params or params["id"] is None:
            raise ValueError(
                "Missing the required parameter 'id' when calling 'v1alpha_job_queue_jobs_idretrieve_definition_get'"
            )

        collection_formats = {}

        path_params = {}
        if "id" in params and id is not None:
            path_params["id"] = params["id"]

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        response_type_map = {
            200: "GrantaServerApiAsyncJobsCreateJobRequest",
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/job-queue/jobs/{id}:retrieve-definition",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_job_queue_jobs_post(
        self, *, body: "Optional[GrantaServerApiAsyncJobsCreateJobRequest]" = None
    ) -> "Union[GrantaServerApiAsyncJobsJob, None]":
        """Create a new job.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        body: GrantaServerApiAsyncJobsCreateJobRequest

        Returns
        -------
        Union[GrantaServerApiAsyncJobsJob, None]
        """
        data = self._v1alpha_job_queue_jobs_post_with_http_info(
            body, _return_http_data_only=True
        )
        return data  # type: ignore[return-value]

    def _v1alpha_job_queue_jobs_post_with_http_info(
        self,
        body: "Optional[GrantaServerApiAsyncJobsCreateJobRequest]" = None,
        **kwargs,
    ):
        all_params = [
            "body",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_job_queue_jobs_post"
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params and body is not None:
            body_params = params["body"]
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        # HTTP header 'Content-Type'
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            [
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json",
            ]
        )

        response_type_map = {
            200: "GrantaServerApiAsyncJobsJob",
            201: None,
        }

        return self.api_client.call_api(
            "/v1alpha/job-queue/jobs",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_job_queue_processing_configuration_get(
        self,
    ) -> "GrantaServerApiAsyncJobsProcessingConfig":
        """Get the processing configuration.

        This method makes a synchronous HTTP request.

        Returns
        -------
        GrantaServerApiAsyncJobsProcessingConfig
        """
        data = self._v1alpha_job_queue_processing_configuration_get_with_http_info(
            _return_http_data_only=True
        )
        return data  # type: ignore[return-value]

    def _v1alpha_job_queue_processing_configuration_get_with_http_info(self, **kwargs):
        all_params = ["_return_http_data_only", "_preload_content", "_request_timeout"]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_job_queue_processing_configuration_get"
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        response_type_map = {
            200: "GrantaServerApiAsyncJobsProcessingConfig",
        }

        return self.api_client.call_api(
            "/v1alpha/job-queue/processing-configuration",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )
