# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from . import ApiBase


class DatabaseApi(ApiBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def v1alpha_databases_database_key_standard_namesgenerate_integration_schema_post(self, database_key, **kwargs):  # noqa: E501
        """Generate an integration schema with attributes for each provided standard name in the given database. The user must be an Admin user for the database.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param list[str] body:
        :return: GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.v1alpha_databases_database_key_standard_namesgenerate_integration_schema_post_with_http_info(database_key, **kwargs)  # noqa: E501
        return data

    def v1alpha_databases_database_key_standard_namesgenerate_integration_schema_post_with_http_info(self, database_key, **kwargs):  # noqa: E501
        """Generate an integration schema with attributes for each provided standard name in the given database. The user must be an Admin user for the database.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param list[str] body:
        :return: GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier
        """

        all_params = ['database_key', 'body']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method v1alpha_databases_database_key_standard_namesgenerate_integration_schema_post".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_key' is set
        if ('database_key' not in params or
                params['database_key'] is None):
            raise ValueError("Missing the required parameter `database_key` when calling `v1alpha_databases_database_key_standard_namesgenerate_integration_schema_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_key' in params:
            path_params['database-key'] = params['database_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier',
            403: None,
            404: None,
        }
        
        return self.api_client.call_api(
            '/v1alpha/databases/{database-key}/standard-names:generate-integration-schema', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def v1alpha_databases_database_key_tables_table_identity_layout_layout_identitygenerate_integration_schema_get(self, database_key, table_identity, layout_identity, **kwargs):  # noqa: E501
        """Generate an integration schema from the attributes in the given layout. The user must be an Admin user for the database.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param int table_identity: (required)
        :param int layout_identity: (required)
        :return: GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.v1alpha_databases_database_key_tables_table_identity_layout_layout_identitygenerate_integration_schema_get_with_http_info(database_key, table_identity, layout_identity, **kwargs)  # noqa: E501
        return data

    def v1alpha_databases_database_key_tables_table_identity_layout_layout_identitygenerate_integration_schema_get_with_http_info(self, database_key, table_identity, layout_identity, **kwargs):  # noqa: E501
        """Generate an integration schema from the attributes in the given layout. The user must be an Admin user for the database.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param int table_identity: (required)
        :param int layout_identity: (required)
        :return: GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier
        """

        all_params = ['database_key', 'table_identity', 'layout_identity']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method v1alpha_databases_database_key_tables_table_identity_layout_layout_identitygenerate_integration_schema_get".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_key' is set
        if ('database_key' not in params or
                params['database_key'] is None):
            raise ValueError("Missing the required parameter `database_key` when calling `v1alpha_databases_database_key_tables_table_identity_layout_layout_identitygenerate_integration_schema_get`")  # noqa: E501
        # verify the required parameter 'table_identity' is set
        if ('table_identity' not in params or
                params['table_identity'] is None):
            raise ValueError("Missing the required parameter `table_identity` when calling `v1alpha_databases_database_key_tables_table_identity_layout_layout_identitygenerate_integration_schema_get`")  # noqa: E501
        # verify the required parameter 'layout_identity' is set
        if ('layout_identity' not in params or
                params['layout_identity'] is None):
            raise ValueError("Missing the required parameter `layout_identity` when calling `v1alpha_databases_database_key_tables_table_identity_layout_layout_identitygenerate_integration_schema_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_key' in params:
            path_params['database-key'] = params['database_key']  # noqa: E501
        if 'table_identity' in params:
            path_params['table-identity'] = params['table_identity']  # noqa: E501
        if 'layout_identity' in params:
            path_params['layout-identity'] = params['layout_identity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier',
            403: None,
            404: None,
        }
        
        return self.api_client.call_api(
            '/v1alpha/databases/{database-key}/tables/{table-identity}/layout/{layout-identity}:generate-integration-schema', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def v1alpha_databases_database_key_tables_table_identity_layout_layout_namegenerate_integration_schema_get(self, database_key, table_identity, layout_name, **kwargs):  # noqa: E501
        """Generate an integration schema from the attributes in the given layout. The user must be an Admin user for the database.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param int table_identity: (required)
        :param str layout_name: (required)
        :return: GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.v1alpha_databases_database_key_tables_table_identity_layout_layout_namegenerate_integration_schema_get_with_http_info(database_key, table_identity, layout_name, **kwargs)  # noqa: E501
        return data

    def v1alpha_databases_database_key_tables_table_identity_layout_layout_namegenerate_integration_schema_get_with_http_info(self, database_key, table_identity, layout_name, **kwargs):  # noqa: E501
        """Generate an integration schema from the attributes in the given layout. The user must be an Admin user for the database.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param int table_identity: (required)
        :param str layout_name: (required)
        :return: GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier
        """

        all_params = ['database_key', 'table_identity', 'layout_name']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method v1alpha_databases_database_key_tables_table_identity_layout_layout_namegenerate_integration_schema_get".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_key' is set
        if ('database_key' not in params or
                params['database_key'] is None):
            raise ValueError("Missing the required parameter `database_key` when calling `v1alpha_databases_database_key_tables_table_identity_layout_layout_namegenerate_integration_schema_get`")  # noqa: E501
        # verify the required parameter 'table_identity' is set
        if ('table_identity' not in params or
                params['table_identity'] is None):
            raise ValueError("Missing the required parameter `table_identity` when calling `v1alpha_databases_database_key_tables_table_identity_layout_layout_namegenerate_integration_schema_get`")  # noqa: E501
        # verify the required parameter 'layout_name' is set
        if ('layout_name' not in params or
                params['layout_name'] is None):
            raise ValueError("Missing the required parameter `layout_name` when calling `v1alpha_databases_database_key_tables_table_identity_layout_layout_namegenerate_integration_schema_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_key' in params:
            path_params['database-key'] = params['database_key']  # noqa: E501
        if 'table_identity' in params:
            path_params['table-identity'] = params['table_identity']  # noqa: E501
        if 'layout_name' in params:
            path_params['layout-name'] = params['layout_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier',
            403: None,
            404: None,
        }
        
        return self.api_client.call_api(
            '/v1alpha/databases/{database-key}/tables/{table-identity}/layout/{layout-name}:generate-integration-schema', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def v1alpha_databases_database_key_tables_table_identitygenerate_integration_schema_get(self, database_key, table_identity, **kwargs):  # noqa: E501
        """Generate an integration schema from the attributes in the given table. The user must be an Admin user for the database.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param int table_identity: (required)
        :return: GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.v1alpha_databases_database_key_tables_table_identitygenerate_integration_schema_get_with_http_info(database_key, table_identity, **kwargs)  # noqa: E501
        return data

    def v1alpha_databases_database_key_tables_table_identitygenerate_integration_schema_get_with_http_info(self, database_key, table_identity, **kwargs):  # noqa: E501
        """Generate an integration schema from the attributes in the given table. The user must be an Admin user for the database.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param int table_identity: (required)
        :return: GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier
        """

        all_params = ['database_key', 'table_identity']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method v1alpha_databases_database_key_tables_table_identitygenerate_integration_schema_get".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_key' is set
        if ('database_key' not in params or
                params['database_key'] is None):
            raise ValueError("Missing the required parameter `database_key` when calling `v1alpha_databases_database_key_tables_table_identitygenerate_integration_schema_get`")  # noqa: E501
        # verify the required parameter 'table_identity' is set
        if ('table_identity' not in params or
                params['table_identity'] is None):
            raise ValueError("Missing the required parameter `table_identity` when calling `v1alpha_databases_database_key_tables_table_identitygenerate_integration_schema_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_key' in params:
            path_params['database-key'] = params['database_key']  # noqa: E501
        if 'table_identity' in params:
            path_params['table-identity'] = params['table_identity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier',
            403: None,
            404: None,
        }
        
        return self.api_client.call_api(
            '/v1alpha/databases/{database-key}/tables/{table-identity}:generate-integration-schema', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def v1alpha_databases_database_key_tables_table_name_layout_layout_identitygenerate_integration_schema_get(self, database_key, table_name, layout_identity, **kwargs):  # noqa: E501
        """Generate an integration schema from the attributes in the given layout. The user must be an Admin user for the database.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param str table_name: (required)
        :param int layout_identity: (required)
        :return: GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.v1alpha_databases_database_key_tables_table_name_layout_layout_identitygenerate_integration_schema_get_with_http_info(database_key, table_name, layout_identity, **kwargs)  # noqa: E501
        return data

    def v1alpha_databases_database_key_tables_table_name_layout_layout_identitygenerate_integration_schema_get_with_http_info(self, database_key, table_name, layout_identity, **kwargs):  # noqa: E501
        """Generate an integration schema from the attributes in the given layout. The user must be an Admin user for the database.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param str table_name: (required)
        :param int layout_identity: (required)
        :return: GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier
        """

        all_params = ['database_key', 'table_name', 'layout_identity']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method v1alpha_databases_database_key_tables_table_name_layout_layout_identitygenerate_integration_schema_get".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_key' is set
        if ('database_key' not in params or
                params['database_key'] is None):
            raise ValueError("Missing the required parameter `database_key` when calling `v1alpha_databases_database_key_tables_table_name_layout_layout_identitygenerate_integration_schema_get`")  # noqa: E501
        # verify the required parameter 'table_name' is set
        if ('table_name' not in params or
                params['table_name'] is None):
            raise ValueError("Missing the required parameter `table_name` when calling `v1alpha_databases_database_key_tables_table_name_layout_layout_identitygenerate_integration_schema_get`")  # noqa: E501
        # verify the required parameter 'layout_identity' is set
        if ('layout_identity' not in params or
                params['layout_identity'] is None):
            raise ValueError("Missing the required parameter `layout_identity` when calling `v1alpha_databases_database_key_tables_table_name_layout_layout_identitygenerate_integration_schema_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_key' in params:
            path_params['database-key'] = params['database_key']  # noqa: E501
        if 'table_name' in params:
            path_params['table-name'] = params['table_name']  # noqa: E501
        if 'layout_identity' in params:
            path_params['layout-identity'] = params['layout_identity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier',
            403: None,
            404: None,
        }
        
        return self.api_client.call_api(
            '/v1alpha/databases/{database-key}/tables/{table-name}/layout/{layout-identity}:generate-integration-schema', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def v1alpha_databases_database_key_tables_table_name_layout_layout_namegenerate_integration_schema_get(self, database_key, table_name, layout_name, **kwargs):  # noqa: E501
        """Generate an integration schema from the attributes in the given layout. The user must be an Admin user for the database.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param str table_name: (required)
        :param str layout_name: (required)
        :return: GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.v1alpha_databases_database_key_tables_table_name_layout_layout_namegenerate_integration_schema_get_with_http_info(database_key, table_name, layout_name, **kwargs)  # noqa: E501
        return data

    def v1alpha_databases_database_key_tables_table_name_layout_layout_namegenerate_integration_schema_get_with_http_info(self, database_key, table_name, layout_name, **kwargs):  # noqa: E501
        """Generate an integration schema from the attributes in the given layout. The user must be an Admin user for the database.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param str table_name: (required)
        :param str layout_name: (required)
        :return: GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier
        """

        all_params = ['database_key', 'table_name', 'layout_name']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method v1alpha_databases_database_key_tables_table_name_layout_layout_namegenerate_integration_schema_get".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_key' is set
        if ('database_key' not in params or
                params['database_key'] is None):
            raise ValueError("Missing the required parameter `database_key` when calling `v1alpha_databases_database_key_tables_table_name_layout_layout_namegenerate_integration_schema_get`")  # noqa: E501
        # verify the required parameter 'table_name' is set
        if ('table_name' not in params or
                params['table_name'] is None):
            raise ValueError("Missing the required parameter `table_name` when calling `v1alpha_databases_database_key_tables_table_name_layout_layout_namegenerate_integration_schema_get`")  # noqa: E501
        # verify the required parameter 'layout_name' is set
        if ('layout_name' not in params or
                params['layout_name'] is None):
            raise ValueError("Missing the required parameter `layout_name` when calling `v1alpha_databases_database_key_tables_table_name_layout_layout_namegenerate_integration_schema_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_key' in params:
            path_params['database-key'] = params['database_key']  # noqa: E501
        if 'table_name' in params:
            path_params['table-name'] = params['table_name']  # noqa: E501
        if 'layout_name' in params:
            path_params['layout-name'] = params['layout_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier',
            403: None,
            404: None,
        }
        
        return self.api_client.call_api(
            '/v1alpha/databases/{database-key}/tables/{table-name}/layout/{layout-name}:generate-integration-schema', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def v1alpha_databases_database_key_tables_table_namegenerate_integration_schema_get(self, database_key, table_name, **kwargs):  # noqa: E501
        """Generate an integration schema from the attributes in the given table. The user must be an Admin user for the database.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param str table_name: (required)
        :return: GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.v1alpha_databases_database_key_tables_table_namegenerate_integration_schema_get_with_http_info(database_key, table_name, **kwargs)  # noqa: E501
        return data

    def v1alpha_databases_database_key_tables_table_namegenerate_integration_schema_get_with_http_info(self, database_key, table_name, **kwargs):  # noqa: E501
        """Generate an integration schema from the attributes in the given table. The user must be an Admin user for the database.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param str table_name: (required)
        :return: GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier
        """

        all_params = ['database_key', 'table_name']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method v1alpha_databases_database_key_tables_table_namegenerate_integration_schema_get".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_key' is set
        if ('database_key' not in params or
                params['database_key'] is None):
            raise ValueError("Missing the required parameter `database_key` when calling `v1alpha_databases_database_key_tables_table_namegenerate_integration_schema_get`")  # noqa: E501
        # verify the required parameter 'table_name' is set
        if ('table_name' not in params or
                params['table_name'] is None):
            raise ValueError("Missing the required parameter `table_name` when calling `v1alpha_databases_database_key_tables_table_namegenerate_integration_schema_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_key' in params:
            path_params['database-key'] = params['database_key']  # noqa: E501
        if 'table_name' in params:
            path_params['table-name'] = params['table_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier',
            403: None,
            404: None,
        }
        
        return self.api_client.call_api(
            '/v1alpha/databases/{database-key}/tables/{table-name}:generate-integration-schema', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def v1alpha_databases_database_keysearch_index_status_get(self, database_key, **kwargs):  # noqa: E501
        """v1alpha_databases_database_keysearch_index_status_get  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param bool include_diagnostics:
        :return: GrantaServerApiSearchIndexStatus
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.v1alpha_databases_database_keysearch_index_status_get_with_http_info(database_key, **kwargs)  # noqa: E501
        return data

    def v1alpha_databases_database_keysearch_index_status_get_with_http_info(self, database_key, **kwargs):  # noqa: E501
        """v1alpha_databases_database_keysearch_index_status_get  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str database_key: (required)
        :param bool include_diagnostics:
        :return: GrantaServerApiSearchIndexStatus
        """

        all_params = ['database_key', 'include_diagnostics']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method v1alpha_databases_database_keysearch_index_status_get".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_key' is set
        if ('database_key' not in params or
                params['database_key'] is None):
            raise ValueError("Missing the required parameter `database_key` when calling `v1alpha_databases_database_keysearch_index_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_key' in params:
            path_params['database-key'] = params['database_key']  # noqa: E501

        query_params = []
        if 'include_diagnostics' in params:
            query_params.append(('include-diagnostics', params['include_diagnostics']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'GrantaServerApiSearchIndexStatus',
        }
        
        return self.api_client.call_api(
            '/v1alpha/databases/{database-key}:search-index-status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def v1alpha_standard_namesgenerate_integration_schema_post(self, **kwargs):  # noqa: E501
        """Generate an integration schema with attributes for each provided standard name. This will include attribute from all loaded databases for which the user is an Admin.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param list[str] body:
        :return: GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.v1alpha_standard_namesgenerate_integration_schema_post_with_http_info(**kwargs)  # noqa: E501
        return data

    def v1alpha_standard_namesgenerate_integration_schema_post_with_http_info(self, **kwargs):  # noqa: E501
        """Generate an integration schema with attributes for each provided standard name. This will include attribute from all loaded databases for which the user is an Admin.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param list[str] body:
        :return: GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier
        """

        all_params = ['body']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method v1alpha_standard_namesgenerate_integration_schema_post".format(key)
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier',
            403: None,
            404: None,
        }
        
        return self.api_client.call_api(
            '/v1alpha/standard-names:generate-integration-schema', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)
