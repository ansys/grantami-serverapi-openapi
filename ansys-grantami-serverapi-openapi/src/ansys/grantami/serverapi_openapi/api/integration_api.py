# coding: utf-8

"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from . import ApiBase


class IntegrationApi(ApiBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def v1alpha_integration_schemas_get(self, **kwargs):  # noqa: E501
        """Lists the available integration schemas.  # noqa: E501

        This method makes a synchronous HTTP request.

        :return: list[str]
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.v1alpha_integration_schemas_get_with_http_info(**kwargs)  # noqa: E501
        return data

    def v1alpha_integration_schemas_get_with_http_info(self, **kwargs):  # noqa: E501
        """Lists the available integration schemas.  # noqa: E501

        This method makes a synchronous HTTP request.

        :return: list[str]
        """

        all_params = []  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method v1alpha_integration_schemas_get".format(key)
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'list[str]',
        }
        
        return self.api_client.call_api(
            '/v1alpha/integration-schemas', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def v1alpha_integration_schemas_post(self, **kwargs):  # noqa: E501
        """Add an integration schema. Will fail if the schema is not valid, or if the user is not both a global administrator and an administrator for the schema.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier body:
        :return: None
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.v1alpha_integration_schemas_post_with_http_info(**kwargs)  # noqa: E501
        return data

    def v1alpha_integration_schemas_post_with_http_info(self, **kwargs):  # noqa: E501
        """Add an integration schema. Will fail if the schema is not valid, or if the user is not both a global administrator and an administrator for the schema.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier body:
        :return: None
        """

        all_params = ['body']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method v1alpha_integration_schemas_post".format(key)
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: None,
            201: None,
            422: None,
        }
        
        return self.api_client.call_api(
            '/v1alpha/integration-schemas', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def v1alpha_integration_schemas_schema_attributes_get(self, schema, **kwargs):  # noqa: E501
        """Returns a list of the attributes defined in the integration schema.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str schema: The schema name. (required)
        :param bool include_implicit_attributes: Whether to add in the schema attributes derived from certain record properties (e.g. Record Name) that are implicitly in all integration schemas. False by default.
        :return: list[GrantaServerApiIntegrationSchemaAttribute]
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.v1alpha_integration_schemas_schema_attributes_get_with_http_info(schema, **kwargs)  # noqa: E501
        return data

    def v1alpha_integration_schemas_schema_attributes_get_with_http_info(self, schema, **kwargs):  # noqa: E501
        """Returns a list of the attributes defined in the integration schema.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str schema: The schema name. (required)
        :param bool include_implicit_attributes: Whether to add in the schema attributes derived from certain record properties (e.g. Record Name) that are implicitly in all integration schemas. False by default.
        :return: list[GrantaServerApiIntegrationSchemaAttribute]
        """

        all_params = ['schema', 'include_implicit_attributes']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method v1alpha_integration_schemas_schema_attributes_get".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'schema' is set
        if ('schema' not in params or
                params['schema'] is None):
            raise ValueError("Missing the required parameter `schema` when calling `v1alpha_integration_schemas_schema_attributes_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'schema' in params:
            path_params['schema'] = params['schema']  # noqa: E501

        query_params = []
        if 'include_implicit_attributes' in params:
            query_params.append(('includeImplicitAttributes', params['include_implicit_attributes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'list[GrantaServerApiIntegrationSchemaAttribute]',
            404: None,
        }
        
        return self.api_client.call_api(
            '/v1alpha/integration-schemas/{schema}/attributes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def v1alpha_integration_schemas_schema_delete(self, schema, **kwargs):  # noqa: E501
        """Delete an integration schema. Will fail if the schema does not exist, or if the user is not both a global administrator and an administrator for the schema.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str schema: (required)
        :return: None
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.v1alpha_integration_schemas_schema_delete_with_http_info(schema, **kwargs)  # noqa: E501
        return data

    def v1alpha_integration_schemas_schema_delete_with_http_info(self, schema, **kwargs):  # noqa: E501
        """Delete an integration schema. Will fail if the schema does not exist, or if the user is not both a global administrator and an administrator for the schema.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str schema: (required)
        :return: None
        """

        all_params = ['schema']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method v1alpha_integration_schemas_schema_delete".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'schema' is set
        if ('schema' not in params or
                params['schema'] is None):
            raise ValueError("Missing the required parameter `schema` when calling `v1alpha_integration_schemas_schema_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'schema' in params:
            path_params['schema'] = params['schema']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: None,
            404: None,
        }
        
        return self.api_client.call_api(
            '/v1alpha/integration-schemas/{schema}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def v1alpha_integration_schemas_schema_get(self, schema, **kwargs):  # noqa: E501
        """Returns the full object representing the integration schema.  Names and identities of source items will be populated if they can be found in the databases currently loaded in MI, otherwise just the GUIDs will be returned.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str schema: The schema name. (required)
        :param bool include_implicit_attributes: Whether to add in the schema attributes derived from certain record properties (e.g. Record Name) that are implicitly in all integration schemas. False by default.
        :return: GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.v1alpha_integration_schemas_schema_get_with_http_info(schema, **kwargs)  # noqa: E501
        return data

    def v1alpha_integration_schemas_schema_get_with_http_info(self, schema, **kwargs):  # noqa: E501
        """Returns the full object representing the integration schema.  Names and identities of source items will be populated if they can be found in the databases currently loaded in MI, otherwise just the GUIDs will be returned.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str schema: The schema name. (required)
        :param bool include_implicit_attributes: Whether to add in the schema attributes derived from certain record properties (e.g. Record Name) that are implicitly in all integration schemas. False by default.
        :return: GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier
        """

        all_params = ['schema', 'include_implicit_attributes']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method v1alpha_integration_schemas_schema_get".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'schema' is set
        if ('schema' not in params or
                params['schema'] is None):
            raise ValueError("Missing the required parameter `schema` when calling `v1alpha_integration_schemas_schema_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'schema' in params:
            path_params['schema'] = params['schema']  # noqa: E501

        query_params = []
        if 'include_implicit_attributes' in params:
            query_params.append(('includeImplicitAttributes', params['include_implicit_attributes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier',
            404: None,
        }
        
        return self.api_client.call_api(
            '/v1alpha/integration-schemas/{schema}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def v1alpha_integration_schemas_schema_put(self, schema, **kwargs):  # noqa: E501
        """Updates an integration schema, or adds a new one if there is not one with the same key already.  Will fail if the schema is not valid, or if the user is not both a global administrator and an administrator for the schema.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str schema: (required)
        :param GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier body:
        :return: None
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.v1alpha_integration_schemas_schema_put_with_http_info(schema, **kwargs)  # noqa: E501
        return data

    def v1alpha_integration_schemas_schema_put_with_http_info(self, schema, **kwargs):  # noqa: E501
        """Updates an integration schema, or adds a new one if there is not one with the same key already.  Will fail if the schema is not valid, or if the user is not both a global administrator and an administrator for the schema.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str schema: (required)
        :param GrantaServerApiIntegrationSchemaIntegrationSchemaOfGrantaServerApiObjectIdentifier body:
        :return: None
        """

        all_params = ['schema', 'body']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method v1alpha_integration_schemas_schema_put".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'schema' is set
        if ('schema' not in params or
                params['schema'] is None):
            raise ValueError("Missing the required parameter `schema` when calling `v1alpha_integration_schemas_schema_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'schema' in params:
            path_params['schema'] = params['schema']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: None,
            422: None,
        }
        
        return self.api_client.call_api(
            '/v1alpha/integration-schemas/{schema}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def v1alpha_integration_schemas_schema_sources_database_database_key_table_table_identity_get(self, schema, database_key, table_identity, **kwargs):  # noqa: E501
        """Returns a list of the schema source mapping from the given table. Will fail if the database is not loaded in MI.  Names and identities of source items will be populated.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str schema: (required)
        :param str database_key: (required)
        :param int table_identity: (required)
        :return: list[GrantaServerApiIntegrationSchemaSourceOfGrantaServerApiObjectIdentifier]
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.v1alpha_integration_schemas_schema_sources_database_database_key_table_table_identity_get_with_http_info(schema, database_key, table_identity, **kwargs)  # noqa: E501
        return data

    def v1alpha_integration_schemas_schema_sources_database_database_key_table_table_identity_get_with_http_info(self, schema, database_key, table_identity, **kwargs):  # noqa: E501
        """Returns a list of the schema source mapping from the given table. Will fail if the database is not loaded in MI.  Names and identities of source items will be populated.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str schema: (required)
        :param str database_key: (required)
        :param int table_identity: (required)
        :return: list[GrantaServerApiIntegrationSchemaSourceOfGrantaServerApiObjectIdentifier]
        """

        all_params = ['schema', 'database_key', 'table_identity']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method v1alpha_integration_schemas_schema_sources_database_database_key_table_table_identity_get".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'schema' is set
        if ('schema' not in params or
                params['schema'] is None):
            raise ValueError("Missing the required parameter `schema` when calling `v1alpha_integration_schemas_schema_sources_database_database_key_table_table_identity_get`")  # noqa: E501
        # verify the required parameter 'database_key' is set
        if ('database_key' not in params or
                params['database_key'] is None):
            raise ValueError("Missing the required parameter `database_key` when calling `v1alpha_integration_schemas_schema_sources_database_database_key_table_table_identity_get`")  # noqa: E501
        # verify the required parameter 'table_identity' is set
        if ('table_identity' not in params or
                params['table_identity'] is None):
            raise ValueError("Missing the required parameter `table_identity` when calling `v1alpha_integration_schemas_schema_sources_database_database_key_table_table_identity_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'schema' in params:
            path_params['schema'] = params['schema']  # noqa: E501
        if 'database_key' in params:
            path_params['database-key'] = params['database_key']  # noqa: E501
        if 'table_identity' in params:
            path_params['table-identity'] = params['table_identity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'list[GrantaServerApiIntegrationSchemaSourceOfGrantaServerApiObjectIdentifier]',
            404: None,
        }
        
        return self.api_client.call_api(
            '/v1alpha/integration-schemas/{schema}/sources/database/{database-key}/table/{table-identity}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def v1alpha_integration_schemas_schemasearch_index_status_get(self, schema, **kwargs):  # noqa: E501
        """v1alpha_integration_schemas_schemasearch_index_status_get  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str schema: (required)
        :param bool include_diagnostics:
        :return: GrantaServerApiIntegrationIntegrationSchemaStatus
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.v1alpha_integration_schemas_schemasearch_index_status_get_with_http_info(schema, **kwargs)  # noqa: E501
        return data

    def v1alpha_integration_schemas_schemasearch_index_status_get_with_http_info(self, schema, **kwargs):  # noqa: E501
        """v1alpha_integration_schemas_schemasearch_index_status_get  # noqa: E501

        This method makes a synchronous HTTP request.

        :param str schema: (required)
        :param bool include_diagnostics:
        :return: GrantaServerApiIntegrationIntegrationSchemaStatus
        """

        all_params = ['schema', 'include_diagnostics']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method v1alpha_integration_schemas_schemasearch_index_status_get".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'schema' is set
        if ('schema' not in params or
                params['schema'] is None):
            raise ValueError("Missing the required parameter `schema` when calling `v1alpha_integration_schemas_schemasearch_index_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'schema' in params:
            path_params['schema'] = params['schema']  # noqa: E501

        query_params = []
        if 'include_diagnostics' in params:
            query_params.append(('include-diagnostics', params['include_diagnostics']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'GrantaServerApiIntegrationIntegrationSchemaStatus',
        }
        
        return self.api_client.call_api(
            '/v1alpha/integration-schemas/{schema}:search-index-status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)

    def v1alpha_integration_schemassearch_index_status_get(self, **kwargs):  # noqa: E501
        """Returns the status of all available integration schemas.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param bool include_diagnostics:
        :return: dict(str, GrantaServerApiIntegrationIntegrationSchemaStatus)
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.v1alpha_integration_schemassearch_index_status_get_with_http_info(**kwargs)  # noqa: E501
        return data

    def v1alpha_integration_schemassearch_index_status_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the status of all available integration schemas.  # noqa: E501

        This method makes a synchronous HTTP request.

        :param bool include_diagnostics:
        :return: dict(str, GrantaServerApiIntegrationIntegrationSchemaStatus)
        """

        all_params = ['include_diagnostics']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method v1alpha_integration_schemassearch_index_status_get".format(key)
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_diagnostics' in params:
            query_params.append(('include-diagnostics', params['include_diagnostics']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_type_map = {
            200: 'dict(str, GrantaServerApiIntegrationIntegrationSchemaStatus)',
        }
        
        return self.api_client.call_api(
            '/v1alpha/integration-schemas:search-index-status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            response_type_map=response_type_map)
