"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import (
    TYPE_CHECKING,
    Any,
    Dict,
    BinaryIO,
    List,
    Optional,
    Union,
)  # noqa: F401
from . import ApiBase


if TYPE_CHECKING:
    import pathlib
    from ..models import *


class SchemaExportersApi(ApiBase):  # type: ignore[misc]
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def v1alpha_databases_database_key_exporters_folder_guid_delete(
        self, *, database_key: "str", folder_guid: "str"
    ) -> "None":
        """Delete an Exporter Folder.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        folder_guid: str

        Returns
        -------
        None
        """
        data = self._v1alpha_databases_database_key_exporters_folder_guid_delete_with_http_info(
            database_key, folder_guid, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _v1alpha_databases_database_key_exporters_folder_guid_delete_with_http_info(
        self, database_key: "str", folder_guid: "str", **kwargs: Any
    ) -> Any:
        all_params = [
            "database_key",
            "folder_guid",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_databases_database_key_exporters_folder_guid_delete"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'v1alpha_databases_database_key_exporters_folder_guid_delete'"
            )
        # verify the required parameter "folder_guid" is set
        if "folder_guid" not in params or params["folder_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'folder_guid' when calling 'v1alpha_databases_database_key_exporters_folder_guid_delete'"
            )

        collection_formats: Dict[str, Any] = {}

        path_params: Dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "folder_guid" in params and folder_guid is not None:
            path_params["folder-guid"] = params["folder_guid"]

        query_params: List[Any] = []

        header_params: Dict[str, Any] = {}

        form_params: List[Any] = []
        local_var_files: Dict[str, Any] = {}

        body_params = None

        response_type_map = {
            200: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/exporters/{folder-guid}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_databases_database_key_exporters_folder_guid_files_file_guid_delete(
        self, *, database_key: "str", folder_guid: "str", file_guid: "str"
    ) -> "None":
        """Delete an Exporter File.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        folder_guid: str
        file_guid: str

        Returns
        -------
        None
        """
        data = self._v1alpha_databases_database_key_exporters_folder_guid_files_file_guid_delete_with_http_info(
            database_key, folder_guid, file_guid, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _v1alpha_databases_database_key_exporters_folder_guid_files_file_guid_delete_with_http_info(
        self, database_key: "str", folder_guid: "str", file_guid: "str", **kwargs: Any
    ) -> Any:
        all_params = [
            "database_key",
            "folder_guid",
            "file_guid",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_databases_database_key_exporters_folder_guid_files_file_guid_delete"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'v1alpha_databases_database_key_exporters_folder_guid_files_file_guid_delete'"
            )
        # verify the required parameter "folder_guid" is set
        if "folder_guid" not in params or params["folder_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'folder_guid' when calling 'v1alpha_databases_database_key_exporters_folder_guid_files_file_guid_delete'"
            )
        # verify the required parameter "file_guid" is set
        if "file_guid" not in params or params["file_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'file_guid' when calling 'v1alpha_databases_database_key_exporters_folder_guid_files_file_guid_delete'"
            )

        collection_formats: Dict[str, Any] = {}

        path_params: Dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "folder_guid" in params and folder_guid is not None:
            path_params["folder-guid"] = params["folder_guid"]
        if "file_guid" in params and file_guid is not None:
            path_params["file-guid"] = params["file_guid"]

        query_params: List[Any] = []

        header_params: Dict[str, Any] = {}

        form_params: List[Any] = []
        local_var_files: Dict[str, Any] = {}

        body_params = None

        response_type_map = {
            200: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/exporters/{folder-guid}/files/{file-guid}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_databases_database_key_exporters_folder_guid_files_file_guid_get(
        self, *, database_key: "str", folder_guid: "str", file_guid: "str"
    ) -> "Union[GrantaServerApiSchemaFilesFileHeader, None]":
        """Get the header information for an Exporter File

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        folder_guid: str
        file_guid: str

        Returns
        -------
        Union[GrantaServerApiSchemaFilesFileHeader, None]
        """
        data = self._v1alpha_databases_database_key_exporters_folder_guid_files_file_guid_get_with_http_info(
            database_key, folder_guid, file_guid, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _v1alpha_databases_database_key_exporters_folder_guid_files_file_guid_get_with_http_info(
        self, database_key: "str", folder_guid: "str", file_guid: "str", **kwargs: Any
    ) -> Any:
        all_params = [
            "database_key",
            "folder_guid",
            "file_guid",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_databases_database_key_exporters_folder_guid_files_file_guid_get"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'v1alpha_databases_database_key_exporters_folder_guid_files_file_guid_get'"
            )
        # verify the required parameter "folder_guid" is set
        if "folder_guid" not in params or params["folder_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'folder_guid' when calling 'v1alpha_databases_database_key_exporters_folder_guid_files_file_guid_get'"
            )
        # verify the required parameter "file_guid" is set
        if "file_guid" not in params or params["file_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'file_guid' when calling 'v1alpha_databases_database_key_exporters_folder_guid_files_file_guid_get'"
            )

        collection_formats: Dict[str, Any] = {}

        path_params: Dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "folder_guid" in params and folder_guid is not None:
            path_params["folder-guid"] = params["folder_guid"]
        if "file_guid" in params and file_guid is not None:
            path_params["file-guid"] = params["file_guid"]

        query_params: List[Any] = []

        header_params: Dict[str, Any] = {}

        form_params: List[Any] = []
        local_var_files: Dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        response_type_map = {
            200: "GrantaServerApiSchemaFilesFileHeader",
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/exporters/{folder-guid}/files/{file-guid}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_databases_database_key_exporters_folder_guid_files_file_guid_patch(
        self,
        *,
        database_key: "str",
        folder_guid: "str",
        file_guid: "str",
        body: "Optional[GrantaServerApiSchemaFilesUpdateFile]" = None,
    ) -> "Union[GrantaServerApiSchemaFilesFileHeader, None]":
        """Update an existing Exporter File.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        folder_guid: str
        file_guid: str
        body: GrantaServerApiSchemaFilesUpdateFile

        Returns
        -------
        Union[GrantaServerApiSchemaFilesFileHeader, None]
        """
        data = self._v1alpha_databases_database_key_exporters_folder_guid_files_file_guid_patch_with_http_info(
            database_key, folder_guid, file_guid, body, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _v1alpha_databases_database_key_exporters_folder_guid_files_file_guid_patch_with_http_info(
        self,
        database_key: "str",
        folder_guid: "str",
        file_guid: "str",
        body: "Optional[GrantaServerApiSchemaFilesUpdateFile]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "folder_guid",
            "file_guid",
            "body",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_databases_database_key_exporters_folder_guid_files_file_guid_patch"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'v1alpha_databases_database_key_exporters_folder_guid_files_file_guid_patch'"
            )
        # verify the required parameter "folder_guid" is set
        if "folder_guid" not in params or params["folder_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'folder_guid' when calling 'v1alpha_databases_database_key_exporters_folder_guid_files_file_guid_patch'"
            )
        # verify the required parameter "file_guid" is set
        if "file_guid" not in params or params["file_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'file_guid' when calling 'v1alpha_databases_database_key_exporters_folder_guid_files_file_guid_patch'"
            )

        collection_formats: Dict[str, Any] = {}

        path_params: Dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "folder_guid" in params and folder_guid is not None:
            path_params["folder-guid"] = params["folder_guid"]
        if "file_guid" in params and file_guid is not None:
            path_params["file-guid"] = params["file_guid"]

        query_params: List[Any] = []

        header_params: Dict[str, Any] = {}

        form_params: List[Any] = []
        local_var_files: Dict[str, Any] = {}

        body_params = None
        if "body" in params and body is not None:
            body_params = params["body"]
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        # HTTP header 'Content-Type'
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            [
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json",
            ]
        )

        response_type_map = {
            200: "GrantaServerApiSchemaFilesFileHeader",
            400: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/exporters/{folder-guid}/files/{file-guid}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_databases_database_key_exporters_folder_guid_files_file_guidexport_get(
        self, *, database_key: "str", folder_guid: "str", file_guid: "str"
    ) -> "None":
        """Get Exporter File as a file

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        folder_guid: str
        file_guid: str

        Returns
        -------
        None
        """
        data = self._v1alpha_databases_database_key_exporters_folder_guid_files_file_guidexport_get_with_http_info(
            database_key, folder_guid, file_guid, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _v1alpha_databases_database_key_exporters_folder_guid_files_file_guidexport_get_with_http_info(
        self, database_key: "str", folder_guid: "str", file_guid: "str", **kwargs: Any
    ) -> Any:
        all_params = [
            "database_key",
            "folder_guid",
            "file_guid",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_databases_database_key_exporters_folder_guid_files_file_guidexport_get"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'v1alpha_databases_database_key_exporters_folder_guid_files_file_guidexport_get'"
            )
        # verify the required parameter "folder_guid" is set
        if "folder_guid" not in params or params["folder_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'folder_guid' when calling 'v1alpha_databases_database_key_exporters_folder_guid_files_file_guidexport_get'"
            )
        # verify the required parameter "file_guid" is set
        if "file_guid" not in params or params["file_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'file_guid' when calling 'v1alpha_databases_database_key_exporters_folder_guid_files_file_guidexport_get'"
            )

        collection_formats: Dict[str, Any] = {}

        path_params: Dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "folder_guid" in params and folder_guid is not None:
            path_params["folder-guid"] = params["folder_guid"]
        if "file_guid" in params and file_guid is not None:
            path_params["file-guid"] = params["file_guid"]

        query_params: List[Any] = []

        header_params: Dict[str, Any] = {}

        form_params: List[Any] = []
        local_var_files: Dict[str, Any] = {}

        body_params = None

        response_type_map = {
            200: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/exporters/{folder-guid}/files/{file-guid}:export",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_databases_database_key_exporters_folder_guid_files_file_guidmove_post(
        self,
        *,
        database_key: "str",
        folder_guid: "str",
        file_guid: "str",
        body: "Optional[GrantaServerApiSchemaFilesMoveFile]" = None,
    ) -> "Union[GrantaServerApiSchemaFilesFileHeader, None]":
        """Move an existing Exporter File.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        folder_guid: str
        file_guid: str
        body: GrantaServerApiSchemaFilesMoveFile

        Returns
        -------
        Union[GrantaServerApiSchemaFilesFileHeader, None]
        """
        data = self._v1alpha_databases_database_key_exporters_folder_guid_files_file_guidmove_post_with_http_info(
            database_key, folder_guid, file_guid, body, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _v1alpha_databases_database_key_exporters_folder_guid_files_file_guidmove_post_with_http_info(
        self,
        database_key: "str",
        folder_guid: "str",
        file_guid: "str",
        body: "Optional[GrantaServerApiSchemaFilesMoveFile]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "folder_guid",
            "file_guid",
            "body",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_databases_database_key_exporters_folder_guid_files_file_guidmove_post"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'v1alpha_databases_database_key_exporters_folder_guid_files_file_guidmove_post'"
            )
        # verify the required parameter "folder_guid" is set
        if "folder_guid" not in params or params["folder_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'folder_guid' when calling 'v1alpha_databases_database_key_exporters_folder_guid_files_file_guidmove_post'"
            )
        # verify the required parameter "file_guid" is set
        if "file_guid" not in params or params["file_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'file_guid' when calling 'v1alpha_databases_database_key_exporters_folder_guid_files_file_guidmove_post'"
            )

        collection_formats: Dict[str, Any] = {}

        path_params: Dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "folder_guid" in params and folder_guid is not None:
            path_params["folder-guid"] = params["folder_guid"]
        if "file_guid" in params and file_guid is not None:
            path_params["file-guid"] = params["file_guid"]

        query_params: List[Any] = []

        header_params: Dict[str, Any] = {}

        form_params: List[Any] = []
        local_var_files: Dict[str, Any] = {}

        body_params = None
        if "body" in params and body is not None:
            body_params = params["body"]
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        # HTTP header 'Content-Type'
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            [
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json",
            ]
        )

        response_type_map = {
            200: "GrantaServerApiSchemaFilesFileHeader",
            400: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/exporters/{folder-guid}/files/{file-guid}:move",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_databases_database_key_exporters_folder_guid_files_get(
        self, *, database_key: "str", folder_guid: "str"
    ) -> "Union[GrantaServerApiSchemaFilesFilesInfo, None]":
        """Get the Exporter Files in a Folder

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        folder_guid: str

        Returns
        -------
        Union[GrantaServerApiSchemaFilesFilesInfo, None]
        """
        data = self._v1alpha_databases_database_key_exporters_folder_guid_files_get_with_http_info(
            database_key, folder_guid, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _v1alpha_databases_database_key_exporters_folder_guid_files_get_with_http_info(
        self, database_key: "str", folder_guid: "str", **kwargs: Any
    ) -> Any:
        all_params = [
            "database_key",
            "folder_guid",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_databases_database_key_exporters_folder_guid_files_get"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'v1alpha_databases_database_key_exporters_folder_guid_files_get'"
            )
        # verify the required parameter "folder_guid" is set
        if "folder_guid" not in params or params["folder_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'folder_guid' when calling 'v1alpha_databases_database_key_exporters_folder_guid_files_get'"
            )

        collection_formats: Dict[str, Any] = {}

        path_params: Dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "folder_guid" in params and folder_guid is not None:
            path_params["folder-guid"] = params["folder_guid"]

        query_params: List[Any] = []

        header_params: Dict[str, Any] = {}

        form_params: List[Any] = []
        local_var_files: Dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        response_type_map = {
            200: "GrantaServerApiSchemaFilesFilesInfo",
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/exporters/{folder-guid}/files",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_databases_database_key_exporters_folder_guid_files_post(
        self,
        *,
        database_key: "str",
        folder_guid: "str",
        file: "Optional[Union[BinaryIO, pathlib.Path]]" = None,
        description: "Optional[str]" = None,
    ) -> "Union[GrantaServerApiSchemaFilesFileHeader, None]":
        """Create a new Exporter File.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        folder_guid: str
        file: Union[BinaryIO, pathlib.Path]
        description: str

        Returns
        -------
        Union[GrantaServerApiSchemaFilesFileHeader, None]
        """
        data = self._v1alpha_databases_database_key_exporters_folder_guid_files_post_with_http_info(
            database_key, folder_guid, file, description, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _v1alpha_databases_database_key_exporters_folder_guid_files_post_with_http_info(
        self,
        database_key: "str",
        folder_guid: "str",
        file: "Optional[Union[BinaryIO, pathlib.Path]]" = None,
        description: "Optional[str]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "folder_guid",
            "file",
            "description",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_databases_database_key_exporters_folder_guid_files_post"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'v1alpha_databases_database_key_exporters_folder_guid_files_post'"
            )
        # verify the required parameter "folder_guid" is set
        if "folder_guid" not in params or params["folder_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'folder_guid' when calling 'v1alpha_databases_database_key_exporters_folder_guid_files_post'"
            )

        collection_formats: Dict[str, Any] = {}

        path_params: Dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "folder_guid" in params and folder_guid is not None:
            path_params["folder-guid"] = params["folder_guid"]

        query_params: List[Any] = []

        header_params: Dict[str, Any] = {}

        form_params: List[Any] = []
        local_var_files: Dict[str, Any] = {}
        if "file" in params and file is not None:
            local_var_files["file"] = params["file"]
        if "description" in params and description is not None:
            form_params.append(("description", params["description"]))

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        # multipart/form-data request detected. Content-Type header will be
        # populated by openapi-common based on request content.

        response_type_map = {
            201: "GrantaServerApiSchemaFilesFileHeader",
            400: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/exporters/{folder-guid}/files",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_databases_database_key_exporters_folder_guid_get(
        self, *, database_key: "str", folder_guid: "str"
    ) -> "Union[GrantaServerApiSchemaFilesFolder, None]":
        """Get Exporters Folder

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        folder_guid: str

        Returns
        -------
        Union[GrantaServerApiSchemaFilesFolder, None]
        """
        data = self._v1alpha_databases_database_key_exporters_folder_guid_get_with_http_info(
            database_key, folder_guid, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _v1alpha_databases_database_key_exporters_folder_guid_get_with_http_info(
        self, database_key: "str", folder_guid: "str", **kwargs: Any
    ) -> Any:
        all_params = [
            "database_key",
            "folder_guid",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_databases_database_key_exporters_folder_guid_get"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'v1alpha_databases_database_key_exporters_folder_guid_get'"
            )
        # verify the required parameter "folder_guid" is set
        if "folder_guid" not in params or params["folder_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'folder_guid' when calling 'v1alpha_databases_database_key_exporters_folder_guid_get'"
            )

        collection_formats: Dict[str, Any] = {}

        path_params: Dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "folder_guid" in params and folder_guid is not None:
            path_params["folder-guid"] = params["folder_guid"]

        query_params: List[Any] = []

        header_params: Dict[str, Any] = {}

        form_params: List[Any] = []
        local_var_files: Dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        response_type_map = {
            200: "GrantaServerApiSchemaFilesFolder",
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/exporters/{folder-guid}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_databases_database_key_exporters_folder_guid_patch(
        self,
        *,
        database_key: "str",
        folder_guid: "str",
        body: "Optional[GrantaServerApiSchemaFilesUpdateFolder]" = None,
    ) -> "Union[GrantaServerApiSchemaFilesFolder, None]":
        """Update an existing Exporters Folder.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        folder_guid: str
        body: GrantaServerApiSchemaFilesUpdateFolder

        Returns
        -------
        Union[GrantaServerApiSchemaFilesFolder, None]
        """
        data = self._v1alpha_databases_database_key_exporters_folder_guid_patch_with_http_info(
            database_key, folder_guid, body, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _v1alpha_databases_database_key_exporters_folder_guid_patch_with_http_info(
        self,
        database_key: "str",
        folder_guid: "str",
        body: "Optional[GrantaServerApiSchemaFilesUpdateFolder]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "folder_guid",
            "body",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_databases_database_key_exporters_folder_guid_patch"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'v1alpha_databases_database_key_exporters_folder_guid_patch'"
            )
        # verify the required parameter "folder_guid" is set
        if "folder_guid" not in params or params["folder_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'folder_guid' when calling 'v1alpha_databases_database_key_exporters_folder_guid_patch'"
            )

        collection_formats: Dict[str, Any] = {}

        path_params: Dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "folder_guid" in params and folder_guid is not None:
            path_params["folder-guid"] = params["folder_guid"]

        query_params: List[Any] = []

        header_params: Dict[str, Any] = {}

        form_params: List[Any] = []
        local_var_files: Dict[str, Any] = {}

        body_params = None
        if "body" in params and body is not None:
            body_params = params["body"]
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        # HTTP header 'Content-Type'
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            [
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json",
            ]
        )

        response_type_map = {
            200: "GrantaServerApiSchemaFilesFolder",
            400: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/exporters/{folder-guid}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_databases_database_key_exporters_folder_guidchild_folders_get(
        self, *, database_key: "str", folder_guid: "str"
    ) -> "Union[GrantaServerApiSchemaFilesFoldersInfo, None]":
        """Get Child Exporters Folders

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        folder_guid: str

        Returns
        -------
        Union[GrantaServerApiSchemaFilesFoldersInfo, None]
        """
        data = self._v1alpha_databases_database_key_exporters_folder_guidchild_folders_get_with_http_info(
            database_key, folder_guid, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _v1alpha_databases_database_key_exporters_folder_guidchild_folders_get_with_http_info(
        self, database_key: "str", folder_guid: "str", **kwargs: Any
    ) -> Any:
        all_params = [
            "database_key",
            "folder_guid",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_databases_database_key_exporters_folder_guidchild_folders_get"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'v1alpha_databases_database_key_exporters_folder_guidchild_folders_get'"
            )
        # verify the required parameter "folder_guid" is set
        if "folder_guid" not in params or params["folder_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'folder_guid' when calling 'v1alpha_databases_database_key_exporters_folder_guidchild_folders_get'"
            )

        collection_formats: Dict[str, Any] = {}

        path_params: Dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "folder_guid" in params and folder_guid is not None:
            path_params["folder-guid"] = params["folder_guid"]

        query_params: List[Any] = []

        header_params: Dict[str, Any] = {}

        form_params: List[Any] = []
        local_var_files: Dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        response_type_map = {
            200: "GrantaServerApiSchemaFilesFoldersInfo",
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/exporters/{folder-guid}:child-folders",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_databases_database_key_exporters_folder_guidmove_post(
        self,
        *,
        database_key: "str",
        folder_guid: "str",
        body: "Optional[GrantaServerApiSchemaFilesMoveFolder]" = None,
    ) -> "Union[GrantaServerApiSchemaFilesFolder, None]":
        """Move an existing Exporter Folder.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        folder_guid: str
        body: GrantaServerApiSchemaFilesMoveFolder

        Returns
        -------
        Union[GrantaServerApiSchemaFilesFolder, None]
        """
        data = self._v1alpha_databases_database_key_exporters_folder_guidmove_post_with_http_info(
            database_key, folder_guid, body, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _v1alpha_databases_database_key_exporters_folder_guidmove_post_with_http_info(
        self,
        database_key: "str",
        folder_guid: "str",
        body: "Optional[GrantaServerApiSchemaFilesMoveFolder]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "folder_guid",
            "body",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_databases_database_key_exporters_folder_guidmove_post"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'v1alpha_databases_database_key_exporters_folder_guidmove_post'"
            )
        # verify the required parameter "folder_guid" is set
        if "folder_guid" not in params or params["folder_guid"] is None:
            raise ValueError(
                "Missing the required parameter 'folder_guid' when calling 'v1alpha_databases_database_key_exporters_folder_guidmove_post'"
            )

        collection_formats: Dict[str, Any] = {}

        path_params: Dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]
        if "folder_guid" in params and folder_guid is not None:
            path_params["folder-guid"] = params["folder_guid"]

        query_params: List[Any] = []

        header_params: Dict[str, Any] = {}

        form_params: List[Any] = []
        local_var_files: Dict[str, Any] = {}

        body_params = None
        if "body" in params and body is not None:
            body_params = params["body"]
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        # HTTP header 'Content-Type'
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            [
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json",
            ]
        )

        response_type_map = {
            200: "GrantaServerApiSchemaFilesFolder",
            400: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/exporters/{folder-guid}:move",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_databases_database_key_exporters_get(
        self, *, database_key: "str"
    ) -> "Union[GrantaServerApiSchemaFilesFoldersInfo, None]":
        """Get All Exporter Folders

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str

        Returns
        -------
        Union[GrantaServerApiSchemaFilesFoldersInfo, None]
        """
        data = self._v1alpha_databases_database_key_exporters_get_with_http_info(
            database_key, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _v1alpha_databases_database_key_exporters_get_with_http_info(
        self, database_key: "str", **kwargs: Any
    ) -> Any:
        all_params = [
            "database_key",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_databases_database_key_exporters_get"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'v1alpha_databases_database_key_exporters_get'"
            )

        collection_formats: Dict[str, Any] = {}

        path_params: Dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]

        query_params: List[Any] = []

        header_params: Dict[str, Any] = {}

        form_params: List[Any] = []
        local_var_files: Dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        response_type_map = {
            200: "GrantaServerApiSchemaFilesFoldersInfo",
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/exporters",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_databases_database_key_exporters_post(
        self,
        *,
        database_key: "str",
        body: "Optional[GrantaServerApiSchemaFilesCreateFolder]" = None,
    ) -> "Union[GrantaServerApiSchemaFilesFolder, None]":
        """Create a new Exporters Folder.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str
        body: GrantaServerApiSchemaFilesCreateFolder

        Returns
        -------
        Union[GrantaServerApiSchemaFilesFolder, None]
        """
        data = self._v1alpha_databases_database_key_exporters_post_with_http_info(
            database_key, body, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _v1alpha_databases_database_key_exporters_post_with_http_info(
        self,
        database_key: "str",
        body: "Optional[GrantaServerApiSchemaFilesCreateFolder]" = None,
        **kwargs: Any,
    ) -> Any:
        all_params = [
            "database_key",
            "body",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_databases_database_key_exporters_post"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'v1alpha_databases_database_key_exporters_post'"
            )

        collection_formats: Dict[str, Any] = {}

        path_params: Dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]

        query_params: List[Any] = []

        header_params: Dict[str, Any] = {}

        form_params: List[Any] = []
        local_var_files: Dict[str, Any] = {}

        body_params = None
        if "body" in params and body is not None:
            body_params = params["body"]
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        # HTTP header 'Content-Type'
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            [
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json",
            ]
        )

        response_type_map = {
            201: "GrantaServerApiSchemaFilesFolder",
            400: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/exporters",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_databases_database_key_exportersre_fetch_post(
        self, *, database_key: "str"
    ) -> "Union[GrantaServerApiSchemaFilesExporterRefetchInfo, None]":
        """Re-fetch the Exporter Files.

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str

        Returns
        -------
        Union[GrantaServerApiSchemaFilesExporterRefetchInfo, None]
        """
        data = (
            self._v1alpha_databases_database_key_exportersre_fetch_post_with_http_info(
                database_key, _return_http_data_only=True
            )
        )
        return data  # type: ignore[no-any-return]

    def _v1alpha_databases_database_key_exportersre_fetch_post_with_http_info(
        self, database_key: "str", **kwargs: Any
    ) -> Any:
        all_params = [
            "database_key",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_databases_database_key_exportersre_fetch_post"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'v1alpha_databases_database_key_exportersre_fetch_post'"
            )

        collection_formats: Dict[str, Any] = {}

        path_params: Dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]

        query_params: List[Any] = []

        header_params: Dict[str, Any] = {}

        form_params: List[Any] = []
        local_var_files: Dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        response_type_map = {
            200: "GrantaServerApiSchemaFilesExporterRefetchInfo",
            400: None,
            403: None,
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/exporters:re-fetch",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )

    def v1alpha_databases_database_key_exportersroot_folder_get(
        self, *, database_key: "str"
    ) -> "Union[GrantaServerApiSchemaFilesFolder, None]":
        """Get Root Exporters Folder

        This method makes a synchronous HTTP request.

        Parameters
        ----------
        database_key: str

        Returns
        -------
        Union[GrantaServerApiSchemaFilesFolder, None]
        """
        data = self._v1alpha_databases_database_key_exportersroot_folder_get_with_http_info(
            database_key, _return_http_data_only=True
        )
        return data  # type: ignore[no-any-return]

    def _v1alpha_databases_database_key_exportersroot_folder_get_with_http_info(
        self, database_key: "str", **kwargs: Any
    ) -> Any:
        all_params = [
            "database_key",
            "_return_http_data_only",
            "_preload_content",
            "_request_timeout",
        ]

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method v1alpha_databases_database_key_exportersroot_folder_get"
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "database_key" is set
        if "database_key" not in params or params["database_key"] is None:
            raise ValueError(
                "Missing the required parameter 'database_key' when calling 'v1alpha_databases_database_key_exportersroot_folder_get'"
            )

        collection_formats: Dict[str, Any] = {}

        path_params: Dict[str, Any] = {}
        if "database_key" in params and database_key is not None:
            path_params["database-key"] = params["database_key"]

        query_params: List[Any] = []

        header_params: Dict[str, Any] = {}

        form_params: List[Any] = []
        local_var_files: Dict[str, Any] = {}

        body_params = None
        # HTTP header 'Accept'
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/plain", "application/json", "text/json"]
        )

        response_type_map = {
            200: "GrantaServerApiSchemaFilesFolder",
            404: None,
        }

        return self.api_client.call_api(
            "/v1alpha/databases/{database-key}/exporters:root-folder",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
            response_type_map=response_type_map,
        )
