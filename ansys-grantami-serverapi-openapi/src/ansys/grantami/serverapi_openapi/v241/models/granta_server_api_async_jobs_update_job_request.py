"""
    MI Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, Dict, List, Optional  # noqa: F401

from . import ModelBase


if TYPE_CHECKING:
    from . import *


class GrantaServerApiAsyncJobsUpdateJobRequest(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types = {
        "description": "str",
        "name": "str",
        "scheduled_execution_date": "datetime",
        "status": "GrantaServerApiAsyncJobsJobStatus",
    }

    attribute_map = {
        "description": "description",
        "name": "name",
        "scheduled_execution_date": "scheduledExecutionDate",
        "status": "status",
    }

    subtype_mapping = {
        "status": "GrantaServerApiAsyncJobsJobStatus",
    }

    discriminator = None

    def __init__(
        self,
        *,
        description: "Optional[str]" = None,
        name: "Optional[str]" = None,
        scheduled_execution_date: "Optional[datetime]" = None,
        status: "Optional[GrantaServerApiAsyncJobsJobStatus]" = None,
    ) -> None:
        """GrantaServerApiAsyncJobsUpdateJobRequest - a model defined in Swagger

        Parameters
        ----------
            description: str, optional
            name: str, optional
            scheduled_execution_date: datetime, optional
            status: GrantaServerApiAsyncJobsJobStatus, optional
        """
        self._name = None
        self._description = None
        self._scheduled_execution_date = None
        self._status = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if scheduled_execution_date is not None:
            self.scheduled_execution_date = scheduled_execution_date
        if status is not None:
            self.status = status

    @property
    def name(self) -> "str":
        """Gets the name of this GrantaServerApiAsyncJobsUpdateJobRequest.

        Returns
        -------
        str
            The name of this GrantaServerApiAsyncJobsUpdateJobRequest.
        """
        return self._name

    @name.setter
    def name(self, name: "str") -> None:
        """Sets the name of this GrantaServerApiAsyncJobsUpdateJobRequest.

        Parameters
        ----------
        name: str
            The name of this GrantaServerApiAsyncJobsUpdateJobRequest.
        """
        self._name = name

    @property
    def description(self) -> "str":
        """Gets the description of this GrantaServerApiAsyncJobsUpdateJobRequest.

        Returns
        -------
        str
            The description of this GrantaServerApiAsyncJobsUpdateJobRequest.
        """
        return self._description

    @description.setter
    def description(self, description: "str") -> None:
        """Sets the description of this GrantaServerApiAsyncJobsUpdateJobRequest.

        Parameters
        ----------
        description: str
            The description of this GrantaServerApiAsyncJobsUpdateJobRequest.
        """
        self._description = description

    @property
    def scheduled_execution_date(self) -> "datetime":
        """Gets the scheduled_execution_date of this GrantaServerApiAsyncJobsUpdateJobRequest.

        Returns
        -------
        datetime
            The scheduled_execution_date of this GrantaServerApiAsyncJobsUpdateJobRequest.
        """
        return self._scheduled_execution_date

    @scheduled_execution_date.setter
    def scheduled_execution_date(self, scheduled_execution_date: "datetime") -> None:
        """Sets the scheduled_execution_date of this GrantaServerApiAsyncJobsUpdateJobRequest.

        Parameters
        ----------
        scheduled_execution_date: datetime
            The scheduled_execution_date of this GrantaServerApiAsyncJobsUpdateJobRequest.
        """
        self._scheduled_execution_date = scheduled_execution_date

    @property
    def status(self) -> "GrantaServerApiAsyncJobsJobStatus":
        """Gets the status of this GrantaServerApiAsyncJobsUpdateJobRequest.

        Returns
        -------
        GrantaServerApiAsyncJobsJobStatus
            The status of this GrantaServerApiAsyncJobsUpdateJobRequest.
        """
        return self._status

    @status.setter
    def status(self, status: "GrantaServerApiAsyncJobsJobStatus") -> None:
        """Sets the status of this GrantaServerApiAsyncJobsUpdateJobRequest.

        Parameters
        ----------
        status: GrantaServerApiAsyncJobsJobStatus
            The status of this GrantaServerApiAsyncJobsUpdateJobRequest.
        """
        self._status = status

    @classmethod
    def get_real_child_model(cls, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaServerApiAsyncJobsUpdateJobRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
